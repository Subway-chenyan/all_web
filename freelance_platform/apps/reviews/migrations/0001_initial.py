# Generated by Django 5.2.7 on 2025-10-29 10:27

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gigs', '0001_initial'),
        ('orders', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('review_type', models.CharField(choices=[('freelancer', 'Freelancer Review'), ('client', 'Client Review'), ('gig', 'Gig Review')], db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('published', 'Published'), ('hidden', 'Hidden'), ('flagged', 'Flagged'), ('removed', 'Removed')], db_index=True, default='pending', max_length=20)),
                ('is_visible', models.BooleanField(db_index=True, default=False)),
                ('rating', models.IntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('delivery_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField(blank=True)),
                ('response', models.TextField(blank=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_helpful_count', models.PositiveIntegerField(default=0)),
                ('is_flagged', models.BooleanField(db_index=True, default=False)),
                ('flag_reason', models.CharField(blank=True, max_length=200)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_notes', models.TextField(blank=True)),
                ('gig', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='gigs.gig')),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='orders.order')),
                ('reviewee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews_review',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpful',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_helpful', models.BooleanField(db_index=True, default=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews_review_helpful',
            },
        ),
        migrations.CreateModel(
            name='ReviewInvitation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('client_invited', models.BooleanField(db_index=True, default=False)),
                ('freelancer_invited', models.BooleanField(db_index=True, default=False)),
                ('client_reviewed', models.BooleanField(db_index=True, default=False)),
                ('freelancer_reviewed', models.BooleanField(db_index=True, default=False)),
                ('client_invitation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('freelancer_invitation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('auto_send_invitation', models.BooleanField(default=True)),
                ('days_until_reminder', models.PositiveIntegerField(default=3)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review_invitation', to='orders.order')),
            ],
            options={
                'db_table': 'reviews_review_invitation',
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('fake', 'Fake Review'), ('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('harassment', 'Harassment'), ('conflict_of_interest', 'Conflict of Interest'), ('other', 'Other')], db_index=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], db_index=True, default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_reviews', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_review_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
            ],
            options={
                'db_table': 'reviews_review_report',
            },
        ),
        migrations.CreateModel(
            name='ReviewStat',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(db_index=True)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('published_reviews', models.PositiveIntegerField(default=0)),
                ('flagged_reviews', models.PositiveIntegerField(default=0)),
                ('removed_reviews', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('five_star_reviews', models.PositiveIntegerField(default=0)),
                ('four_star_reviews', models.PositiveIntegerField(default=0)),
                ('three_star_reviews', models.PositiveIntegerField(default=0)),
                ('two_star_reviews', models.PositiveIntegerField(default=0)),
                ('one_star_reviews', models.PositiveIntegerField(default=0)),
                ('responded_reviews', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.DurationField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reviews_review_stat',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['date'], name='reviews_rev_date_89c444_idx')],
                'unique_together': {('date',)},
            },
        ),
        migrations.CreateModel(
            name='ReviewTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('template_type', models.CharField(choices=[('positive', 'Positive Review'), ('neutral', 'Neutral Review'), ('negative', 'Negative Review'), ('detailed', 'Detailed Review')], db_index=True, max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('variables', models.JSONField(blank=True, default=list)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'db_table': 'reviews_review_template',
                'indexes': [models.Index(fields=['template_type'], name='reviews_rev_templat_e27a10_idx'), models.Index(fields=['is_active'], name='reviews_rev_is_acti_287066_idx'), models.Index(fields=['usage_count'], name='reviews_rev_usage_c_da57eb_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('communication_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('delivery_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('five_star_count', models.PositiveIntegerField(default=0)),
                ('four_star_count', models.PositiveIntegerField(default=0)),
                ('three_star_count', models.PositiveIntegerField(default=0)),
                ('two_star_count', models.PositiveIntegerField(default=0)),
                ('one_star_count', models.PositiveIntegerField(default=0)),
                ('reputation_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('rank_percentile', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_review_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating_summary', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews_user_rating',
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer', 'status'], name='reviews_rev_reviewe_06298d_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewee', 'status'], name='reviews_rev_reviewe_31e2bd_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['order'], name='reviews_rev_order_i_a8ba91_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['gig'], name='reviews_rev_gig_id_262aaf_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['review_type', 'status'], name='reviews_rev_review__541c5b_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='reviews_rev_rating_2db6dd_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_visible'], name='reviews_rev_is_visi_07df94_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_flagged'], name='reviews_rev_is_flag_790b01_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_rev_created_bdcc91_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'order', 'review_type')},
        ),
        migrations.AddIndex(
            model_name='reviewhelpful',
            index=models.Index(fields=['review', 'is_helpful'], name='reviews_rev_review__9d9573_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewhelpful',
            index=models.Index(fields=['user'], name='reviews_rev_user_id_ccbb45_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpful',
            unique_together={('review', 'user')},
        ),
        migrations.AddIndex(
            model_name='reviewinvitation',
            index=models.Index(fields=['order'], name='reviews_rev_order_i_d7d4d0_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewinvitation',
            index=models.Index(fields=['client_invited', 'client_reviewed'], name='reviews_rev_client__04d03a_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewinvitation',
            index=models.Index(fields=['freelancer_invited', 'freelancer_reviewed'], name='reviews_rev_freelan_701be0_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['review'], name='reviews_rev_review__b58af1_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['reporter'], name='reviews_rev_reporte_e48398_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['reason'], name='reviews_rev_reason_15900f_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['status'], name='reviews_rev_status_a5a585_idx'),
        ),
        migrations.AddIndex(
            model_name='userrating',
            index=models.Index(fields=['user'], name='reviews_use_user_id_6928aa_idx'),
        ),
        migrations.AddIndex(
            model_name='userrating',
            index=models.Index(fields=['overall_rating'], name='reviews_use_overall_dc4804_idx'),
        ),
        migrations.AddIndex(
            model_name='userrating',
            index=models.Index(fields=['total_reviews'], name='reviews_use_total_r_620195_idx'),
        ),
        migrations.AddIndex(
            model_name='userrating',
            index=models.Index(fields=['reputation_score'], name='reviews_use_reputat_8411d5_idx'),
        ),
        migrations.AddIndex(
            model_name='userrating',
            index=models.Index(fields=['rank_percentile'], name='reviews_use_rank_pe_2ad96d_idx'),
        ),
    ]
