[{"filePath":"/home/subway/all_web/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ProtectedRoute.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":25,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'canAccess' is assigned a value but never used.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { LoadingSpinner } from './auth';\nimport { useAuth, useAuthGuard } from '@/hooks/useAuth';\nimport { ROUTES } from '@/constants';\n\nexport interface ProtectedRouteProps {\n  children: React.ReactNode;\n  redirectTo?: string;\n  requiredRole?: 'client' | 'freelancer' | 'admin';\n  requireVerification?: boolean;\n  requireActive?: boolean;\n  fallback?: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  redirectTo = ROUTES.LOGIN,\n  requiredRole,\n  requireVerification = false,\n  requireActive = false,\n  fallback,\n}) => {\n  const location = useLocation();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const { canAccess, requireRole, requireVerification: checkVerification, requireActive: checkActive } = useAuthGuard();\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return fallback || (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <LoadingSpinner size=\"lg\" text=\"验证身份中...\" />\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <Navigate\n        to={redirectTo}\n        state={{ from: location }}\n        replace\n      />\n    );\n  }\n\n  // Check role requirements\n  if (requiredRole && !requireRole(requiredRole)) {\n    return (\n      <Navigate\n        to={ROUTES.DASHBOARD}\n        replace\n      />\n    );\n  }\n\n  // Check verification requirements\n  if (requireVerification && !checkVerification()) {\n    return (\n      <Navigate\n        to={ROUTES.VERIFY_EMAIL}\n        replace\n      />\n    );\n  }\n\n  // Check active status requirements\n  if (requireActive && !checkActive()) {\n    return (\n      <Navigate\n        to={ROUTES.DASHBOARD}\n        replace\n      />\n    );\n  }\n\n  // User is authenticated and meets all requirements\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/AnalyticsFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/BarChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[208,211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[208,211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { cn } from '@/utils';\n\nexport interface BarChartProps {\n  data: any[];\n  bars: {\n    dataKey: string;\n    fill: string;\n    name: string;\n  }[];\n  xAxisDataKey: string;\n  title?: string;\n  height?: number;\n  className?: string;\n  showGrid?: boolean;\n  showLegend?: boolean;\n  showTooltip?: boolean;\n  orientation?: 'vertical' | 'horizontal';\n}\n\nconst BarChartComponent: React.FC<BarChartProps> = ({\n  data,\n  bars,\n  xAxisDataKey,\n  title,\n  height = 300,\n  className = '',\n  showGrid = true,\n  showLegend = true,\n  showTooltip = true,\n  orientation = 'vertical',\n}) => {\n  return (\n    <div className={cn('w-full', className)}>\n      {title && (\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 leading-chinese\">\n          {title}\n        </h3>\n      )}\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <BarChart\n          data={data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n          layout={orientation === 'horizontal' ? 'horizontal' : 'vertical'}\n        >\n          {showGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />}\n          <XAxis\n            dataKey={orientation === 'horizontal' ? undefined : xAxisDataKey}\n            type={orientation === 'horizontal' ? 'number' : 'category'}\n            stroke=\"#6b7280\"\n            tick={{ fill: '#6b7280', fontSize: 12 }}\n            tickLine={{ stroke: '#e5e7eb' }}\n          />\n          <YAxis\n            dataKey={orientation === 'horizontal' ? xAxisDataKey : undefined}\n            type={orientation === 'horizontal' ? 'category' : 'number'}\n            stroke=\"#6b7280\"\n            tick={{ fill: '#6b7280', fontSize: 12 }}\n            tickLine={{ stroke: '#e5e7eb' }}\n          />\n          {showTooltip && (\n            <Tooltip\n              contentStyle={{\n                backgroundColor: '#ffffff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '8px',\n                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n              }}\n              labelStyle={{ color: '#111827', fontWeight: 'bold' }}\n            />\n          )}\n          {showLegend && <Legend />}\n          {bars.map((bar, index) => (\n            <Bar\n              key={index}\n              dataKey={bar.dataKey}\n              fill={bar.fill}\n              name={bar.name}\n              radius={[8, 8, 0, 0]}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default BarChartComponent;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/DateRangeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'placeholder' is assigned a value but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Calendar, ChevronDown } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface DateRangeOption {\n  label: string;\n  value: string;\n  days?: number;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface DateRangeSelectorProps {\n  options: DateRangeOption[];\n  selectedValue?: string;\n  onChange?: (option: DateRangeOption) => void;\n  className?: string;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nconst DEFAULT_OPTIONS: DateRangeOption[] = [\n  { label: '最近7天', value: '7d', days: 7 },\n  { label: '最近30天', value: '30d', days: 30 },\n  { label: '最近90天', value: '90d', days: 90 },\n  { label: '最近6个月', value: '6m', days: 180 },\n  { label: '最近1年', value: '1y', days: 365 },\n  { label: '自定义', value: 'custom' },\n];\n\nconst DateRangeSelector: React.FC<DateRangeSelectorProps> = ({\n  options = DEFAULT_OPTIONS,\n  selectedValue = '30d',\n  onChange,\n  className = '',\n  placeholder = '选择时间范围',\n  disabled = false,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<DateRangeOption>(\n    options.find(opt => opt.value === selectedValue) || options[0]\n  );\n\n  const handleSelect = (option: DateRangeOption) => {\n    setSelectedOption(option);\n    setIsOpen(false);\n    onChange?.(option);\n  };\n\n  return (\n    <div className={cn('relative', className)}>\n      <button\n        type=\"button\"\n        onClick={() => !disabled && setIsOpen(!isOpen)}\n        disabled={disabled}\n        className={cn(\n          'inline-flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg shadow-sm',\n          'text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500',\n          'disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200',\n          disabled && 'bg-gray-100 cursor-not-allowed'\n        )}\n      >\n        <Calendar className=\"w-4 h-4 text-gray-400\" />\n        <span>{selectedOption.label}</span>\n        <ChevronDown className={cn(\n          'w-4 h-4 text-gray-400 transition-transform duration-200',\n          isOpen && 'transform rotate-180'\n        )} />\n      </button>\n\n      {isOpen && (\n        <>\n          <div\n            className=\"fixed inset-0 z-10\"\n            onClick={() => setIsOpen(false)}\n          />\n          <div className=\"absolute right-0 z-20 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-1\">\n            {options.map((option) => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => handleSelect(option)}\n                className={cn(\n                  'w-full px-4 py-2 text-left text-sm hover:bg-gray-50 transition-colors duration-150',\n                  'focus:outline-none focus:bg-gray-50',\n                  selectedOption.value === option.value\n                    ? 'bg-red-50 text-red-700 font-medium'\n                    : 'text-gray-700'\n                )}\n              >\n                {option.label}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DateRangeSelector;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/ExportData.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[194,197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[194,197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[308,311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[308,311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1069,1072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1069,1072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1106,1109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1106,1109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1813,1816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1813,1816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Download, FileText, FileSpreadsheet, FileImage } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface ExportDataProps {\n  data: any[];\n  filename?: string;\n  formats?: ('csv' | 'excel' | 'pdf' | 'json')[];\n  onExport?: (format: string, data: any[]) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nconst ExportData: React.FC<ExportDataProps> = ({\n  data,\n  filename = 'export_data',\n  formats = ['csv', 'excel', 'json'],\n  onExport,\n  className = '',\n  disabled = false,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isExporting, setIsExporting] = useState<string | null>(null);\n\n  const formatOptions = [\n    { value: 'csv', label: 'CSV', icon: <FileText className=\"w-4 h-4\" /> },\n    { value: 'excel', label: 'Excel', icon: <FileSpreadsheet className=\"w-4 h-4\" /> },\n    { value: 'json', label: 'JSON', icon: <FileText className=\"w-4 h-4\" /> },\n    { value: 'pdf', label: 'PDF', icon: <FileImage className=\"w-4 h-4\" /> },\n  ].filter(option => formats.includes(option.value as any));\n\n  const downloadCSV = (data: any[]) => {\n    if (!data.length) return;\n\n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row =>\n        headers.map(header => {\n          const value = row[header];\n          return typeof value === 'string' && value.includes(',')\n            ? `\"${value.replace(/\"/g, '\"\"')}\"`\n            : value;\n        }).join(',')\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = `${filename}.csv`;\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n\n  const downloadJSON = (data: any[]) => {\n    const blob = new Blob([JSON.stringify(data, null, 2)], {\n      type: 'application/json;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = `${filename}.json`;\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n\n  const handleExport = async (format: string) => {\n    if (disabled || isExporting) return;\n\n    setIsExporting(format);\n\n    try {\n      if (onExport) {\n        await onExport(format, data);\n      } else {\n        switch (format) {\n          case 'csv':\n            downloadCSV(data);\n            break;\n          case 'json':\n            downloadJSON(data);\n            break;\n          case 'excel':\n            // Excel export would require a library like xlsx\n            console.log('Excel export not implemented');\n            break;\n          case 'pdf':\n            // PDF export would require a library like jspdf\n            console.log('PDF export not implemented');\n            break;\n        }\n      }\n    } catch (error) {\n      console.error('Export failed:', error);\n    } finally {\n      setIsExporting(null);\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <div className={cn('relative', className)}>\n      <button\n        type=\"button\"\n        onClick={() => !disabled && setIsOpen(!isOpen)}\n        disabled={disabled}\n        className={cn(\n          'inline-flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg shadow-sm',\n          'text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500',\n          'disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200'\n        )}\n      >\n        <Download className=\"w-4 h-4 text-gray-400\" />\n        <span>导出数据</span>\n      </button>\n\n      {isOpen && (\n        <>\n          <div\n            className=\"fixed inset-0 z-10\"\n            onClick={() => setIsOpen(false)}\n          />\n          <div className=\"absolute right-0 z-20 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1\">\n            {formatOptions.map((option) => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => handleExport(option.value)}\n                disabled={isExporting === option.value}\n                className={cn(\n                  'w-full px-4 py-2 text-left text-sm hover:bg-gray-50 transition-colors duration-150',\n                  'focus:outline-none focus:bg-gray-50 flex items-center gap-2',\n                  'text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed'\n                )}\n              >\n                {option.icon}\n                <span>{option.label}</span>\n                {isExporting === option.value && (\n                  <div className=\"ml-auto\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-red-500\"></div>\n                  </div>\n                )}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ExportData;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/LineChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { cn } from '@/utils';\n\nexport interface LineChartProps {\n  data: any[];\n  lines: {\n    dataKey: string;\n    stroke: string;\n    name: string;\n    strokeWidth?: number;\n  }[];\n  xAxisDataKey: string;\n  title?: string;\n  height?: number;\n  className?: string;\n  showGrid?: boolean;\n  showLegend?: boolean;\n  showTooltip?: boolean;\n}\n\nconst LineChartComponent: React.FC<LineChartProps> = ({\n  data,\n  lines,\n  xAxisDataKey,\n  title,\n  height = 300,\n  className = '',\n  showGrid = true,\n  showLegend = true,\n  showTooltip = true,\n}) => {\n  return (\n    <div className={cn('w-full', className)}>\n      {title && (\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 leading-chinese\">\n          {title}\n        </h3>\n      )}\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          {showGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />}\n          <XAxis\n            dataKey={xAxisDataKey}\n            stroke=\"#6b7280\"\n            tick={{ fill: '#6b7280', fontSize: 12 }}\n            tickLine={{ stroke: '#e5e7eb' }}\n          />\n          <YAxis\n            stroke=\"#6b7280\"\n            tick={{ fill: '#6b7280', fontSize: 12 }}\n            tickLine={{ stroke: '#e5e7eb' }}\n          />\n          {showTooltip && (\n            <Tooltip\n              contentStyle={{\n                backgroundColor: '#ffffff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '8px',\n                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n              }}\n              labelStyle={{ color: '#111827', fontWeight: 'bold' }}\n            />\n          )}\n          {showLegend && <Legend />}\n          {lines.map((line, index) => (\n            <Line\n              key={index}\n              type=\"monotone\"\n              dataKey={line.dataKey}\n              stroke={line.stroke}\n              name={line.name}\n              strokeWidth={line.strokeWidth || 2}\n              dot={{ fill: line.stroke, strokeWidth: 2, r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default LineChartComponent;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/MetricDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/PieChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1056,1059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1056,1059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { cn } from '@/utils';\n\nexport interface PieChartProps {\n  data: {\n    name: string;\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  height?: number;\n  className?: string;\n  showLegend?: boolean;\n  showTooltip?: boolean;\n  innerRadius?: number;\n  outerRadius?: number;\n  showLabels?: boolean;\n}\n\nconst DEFAULT_COLORS = [\n  '#ef4444', // red-500\n  '#f59e0b', // amber-500\n  '#10b981', // emerald-500\n  '#3b82f6', // blue-500\n  '#8b5cf6', // violet-500\n  '#ec4899', // pink-500\n  '#06b6d4', // cyan-500\n  '#84cc16', // lime-500\n];\n\nconst PieChartComponent: React.FC<PieChartProps> = ({\n  data,\n  title,\n  height = 300,\n  className = '',\n  showLegend = true,\n  showTooltip = true,\n  innerRadius = 0,\n  outerRadius = 80,\n  showLabels = true,\n}) => {\n  const chartData = data.map((item, index) => ({\n    ...item,\n    color: item.color || DEFAULT_COLORS[index % DEFAULT_COLORS.length],\n  }));\n\n  const renderLabel = (entry: any) => {\n    if (!showLabels) return null;\n    const percentage = ((entry.value / data.reduce((sum, item) => sum + item.value, 0)) * 100).toFixed(1);\n    return `${percentage}%`;\n  };\n\n  return (\n    <div className={cn('w-full', className)}>\n      {title && (\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 leading-chinese\">\n          {title}\n        </h3>\n      )}\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <PieChart>\n          <Pie\n            data={chartData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={renderLabel}\n            outerRadius={outerRadius}\n            innerRadius={innerRadius}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n          >\n            {chartData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          {showTooltip && (\n            <Tooltip\n              contentStyle={{\n                backgroundColor: '#ffffff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '8px',\n                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n              }}\n              formatter={(value: number) => [`${value}`, '数量']}\n            />\n          )}\n          {showLegend && (\n            <Legend\n              verticalAlign=\"middle\"\n              align=\"right\"\n              layout=\"vertical\"\n              formatter={(value) => <span className=\"text-sm text-gray-700\">{value}</span>}\n            />\n          )}\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default PieChartComponent;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/TrendIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/EmailVerification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormInput' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport Button from '@/components/ui/Button';\nimport FormInput from './FormInput';\nimport FormError from './FormError';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport interface EmailVerificationProps {\n  email: string;\n  onVerificationSuccess?: () => void;\n  onResend?: (email: string) => Promise<void>;\n  className?: string;\n}\n\nconst EmailVerification: React.FC<EmailVerificationProps> = ({\n  email,\n  onVerificationSuccess,\n  onResend,\n  className,\n}) => {\n  const [code, setCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [countdown, setCountdown] = useState(0);\n  const [isVerified, setIsVerified] = useState(false);\n\n  // Countdown timer for resend button\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [countdown]);\n\n  // Handle verification code input (auto-focus next input)\n  const handleCodeChange = (value: string, index: number) => {\n    // Only allow numbers\n    const numericValue = value.replace(/\\D/g, '');\n\n    if (numericValue.length <= 1) {\n      const newCode = code.split('');\n      newCode[index] = numericValue;\n      setCode(newCode.join(''));\n\n      // Auto-focus next input\n      if (numericValue && index < 5) {\n        const nextInput = document.getElementById(`code-input-${index + 1}`) as HTMLInputElement;\n        if (nextInput) {\n          nextInput.focus();\n        }\n      }\n    }\n  };\n\n  // Handle key press for backspace navigation\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {\n    if (e.key === 'Backspace' && !code[index] && index > 0) {\n      const prevInput = document.getElementById(`code-input-${index - 1}`) as HTMLInputElement;\n      if (prevInput) {\n        prevInput.focus();\n      }\n    }\n  };\n\n  // Handle paste event\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text').replace(/\\D/g, '').slice(0, 6);\n    if (pastedData.length === 6) {\n      setCode(pastedData);\n      // Focus last input\n      const lastInput = document.getElementById('code-input-5') as HTMLInputElement;\n      if (lastInput) {\n        lastInput.focus();\n      }\n    }\n  };\n\n  // Verify email code\n  const handleVerify = async () => {\n    if (code.length !== 6) {\n      setError('请输入完整的6位验证码');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Mock API call - replace with actual verification\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Simulate success/failure\n      if (code === '123456') {\n        setIsVerified(true);\n        onVerificationSuccess?.();\n      } else {\n        setError('验证码错误，请重新输入');\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : '验证失败，请重试');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Resend verification code\n  const handleResend = async () => {\n    if (countdown > 0) return;\n\n    setIsResending(true);\n    setError(null);\n\n    try {\n      await onResend?.(email);\n\n      // Start countdown\n      setCountdown(60);\n      setCode(''); // Clear existing code\n\n      // Focus first input\n      const firstInput = document.getElementById('code-input-0') as HTMLInputElement;\n      if (firstInput) {\n        firstInput.focus();\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : '发送失败，请重试');\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  // Success state\n  if (isVerified) {\n    return (\n      <div className={cn('text-center py-8', className)}>\n        <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n          <svg\n            className=\"w-8 h-8 text-green-500\"\n            fill=\"none\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"2\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path d=\"M5 13l4 4L19 7\" />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">邮箱验证成功</h3>\n        <p className=\"text-sm text-gray-600\">您的邮箱 {email} 已成功验证</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">验证您的邮箱</h3>\n        <p className=\"text-sm text-gray-600\">\n          我们已向 <span className=\"font-medium text-gray-900\">{email}</span> 发送了6位验证码\n        </p>\n      </div>\n\n      {/* Code Input Fields */}\n      <div className=\"flex justify-center space-x-2\">\n        {[0, 1, 2, 3, 4, 5].map((index) => (\n          <input\n            key={index}\n            id={`code-input-${index}`}\n            type=\"text\"\n            inputMode=\"numeric\"\n            maxLength={1}\n            value={code[index] || ''}\n            onChange={(e) => handleCodeChange(e.target.value, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            onPaste={index === 0 ? handlePaste : undefined}\n            className={cn(\n              'w-12 h-12 text-center text-lg font-semibold border-2 rounded-lg',\n              'focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent',\n              'transition-all duration-200',\n              code[index] ? 'border-red-500 bg-red-50' : 'border-gray-300'\n            )}\n            autoComplete=\"off\"\n          />\n        ))}\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <FormError error={error} />\n      )}\n\n      {/* Verify Button */}\n      <Button\n        onClick={handleVerify}\n        loading={isLoading}\n        disabled={code.length !== 6 || isLoading}\n        fullWidth\n        size=\"lg\"\n      >\n        {isLoading ? '验证中...' : '验证邮箱'}\n      </Button>\n\n      {/* Resend Section */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 mb-3\">\n          没有收到验证码？\n        </p>\n        <button\n          type=\"button\"\n          onClick={handleResend}\n          disabled={countdown > 0 || isResending}\n          className={cn(\n            'inline-flex items-center text-sm font-medium',\n            countdown > 0 || isResending\n              ? 'text-gray-400 cursor-not-allowed'\n              : 'text-red-500 hover:text-red-600 transition-colors'\n          )}\n        >\n          {isResending && <LoadingSpinner size=\"sm\" className=\"mr-2\" />}\n          {countdown > 0 ? `重新发送 (${countdown}s)` : '重新发送验证码'}\n        </button>\n      </div>\n\n      {/* Help Text */}\n      <div className=\"text-center\">\n        <p className=\"text-xs text-gray-500\">\n          • 验证码有效期为10分钟<br/>\n          • 请检查垃圾邮件文件夹<br/>\n          • 如有问题，请联系客服\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailVerification;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/FormError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/FormInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/PasswordInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generatedId' is assigned a value but never used.","line":20,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'togglePasswordVisibility' is assigned a value but never used.","line":64,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, forwardRef, useId } from 'react';\nimport { cn } from '@/utils';\nimport FormInput, { FormInputProps } from './FormInput';\n\nexport interface PasswordInputProps extends Omit<FormInputProps, 'type' | 'rightIcon'> {\n  showStrengthIndicator?: boolean;\n  onStrengthChange?: (strength: 'weak' | 'medium' | 'strong', score: number) => void;\n}\n\nconst PasswordInput = forwardRef<HTMLInputElement, PasswordInputProps>(({\n  showStrengthIndicator = false,\n  onStrengthChange,\n  className,\n  value,\n  ...props\n}, ref) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [strength, setStrength] = useState<'weak' | 'medium' | 'strong'>('weak');\n  const [strengthScore, setStrengthScore] = useState(0);\n  const generatedId = useId();\n\n  // Calculate password strength\n  const calculatePasswordStrength = (password: string): { strength: 'weak' | 'medium' | 'strong'; score: number } => {\n    if (!password || password.length < 8) {\n      return { strength: 'weak', score: 0 };\n    }\n\n    let score = 0;\n\n    // Length bonus\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (password.length >= 16) score++;\n\n    // Character variety\n    if (/[a-z]/.test(password)) score++; // lowercase\n    if (/[A-Z]/.test(password)) score++; // uppercase\n    if (/\\d/.test(password)) score++; // numbers\n    if (/[^a-zA-Z\\d]/.test(password)) score++; // special characters\n\n    // Avoid common patterns\n    if (!/(.)\\1{2,}/.test(password)) score++; // no repeated characters\n    if (!/123|abc|qwe/i.test(password)) score++; // no sequential patterns\n\n    let strength: 'weak' | 'medium' | 'strong';\n    if (score <= 3) strength = 'weak';\n    else if (score <= 6) strength = 'medium';\n    else strength = 'strong';\n\n    return { strength, score };\n  };\n\n  // Update strength when password changes\n  React.useEffect(() => {\n    if (showStrengthIndicator && value) {\n      const result = calculatePasswordStrength(value as string);\n      setStrength(result.strength);\n      setStrengthScore(result.score);\n      onStrengthChange?.(result.strength, result.score);\n    }\n  }, [value, showStrengthIndicator, onStrengthChange]);\n\n  // Toggle password visibility\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  // Eye icons for show/hide password\n  const EyeIcon = () => (\n    <svg\n      className=\"w-5 h-5 text-gray-400 hover:text-gray-600 transition-colors\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      {showPassword ? (\n        <path d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21\" />\n      ) : (\n        <path d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n      )}\n    </svg>\n  );\n\n  // Strength indicator component\n  const StrengthIndicator = () => {\n    if (!showStrengthIndicator || !value) return null;\n\n    const strengthConfig = {\n      weak: { color: 'bg-red-500', text: '弱', textColor: 'text-red-500' },\n      medium: { color: 'bg-yellow-500', text: '中等', textColor: 'text-yellow-500' },\n      strong: { color: 'bg-green-500', text: '强', textColor: 'text-green-500' },\n    };\n\n    const config = strengthConfig[strength];\n\n    return (\n      <div className=\"mt-2 space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs text-gray-500\">密码强度</span>\n          <span className={cn('text-xs font-medium', config.textColor)}>\n            {config.text}\n          </span>\n        </div>\n        <div className=\"flex space-x-1\">\n          {[1, 2, 3, 4, 5].map((level) => (\n            <div\n              key={level}\n              className={cn(\n                'h-1 flex-1 rounded-full transition-colors duration-200',\n                level <= strengthScore ? config.color : 'bg-gray-200'\n              )}\n            />\n          ))}\n        </div>\n        <div className=\"text-xs text-gray-500 space-y-1\">\n          <p>密码建议：</p>\n          <ul className=\"space-y-0.5 ml-2\">\n            <li className={cn('flex items-center', /[a-z]/.test(value as string) && /[A-Z]/.test(value as string) ? 'text-green-500' : 'text-gray-400')}>\n              <span className=\"mr-1\">•</span>\n              包含大小写字母\n            </li>\n            <li className={cn('flex items-center', /\\d/.test(value as string) ? 'text-green-500' : 'text-gray-400')}>\n              <span className=\"mr-1\">•</span>\n              包含数字\n            </li>\n            <li className={cn('flex items-center', /[^a-zA-Z\\d]/.test(value as string) ? 'text-green-500' : 'text-gray-400')}>\n              <span className=\"mr-1\">•</span>\n              包含特殊字符\n            </li>\n            <li className={cn('flex items-center', (value as string).length >= 12 ? 'text-green-500' : 'text-gray-400')}>\n              <span className=\"mr-1\">•</span>\n              至少12个字符\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <FormInput\n        ref={ref}\n        type={showPassword ? 'text' : 'password'}\n        rightIcon={<EyeIcon />}\n        className={cn('cursor-text', className)}\n        value={value}\n        {...props}\n      />\n      <StrengthIndicator />\n    </div>\n  );\n});\n\nPasswordInput.displayName = 'PasswordInput';\n\nexport default PasswordInput;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/PhoneInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormInput' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fullNumber' is assigned a value but never used.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef, useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport FormInput, { FormInputProps } from './FormInput';\n\nexport interface PhoneInputProps extends Omit<FormInputProps, 'type'> {\n  defaultCountry?: string;\n  onCountryChange?: (country: string, dialCode: string) => void;\n  showCountryCode?: boolean;\n}\n\n// Country code configuration\nconst COUNTRIES = [\n  { code: 'CN', name: '中国', dialCode: '+86', flag: '🇨🇳', pattern: /^1[3-9]\\d{9}$/ },\n  { code: 'HK', name: '香港', dialCode: '+852', flag: '🇭🇰', pattern: /^[4-9]\\d{7}$/ },\n  { code: 'TW', name: '台湾', dialCode: '+886', flag: '🇹🇼', pattern: /^9\\d{8}$/ },\n  { code: 'US', name: '美国', dialCode: '+1', flag: '🇺🇸', pattern: /^\\d{10}$/ },\n  { code: 'UK', name: '英国', dialCode: '+44', flag: '🇬🇧', pattern: /^\\d{10,11}$/ },\n  { code: 'JP', name: '日本', dialCode: '+81', flag: '🇯🇵', pattern: /^\\d{10,11}$/ },\n  { code: 'KR', name: '韩国', dialCode: '+82', flag: '🇰🇷', pattern: /^\\d{9,11}$/ },\n  { code: 'SG', name: '新加坡', dialCode: '+65', flag: '🇸🇬', pattern: /^[6-8]\\d{7}$/ },\n];\n\nconst PhoneInput = forwardRef<HTMLInputElement, PhoneInputProps>(({\n  defaultCountry = 'CN',\n  onCountryChange,\n  showCountryCode = true,\n  value,\n  onChange,\n  onBlur,\n  error,\n  helperText,\n  className,\n  ...props\n}, ref) => {\n  const [selectedCountry, setSelectedCountry] = useState(COUNTRIES.find(c => c.code === defaultCountry) || COUNTRIES[0]);\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isValid, setIsValid] = useState<boolean | null>(null);\n\n  // Update phone number when value prop changes\n  useEffect(() => {\n    if (value !== undefined) {\n      // Extract phone number without country code\n      const cleanNumber = value.toString().replace(selectedCountry.dialCode, '').replace(/\\s/g, '');\n      setPhoneNumber(cleanNumber);\n    }\n  }, [value, selectedCountry.dialCode]);\n\n  // Handle country change\n  const handleCountryChange = (country: typeof COUNTRIES[0]) => {\n    setSelectedCountry(country);\n    setShowDropdown(false);\n    onCountryChange?.(country.code, country.dialCode);\n\n    // Validate phone number with new country pattern\n    if (phoneNumber) {\n      const valid = country.pattern.test(phoneNumber);\n      setIsValid(valid);\n    }\n  };\n\n  // Handle phone number change\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/\\D/g, ''); // Only allow digits\n    setPhoneNumber(value);\n\n    // Validate with current country pattern\n    const valid = selectedCountry.pattern.test(value);\n    setIsValid(value.length > 0 ? valid : null);\n\n    // Pass full phone number with country code to parent\n    const fullNumber = value ? `${selectedCountry.dialCode}${value}` : '';\n    onChange?.(e);\n  };\n\n  // Handle blur event\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setShowDropdown(false);\n    onBlur?.(e);\n  };\n\n  // Format phone number for display\n  const formatPhoneNumber = (number: string) => {\n    if (!number) return '';\n\n    // Basic formatting for Chinese numbers\n    if (selectedCountry.code === 'CN' && number.length === 11) {\n      return `${number.slice(0, 3)} ${number.slice(3, 7)} ${number.slice(7)}`;\n    }\n\n    // Basic formatting for US numbers\n    if (selectedCountry.code === 'US' && number.length === 10) {\n      return `(${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`;\n    }\n\n    return number;\n  };\n\n  // Get validation state\n  const getValidationState = () => {\n    if (isValid === null) return '';\n    if (isValid) return 'border-green-500 focus:border-green-500 focus:ring-green-500';\n    return 'border-red-500 focus:border-red-500 focus:ring-red-500';\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"relative\">\n        {/* Country Selector */}\n        <div className=\"flex\">\n          {showCountryCode && (\n            <button\n              type=\"button\"\n              onClick={() => setShowDropdown(!showDropdown)}\n              className=\"flex items-center px-3 py-2 text-sm bg-gray-50 border border-r-0 border-gray-300 rounded-l-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-0\"\n            >\n              <span className=\"mr-1\">{selectedCountry.flag}</span>\n              <span className=\"text-xs text-gray-600\">{selectedCountry.dialCode}</span>\n              <svg\n                className={cn('w-4 h-4 ml-1 text-gray-400 transition-transform', showDropdown && 'rotate-180')}\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n          )}\n\n          {/* Phone Input */}\n          <input\n            ref={ref}\n            type=\"tel\"\n            value={formatPhoneNumber(phoneNumber)}\n            onChange={handlePhoneChange}\n            onBlur={handleBlur}\n            placeholder=\"请输入手机号码\"\n            className={cn(\n              'block w-full border border-gray-300 rounded-lg transition-all duration-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-0',\n              showCountryCode ? 'rounded-l-none' : '',\n              getValidationState(),\n              'focus:border-red-500 focus:ring-red-500',\n              'px-4 py-2 text-sm',\n              error ? 'border-red-500' : '',\n              className\n            )}\n            {...props}\n          />\n        </div>\n\n        {/* Country Dropdown */}\n        {showDropdown && (\n          <div className=\"absolute z-10 mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n            <div className=\"py-1\">\n              {COUNTRIES.map((country) => (\n                <button\n                  key={country.code}\n                  type=\"button\"\n                  onClick={() => handleCountryChange(country)}\n                  className={cn(\n                    'w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center space-x-3 transition-colors',\n                    selectedCountry.code === country.code && 'bg-red-50 text-red-600'\n                  )}\n                >\n                  <span className=\"text-lg\">{country.flag}</span>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium\">{country.name}</div>\n                    <div className=\"text-xs text-gray-500\">{country.dialCode}</div>\n                  </div>\n                  {selectedCountry.code === country.code && (\n                    <svg\n                      className=\"w-4 h-4 text-red-500\"\n                      fill=\"none\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Helper Text / Error Message */}\n      {(error || helperText) && (\n        <div className=\"flex items-start space-x-1\">\n          {error && (\n            <svg\n              className=\"w-4 h-4 text-red-500 flex-shrink-0 mt-0.5\"\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          )}\n          <p className={cn(\n            'text-xs',\n            error ? 'text-red-500' : 'text-gray-500',\n            'leading-chinese'\n          )}>\n            {error || helperText}\n          </p>\n        </div>\n      )}\n\n      {/* Phone validation hint */}\n      {phoneNumber && isValid !== null && (\n        <div className=\"flex items-center space-x-1\">\n          {isValid ? (\n            <>\n              <svg\n                className=\"w-4 h-4 text-green-500\"\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M5 13l4 4L19 7\" />\n              </svg>\n              <span className=\"text-xs text-green-600\">手机号码格式正确</span>\n            </>\n          ) : (\n            <>\n              <svg\n                className=\"w-4 h-4 text-red-500\"\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n              <span className=\"text-xs text-red-600\">\n                {selectedCountry.code === 'CN' ? '请输入有效的11位手机号码' : '请输入有效的手机号码'}\n              </span>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n});\n\nPhoneInput.displayName = 'PhoneInput';\n\nexport default PhoneInput;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/SocialLoginButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/ActivityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/CalendarWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/MessagePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/NotificationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Bell, X, Check, Settings, Info, AlertTriangle, CheckCircle, MessageCircle } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error' | 'message';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  action?: {\n    label: string;\n    url?: string;\n    onClick?: () => void;\n  };\n  metadata?: {\n    orderId?: string;\n    serviceId?: string;\n    userId?: string;\n  };\n}\n\nexport interface NotificationPanelProps {\n  notifications: Notification[];\n  title?: string;\n  maxItems?: number;\n  showActions?: boolean;\n  className?: string;\n  onNotificationClick?: (notification: Notification) => void;\n  onMarkAsRead?: (notificationId: string) => void;\n  onMarkAllAsRead?: () => void;\n  onClearAll?: () => void;\n  loading?: boolean;\n}\n\nconst NotificationPanel: React.FC<NotificationPanelProps> = ({\n  notifications,\n  title = '通知中心',\n  maxItems = 10,\n  showActions = true,\n  className = '',\n  onNotificationClick,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onClearAll,\n  loading = false,\n}) => {\n  const [filter, setFilter] = useState<'all' | 'unread'>('all');\n\n  const getNotificationInfo = (type: string) => {\n    switch (type) {\n      case 'success':\n        return {\n          icon: CheckCircle,\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          borderColor: 'border-green-200',\n        };\n      case 'warning':\n        return {\n          icon: AlertTriangle,\n          color: 'text-yellow-600',\n          bgColor: 'bg-yellow-50',\n          borderColor: 'border-yellow-200',\n        };\n      case 'error':\n        return {\n          icon: X,\n          color: 'text-red-600',\n          bgColor: 'bg-red-50',\n          borderColor: 'border-red-200',\n        };\n      case 'message':\n        return {\n          icon: MessageCircle,\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-50',\n          borderColor: 'border-blue-200',\n        };\n      default:\n        return {\n          icon: Info,\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-200',\n        };\n    }\n  };\n\n  const formatTime = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (minutes < 1) return '刚刚';\n    if (minutes < 60) return `${minutes}分钟前`;\n    if (hours < 24) return `${hours}小时前`;\n    if (days < 7) return `${days}天前`;\n    return timestamp.toLocaleDateString('zh-CN');\n  };\n\n  const filteredNotifications = notifications.filter(notification =>\n    filter === 'all' || !notification.read\n  );\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.read) {\n      onMarkAsRead?.(notification.id);\n    }\n    onNotificationClick?.(notification);\n  };\n\n  const handleActionClick = (notification: Notification, e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (notification.action?.onClick) {\n      notification.action.onClick();\n    } else if (notification.action?.url) {\n      window.location.href = notification.action.url;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"h-6 bg-gray-200 rounded w-16\"></div>\n          </div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-start gap-3 p-3 bg-gray-50 rounded\">\n                <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200', className)}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Bell className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 leading-chinese\">\n              {title}\n            </h3>\n            {unreadCount > 0 && (\n              <span className=\"inline-flex items-center justify-center px-2 py-0.5 text-xs font-medium text-red-700 bg-red-100 rounded-full\">\n                {unreadCount}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {showActions && (\n              <>\n                <button\n                  onClick={() => setFilter(filter === 'all' ? 'unread' : 'all')}\n                  className=\"text-sm text-gray-600 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100\"\n                >\n                  {filter === 'all' ? '仅未读' : '全部'}\n                </button>\n                {unreadCount > 0 && (\n                  <button\n                    onClick={onMarkAllAsRead}\n                    className=\"text-sm text-blue-600 hover:text-blue-700 px-3 py-1 rounded hover:bg-blue-50\"\n                  >\n                    全部已读\n                  </button>\n                )}\n                {notifications.length > 0 && (\n                  <button\n                    onClick={onClearAll}\n                    className=\"text-sm text-red-600 hover:text-red-700 px-3 py-1 rounded hover:bg-red-50\"\n                  >\n                    清空\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Notifications List */}\n      <div className=\"max-h-96 overflow-y-auto\">\n        {filteredNotifications.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Bell className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n            <p>\n              {filter === 'unread' ? '暂无未读通知' : '暂无通知'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-100\">\n            {filteredNotifications.slice(0, maxItems).map((notification) => {\n              const notificationInfo = getNotificationInfo(notification.type);\n              const Icon = notificationInfo.icon;\n\n              return (\n                <div\n                  key={notification.id}\n                  className={cn(\n                    'p-4 cursor-pointer transition-all duration-200',\n                    notification.read\n                      ? 'bg-white hover:bg-gray-50'\n                      : 'bg-blue-50 hover:bg-blue-100 border-l-4 border-blue-500'\n                  )}\n                  onClick={() => handleNotificationClick(notification)}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className={cn(\n                      'p-2 rounded-lg flex-shrink-0',\n                      notification.read ? notificationInfo.bgColor : 'bg-blue-100'\n                    )}>\n                      <Icon className={cn(\n                        'w-5 h-5',\n                        notification.read ? notificationInfo.color : 'text-blue-600'\n                      )} />\n                    </div>\n\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between mb-1\">\n                        <h4 className=\"text-sm font-medium text-gray-900 leading-chinese\">\n                          {notification.title}\n                        </h4>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-xs text-gray-500\">\n                            {formatTime(notification.timestamp)}\n                          </span>\n                          {!notification.read && (\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                          )}\n                        </div>\n                      </div>\n\n                      <p className=\"text-sm text-gray-600 mb-2 leading-chinese\">\n                        {notification.message}\n                      </p>\n\n                      {notification.action && (\n                        <button\n                          onClick={(e) => handleActionClick(notification, e)}\n                          className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                        >\n                          {notification.action.label}\n                        </button>\n                      )}\n\n                      {/* Metadata */}\n                      {notification.metadata && (\n                        <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-500\">\n                          {notification.metadata.orderId && (\n                            <span>订单: #{notification.metadata.orderId}</span>\n                          )}\n                          {notification.metadata.serviceId && (\n                            <span>服务: #{notification.metadata.serviceId}</span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onMarkAsRead?.(notification.id);\n                      }}\n                      className={cn(\n                        'p-1 rounded transition-colors duration-200',\n                        notification.read\n                          ? 'text-gray-400 hover:text-gray-600'\n                          : 'text-blue-500 hover:text-blue-700'\n                      )}\n                    >\n                      <Check className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {filteredNotifications.length > maxItems && (\n        <div className=\"p-4 border-t border-gray-200 text-center\">\n          <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\n            查看全部通知\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationPanel;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/OrderStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/PerformanceMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/QuickAction.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/RevenueChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/StatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/CategorySelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServiceSubcategory' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceCategory, ServiceSubcategory } from '@/types/services';\n\nexport interface CategorySelectorProps {\n  categories: ServiceCategory[];\n  selectedCategory?: string;\n  selectedSubcategory?: string;\n  onCategoryChange: (categoryId: string) => void;\n  onSubcategoryChange: (subcategoryId: string) => void;\n  className?: string;\n  disabled?: boolean;\n  showIcons?: boolean;\n  placeholder?: string;\n}\n\nconst CategorySelector: React.FC<CategorySelectorProps> = ({\n  categories,\n  selectedCategory,\n  selectedSubcategory,\n  onCategoryChange,\n  onSubcategoryChange,\n  className = '',\n  disabled = false,\n  showIcons = true,\n  placeholder = '选择分类'\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const selectedCategoryData = categories.find(cat => cat.id === selectedCategory);\n  const selectedSubcategoryData = selectedCategoryData?.subcategories.find(\n    sub => sub.id === selectedSubcategory\n  );\n\n  const filteredCategories = categories.filter(category =>\n    category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    category.subcategories.some(sub =>\n      sub.name.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  );\n\n  const handleCategorySelect = (categoryId: string) => {\n    onCategoryChange(categoryId);\n    // Reset subcategory when category changes\n    onSubcategoryChange('');\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const handleSubcategorySelect = (subcategoryId: string) => {\n    onSubcategoryChange(subcategoryId);\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const getDisplayText = () => {\n    if (selectedCategoryData && selectedSubcategoryData) {\n      return `${selectedCategoryData.name} > ${selectedSubcategoryData.name}`;\n    }\n    if (selectedCategoryData) {\n      return selectedCategoryData.name;\n    }\n    return placeholder;\n  };\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Trigger Button */}\n      <button\n        type=\"button\"\n        onClick={() => !disabled && setIsOpen(!isOpen)}\n        className={cn(\n          'w-full px-3 py-2 text-left border border-gray-300 rounded-md bg-white',\n          'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n          'flex items-center justify-between',\n          disabled && 'opacity-50 cursor-not-allowed bg-gray-50'\n        )}\n        disabled={disabled}\n      >\n        <span className={cn(\n          'truncate',\n          selectedCategory ? 'text-gray-900' : 'text-gray-500'\n        )}>\n          {getDisplayText()}\n        </span>\n        <svg\n          className={cn(\n            'w-5 h-5 text-gray-400 transition-transform',\n            isOpen && 'transform rotate-180'\n          )}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 9l-7 7-7-7\"\n          />\n        </svg>\n      </button>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div\n            className=\"fixed inset-0 z-10\"\n            onClick={() => setIsOpen(false)}\n          />\n\n          {/* Dropdown Content */}\n          <div className=\"absolute z-20 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-80 overflow-hidden\">\n            {/* Search */}\n            <div className=\"p-3 border-b border-gray-200\">\n              <input\n                type=\"text\"\n                placeholder=\"搜索分类...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                autoFocus\n              />\n            </div>\n\n            {/* Categories List */}\n            <div className=\"max-h-64 overflow-y-auto\">\n              {filteredCategories.length === 0 ? (\n                <div className=\"p-4 text-center text-gray-500\">\n                  没有找到匹配的分类\n                </div>\n              ) : (\n                <div className=\"py-1\">\n                  {filteredCategories.map((category) => (\n                    <div key={category.id} className=\"border-b border-gray-100 last:border-b-0\">\n                      {/* Category Header */}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleCategorySelect(category.id)}\n                        className={cn(\n                          'w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors',\n                          'flex items-center justify-between',\n                          selectedCategory === category.id && 'bg-blue-50 text-blue-600'\n                        )}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          {showIcons && category.icon && (\n                            <span className=\"text-xl\">{category.icon}</span>\n                          )}\n                          <span className=\"font-medium\">{category.name}</span>\n                        </div>\n                        <svg\n                          className=\"w-4 h-4 text-gray-400\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M9 5l7 7-7 7\"\n                          />\n                        </svg>\n                      </button>\n\n                      {/* Subcategories (visible when category is selected) */}\n                      {selectedCategory === category.id && category.subcategories.length > 0 && (\n                        <div className=\"bg-gray-50 border-t border-gray-200\">\n                          {category.subcategories.map((subcategory) => (\n                            <button\n                              key={subcategory.id}\n                              type=\"button\"\n                              onClick={() => handleSubcategorySelect(subcategory.id)}\n                              className={cn(\n                                'w-full px-8 py-2 text-left hover:bg-gray-100 transition-colors text-sm',\n                                selectedSubcategory === subcategory.id && 'bg-blue-100 text-blue-700'\n                              )}\n                            >\n                              {subcategory.name}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Footer */}\n            {selectedCategory && !selectedSubcategory && selectedCategoryData?.subcategories.length > 0 && (\n              <div className=\"p-3 bg-gray-50 border-t border-gray-200\">\n                <p className=\"text-xs text-gray-500\">\n                  请选择一个子分类\n                </p>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CategorySelector;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/DurationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/FileUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":120,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newErrors' is assigned a value but never used.","line":131,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFileSelect'. Either include it or remove the dependency array.","line":171,"column":6,"nodeType":"ArrayExpression","endLine":171,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, handleFileSelect]","fix":{"range":[4437,4461],"text":"[disabled, handleFileSelect]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useCallback } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceDocument } from '@/types/services';\nimport Button from '@/components/ui/Button';\n\nexport interface FileUploadProps {\n  files: ServiceDocument[];\n  onChange: (files: ServiceDocument[]) => void;\n  maxFiles?: number;\n  maxFileSize?: number; // in bytes\n  acceptedTypes?: string[];\n  acceptedFormats?: string[];\n  className?: string;\n  disabled?: boolean;\n  showPreview?: boolean;\n  allowReorder?: boolean;\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({\n  files = [],\n  onChange,\n  maxFiles = 10,\n  maxFileSize = 50 * 1024 * 1024, // 50MB\n  acceptedTypes = [],\n  acceptedFormats = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'zip', 'rar'],\n  className = '',\n  disabled = false,\n  showPreview = true,\n  allowReorder = true\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const validateFile = (file: File): string[] => {\n    const newErrors: string[] = [];\n\n    // Check file type\n    if (acceptedTypes.length > 0 && !acceptedTypes.includes(file.type)) {\n      newErrors.push(`不支持的文件类型。请使用: ${acceptedTypes.join(', ')}`);\n    }\n\n    // Check file extension\n    const extension = file.name.split('.').pop()?.toLowerCase();\n    if (extension && !acceptedFormats.includes(extension)) {\n      newErrors.push(`不支持的文件格式。请使用: ${acceptedFormats.join(', ')}`);\n    }\n\n    // Check file size\n    if (file.size > maxFileSize) {\n      newErrors.push(`文件大小不能超过 ${(maxFileSize / 1024 / 1024).toFixed(1)}MB`);\n    }\n\n    return newErrors;\n  };\n\n  const getFileTypeIcon = (filename: string): string => {\n    const extension = filename.split('.').pop()?.toLowerCase();\n\n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'ppt':\n      case 'pptx':\n        return '📽️';\n      case 'txt':\n        return '📃';\n      case 'zip':\n      case 'rar':\n      case '7z':\n        return '📦';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'mp4':\n      case 'avi':\n      case 'mov':\n        return '🎥';\n      case 'mp3':\n      case 'wav':\n        return '🎵';\n      default:\n        return '📄';\n    }\n  };\n\n  const processFile = async (file: File): Promise<ServiceDocument | null> => {\n    const validationErrors = validateFile(file);\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n      return null;\n    }\n\n    try {\n      setUploading(true);\n\n      // In a real application, you would upload to a server here\n      // For now, we'll create a local URL\n      const url = URL.createObjectURL(file);\n\n      const newFile: ServiceDocument = {\n        id: `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name: file.name,\n        url,\n        size: file.size,\n        type: file.type,\n        order: files.length\n      };\n\n      return newFile;\n    } catch (error) {\n      setErrors(['文件处理失败，请重试']);\n      return null;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleFileSelect = async (files: FileList | null) => {\n    if (!files || disabled) return;\n\n    const newErrors: string[] = [];\n    const newFiles: ServiceDocument[] = [];\n\n    for (let i = 0; i < Math.min(files.length, maxFiles - files.length); i++) {\n      const file = files[i];\n      const processedFile = await processFile(file);\n      if (processedFile) {\n        newFiles.push(processedFile);\n      }\n    }\n\n    if (newFiles.length > 0) {\n      onChange([...files, ...newFiles]);\n    }\n\n    // Clear file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (disabled) return;\n\n    const droppedFiles = e.dataTransfer.files;\n    handleFileSelect(droppedFiles);\n  }, [disabled, files.length]);\n\n  const removeFile = (fileId: string) => {\n    const fileToRemove = files.find(file => file.id === fileId);\n    if (fileToRemove) {\n      // Revoke object URL to free memory\n      URL.revokeObjectURL(fileToRemove.url);\n    }\n    onChange(files.filter(file => file.id !== fileId));\n  };\n\n  const moveFile = (fromIndex: number, toIndex: number) => {\n    if (!allowReorder) return;\n\n    const newFiles = [...files];\n    const [movedFile] = newFiles.splice(fromIndex, 1);\n    newFiles.splice(toIndex, 0, movedFile);\n\n    // Update order property\n    newFiles.forEach((file, index) => {\n      file.order = index;\n    });\n\n    onChange(newFiles);\n  };\n\n  const downloadFile = (file: ServiceDocument) => {\n    const link = document.createElement('a');\n    link.href = file.url;\n    link.download = file.name;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Upload Area */}\n      {files.length < maxFiles && (\n        <div\n          className={cn(\n            'border-2 border-dashed rounded-lg p-6 text-center transition-colors',\n            dragActive\n              ? 'border-blue-400 bg-blue-50'\n              : 'border-gray-300 hover:border-gray-400',\n            disabled && 'opacity-50 cursor-not-allowed'\n          )}\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n        >\n          <div className=\"space-y-3\">\n            <div className=\"text-gray-400\">\n              <svg\n                className=\"mx-auto h-12 w-12\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                />\n              </svg>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">\n                拖拽文件到这里，或者\n                <button\n                  type=\"button\"\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                  disabled={disabled}\n                >\n                  点击选择\n                </button>\n              </p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                支持 {acceptedFormats.join(', ')} 格式，最大 {(maxFileSize / 1024 / 1024).toFixed(1)}MB\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={disabled || uploading}\n              loading={uploading}\n            >\n              {uploading ? '上传中...' : '选择文件'}\n            </Button>\n          </div>\n\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept={acceptedFormats.map(format => `.${format}`).join(',')}\n            onChange={(e) => handleFileSelect(e.target.files)}\n            className=\"hidden\"\n            disabled={disabled}\n          />\n        </div>\n      )}\n\n      {/* Error Messages */}\n      {errors.length > 0 && (\n        <div className=\"space-y-2\">\n          {errors.map((error, index) => (\n            <div key={index} className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n              {error}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* File List */}\n      {showPreview && files.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <h4 className=\"text-sm font-medium text-gray-700\">\n              已上传文件 ({files.length}/{maxFiles})\n            </h4>\n          </div>\n\n          <div className=\"space-y-2\">\n            {files\n              .sort((a, b) => a.order - b.order)\n              .map((file, index) => (\n                <div\n                  key={file.id}\n                  className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {/* File Icon */}\n                    <div className=\"text-2xl\">\n                      {getFileTypeIcon(file.name)}\n                    </div>\n\n                    {/* File Info */}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\n                        {file.name}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {formatFileSize(file.size)}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center space-x-2\">\n                    {allowReorder && (\n                      <div className=\"flex items-center space-x-1\">\n                        {index > 0 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => moveFile(index, index - 1)}\n                            className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                            title=\"向上移动\"\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M5 15l7-7 7 7\"\n                              />\n                            </svg>\n                          </button>\n                        )}\n                        {index < files.length - 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => moveFile(index, index + 1)}\n                            className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                            title=\"向下移动\"\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M19 9l-7 7-7-7\"\n                              />\n                            </svg>\n                          </button>\n                        )}\n                      </div>\n                    )}\n\n                    <button\n                      type=\"button\"\n                      onClick={() => downloadFile(file)}\n                      className=\"p-1 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded\"\n                      title=\"下载\"\n                    >\n                      <svg\n                        className=\"w-4 h-4\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"\n                        />\n                      </svg>\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFile(file.id)}\n                      className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                      title=\"删除\"\n                    >\n                      <svg\n                        className=\"w-4 h-4\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n                        />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/ImageUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newErrors' is assigned a value but never used.","line":113,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFileSelect'. Either include it or remove the dependency array.","line":153,"column":6,"nodeType":"ArrayExpression","endLine":153,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, handleFileSelect]","fix":{"range":[4312,4337],"text":"[disabled, handleFileSelect]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useCallback } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceImage } from '@/types/services';\nimport Button from '@/components/ui/Button';\n\nexport interface ImageUploadProps {\n  images: ServiceImage[];\n  onChange: (images: ServiceImage[]) => void;\n  maxImages?: number;\n  maxFileSize?: number; // in bytes\n  acceptedFormats?: string[];\n  requiredDimensions?: {\n    width: number;\n    height: number;\n  };\n  className?: string;\n  disabled?: boolean;\n  showPreview?: boolean;\n  allowReorder?: boolean;\n}\n\nconst ImageUpload: React.FC<ImageUploadProps> = ({\n  images = [],\n  onChange,\n  maxImages = 5,\n  maxFileSize = 5 * 1024 * 1024, // 5MB\n  acceptedFormats = ['jpg', 'jpeg', 'png', 'gif', 'webp'],\n  requiredDimensions,\n  className = '',\n  disabled = false,\n  showPreview = true,\n  allowReorder = true\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const validateFile = (file: File): string[] => {\n    const newErrors: string[] = [];\n\n    // Check file type\n    const extension = file.name.split('.').pop()?.toLowerCase();\n    if (!extension || !acceptedFormats.includes(extension)) {\n      newErrors.push(`不支持的文件格式。请使用: ${acceptedFormats.join(', ')}`);\n    }\n\n    // Check file size\n    if (file.size > maxFileSize) {\n      newErrors.push(`文件大小不能超过 ${(maxFileSize / 1024 / 1024).toFixed(1)}MB`);\n    }\n\n    // Check image dimensions if required\n    if (requiredDimensions) {\n      const img = new Image();\n      img.onload = () => {\n        if (img.width !== requiredDimensions.width || img.height !== requiredDimensions.height) {\n          newErrors.push(`图片尺寸必须为 ${requiredDimensions.width}x${requiredDimensions.height}px`);\n        }\n        setErrors(prev => [...prev, ...newErrors]);\n      };\n      img.src = URL.createObjectURL(file);\n    }\n\n    return newErrors;\n  };\n\n  const processFile = async (file: File): Promise<ServiceImage | null> => {\n    const validationErrors = validateFile(file);\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n      return null;\n    }\n\n    try {\n      setUploading(true);\n\n      // Create image element to get dimensions\n      const dimensions = await new Promise<{ width: number; height: number }>((resolve) => {\n        const img = new Image();\n        img.onload = () => {\n          resolve({ width: img.width, height: img.height });\n          URL.revokeObjectURL(img.src);\n        };\n        img.src = URL.createObjectURL(file);\n      });\n\n      // In a real application, you would upload to a server here\n      // For now, we'll create a local URL\n      const url = URL.createObjectURL(file);\n\n      const newImage: ServiceImage = {\n        id: `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        url,\n        alt: file.name,\n        order: images.length,\n        size: file.size,\n        dimensions\n      };\n\n      return newImage;\n    } catch (error) {\n      setErrors(['图片处理失败，请重试']);\n      return null;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleFileSelect = async (files: FileList | null) => {\n    if (!files || disabled) return;\n\n    const newErrors: string[] = [];\n    const newImages: ServiceImage[] = [];\n\n    for (let i = 0; i < Math.min(files.length, maxImages - images.length); i++) {\n      const file = files[i];\n      const processedImage = await processFile(file);\n      if (processedImage) {\n        newImages.push(processedImage);\n      }\n    }\n\n    if (newImages.length > 0) {\n      onChange([...images, ...newImages]);\n    }\n\n    // Clear file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (disabled) return;\n\n    const files = e.dataTransfer.files;\n    handleFileSelect(files);\n  }, [disabled, images.length]);\n\n  const removeImage = (imageId: string) => {\n    const imageToRemove = images.find(img => img.id === imageId);\n    if (imageToRemove) {\n      // Revoke object URL to free memory\n      URL.revokeObjectURL(imageToRemove.url);\n    }\n    onChange(images.filter(img => img.id !== imageId));\n  };\n\n  const moveImage = (fromIndex: number, toIndex: number) => {\n    if (!allowReorder) return;\n\n    const newImages = [...images];\n    const [movedImage] = newImages.splice(fromIndex, 1);\n    newImages.splice(toIndex, 0, movedImage);\n\n    // Update order property\n    newImages.forEach((img, index) => {\n      img.order = index;\n    });\n\n    onChange(newImages);\n  };\n\n  const updateImageAlt = (imageId: string, alt: string) => {\n    onChange(images.map(img =>\n      img.id === imageId ? { ...img, alt } : img\n    ));\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Upload Area */}\n      {images.length < maxImages && (\n        <div\n          className={cn(\n            'border-2 border-dashed rounded-lg p-6 text-center transition-colors',\n            dragActive\n              ? 'border-blue-400 bg-blue-50'\n              : 'border-gray-300 hover:border-gray-400',\n            disabled && 'opacity-50 cursor-not-allowed'\n          )}\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n        >\n          <div className=\"space-y-3\">\n            <div className=\"text-gray-400\">\n              <svg\n                className=\"mx-auto h-12 w-12\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                />\n              </svg>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">\n                拖拽图片到这里，或者\n                <button\n                  type=\"button\"\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                  disabled={disabled}\n                >\n                  点击选择\n                </button>\n              </p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                支持 {acceptedFormats.join(', ')} 格式，最大 {(maxFileSize / 1024 / 1024).toFixed(1)}MB\n                {requiredDimensions && `，推荐尺寸 ${requiredDimensions.width}x${requiredDimensions.height}px`}\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={disabled || uploading}\n              loading={uploading}\n            >\n              {uploading ? '上传中...' : '选择图片'}\n            </Button>\n          </div>\n\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept={acceptedFormats.map(format => `.${format}`).join(',')}\n            onChange={(e) => handleFileSelect(e.target.files)}\n            className=\"hidden\"\n            disabled={disabled}\n          />\n        </div>\n      )}\n\n      {/* Error Messages */}\n      {errors.length > 0 && (\n        <div className=\"space-y-2\">\n          {errors.map((error, index) => (\n            <div key={index} className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n              {error}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Image Preview */}\n      {showPreview && images.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <h4 className=\"text-sm font-medium text-gray-700\">\n              已上传图片 ({images.length}/{maxImages})\n            </h4>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {images\n              .sort((a, b) => a.order - b.order)\n              .map((image, index) => (\n                <div\n                  key={image.id}\n                  className=\"relative group border border-gray-200 rounded-lg overflow-hidden\"\n                >\n                  <div className=\"aspect-square relative\">\n                    <img\n                      src={image.url}\n                      alt={image.alt}\n                      className=\"w-full h-full object-cover\"\n                    />\n\n                    {/* Overlay Actions */}\n                    <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-2\">\n                      {allowReorder && index > 0 && (\n                        <button\n                          type=\"button\"\n                          onClick={() => moveImage(index, index - 1)}\n                          className=\"p-1 bg-white rounded hover:bg-gray-100\"\n                          title=\"向左移动\"\n                        >\n                          ←\n                        </button>\n                      )}\n                      {allowReorder && index < images.length - 1 && (\n                        <button\n                          type=\"button\"\n                          onClick={() => moveImage(index, index + 1)}\n                          className=\"p-1 bg-white rounded hover:bg-gray-100\"\n                          title=\"向右移动\"\n                        >\n                          →\n                        </button>\n                      )}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeImage(image.id)}\n                        className=\"p-1 bg-red-500 text-white rounded hover:bg-red-600\"\n                        title=\"删除\"\n                      >\n                        ×\n                      </button>\n                    </div>\n                  </div>\n\n                  <div className=\"p-2\">\n                    <input\n                      type=\"text\"\n                      value={image.alt}\n                      onChange={(e) => updateImageAlt(image.id, e.target.value)}\n                      placeholder=\"图片描述\"\n                      className=\"w-full text-xs px-2 py-1 border border-gray-200 rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                      disabled={disabled}\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {image.dimensions.width} × {image.dimensions.height}\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageUpload;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/PriceInput.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'formatValue'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [value, isFocused, formatValue]","fix":{"range":[993,1011],"text":"[value, isFocused, formatValue]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { cn } from '@/utils';\n\nexport interface PriceInputProps {\n  value: number;\n  onChange: (value: number) => void;\n  currency?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  showCurrency?: boolean;\n  allowDecimals?: boolean;\n  maxLength?: number;\n}\n\nconst PriceInput: React.FC<PriceInputProps> = ({\n  value,\n  onChange,\n  currency = 'CNY',\n  min = 0,\n  max = 999999,\n  step = 1,\n  placeholder = '0.00',\n  disabled = false,\n  className = '',\n  showCurrency = true,\n  allowDecimals = true,\n  maxLength = 10\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [isFocused, setIsFocused] = useState(false);\n\n  useEffect(() => {\n    if (!isFocused) {\n      // Format the value when not focused\n      if (value || value === 0) {\n        setInputValue(formatValue(value));\n      } else {\n        setInputValue('');\n      }\n    }\n  }, [value, isFocused]);\n\n  const formatValue = (num: number): string => {\n    if (allowDecimals) {\n      return num.toFixed(2);\n    }\n    return num.toString();\n  };\n\n  const parseValue = (str: string): number => {\n    // Remove all non-numeric characters except decimal point\n    const cleanStr = str.replace(/[^0-9.]/g, '');\n\n    // Handle multiple decimal points\n    const parts = cleanStr.split('.');\n    if (parts.length > 2) {\n      parts.splice(2);\n    }\n\n    // Limit decimal places\n    if (parts[1] && parts[1].length > 2) {\n      parts[1] = parts[1].substring(0, 2);\n    }\n\n    const parsed = parseFloat(parts.join('.'));\n    return isNaN(parsed) ? 0 : parsed;\n  };\n\n  const validateValue = (num: number): number => {\n    // Apply min/max constraints\n    if (num < min) return min;\n    if (num > max) return max;\n    return num;\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n\n    // Check max length\n    if (newValue.length > maxLength) return;\n\n    // Allow empty input or valid number format\n    if (newValue === '' || /^[0-9]*\\.?[0-9]*$/.test(newValue)) {\n      setInputValue(newValue);\n\n      // Parse and update value\n      const parsed = parseValue(newValue);\n      const validated = validateValue(parsed);\n      onChange(validated);\n    }\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    // Ensure the value is properly formatted when blurring\n    const parsed = parseValue(inputValue);\n    const validated = validateValue(parsed);\n    onChange(validated);\n    setInputValue(formatValue(validated));\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleIncrement = () => {\n    const newValue = value + step;\n    const validated = validateValue(newValue);\n    onChange(validated);\n  };\n\n  const handleDecrement = () => {\n    const newValue = value - step;\n    const validated = validateValue(newValue);\n    onChange(validated);\n  };\n\n  const getCurrencySymbol = (): string => {\n    switch (currency) {\n      case 'CNY':\n        return '¥';\n      case 'USD':\n        return '$';\n      case 'EUR':\n        return '€';\n      case 'GBP':\n        return '£';\n      default:\n        return currency;\n    }\n  };\n\n  return (\n    <div className={cn('relative', className)}>\n      <div className=\"flex items-center\">\n        {/* Currency Symbol */}\n        {showCurrency && (\n          <div className=\"flex items-center px-3 bg-gray-50 border border-r-0 border-gray-300 rounded-l-md\">\n            <span className=\"text-gray-600 font-medium\">{getCurrencySymbol()}</span>\n          </div>\n        )}\n\n        {/* Input */}\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            'flex-1 px-3 py-2 border border-gray-300 rounded-r-md',\n            'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n            'transition-colors',\n            showCurrency ? 'rounded-l-none' : 'rounded-l-md',\n            disabled && 'bg-gray-100 cursor-not-allowed'\n          )}\n          inputMode=\"decimal\"\n        />\n\n        {/* Increment/Decrement Buttons */}\n        {!disabled && (\n          <div className=\"flex flex-col ml-2\">\n            <button\n              type=\"button\"\n              onClick={handleIncrement}\n              className=\"px-2 py-1 text-gray-500 hover:text-gray-700 hover:bg-gray-100 border border-gray-300 rounded-t-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={value >= max}\n            >\n              <svg\n                className=\"w-3 h-3\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M5 15l7-7 7 7\"\n                />\n              </svg>\n            </button>\n            <button\n              type=\"button\"\n              onClick={handleDecrement}\n              className=\"px-2 py-1 text-gray-500 hover:text-gray-700 hover:bg-gray-100 border border-l border-b border-gray-300 rounded-b-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={value <= min}\n            >\n              <svg\n                className=\"w-3 h-3\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Helper Text */}\n      {allowDecimals && (\n        <div className=\"mt-1 text-xs text-gray-500\">\n          支持小数点后两位\n        </div>\n      )}\n\n      {/* Range Indicator */}\n      {(min > 0 || max < 999999) && (\n        <div className=\"mt-1 text-xs text-gray-500\">\n          范围: {getCurrencySymbol()}{min} - {getCurrencySymbol()}{max}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PriceInput;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/RichTextEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/TagInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/VideoUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":142,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newErrors' is assigned a value but never used.","line":153,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFileSelect'. Either include it or remove the dependency array.","line":193,"column":6,"nodeType":"ArrayExpression","endLine":193,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, handleFileSelect]","fix":{"range":[5366,5391],"text":"[disabled, handleFileSelect]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useCallback } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceVideo } from '@/types/services';\nimport Button from '@/components/ui/Button';\n\nexport interface VideoUploadProps {\n  videos: ServiceVideo[];\n  onChange: (videos: ServiceVideo[]) => void;\n  maxVideos?: number;\n  maxFileSize?: number; // in bytes\n  acceptedFormats?: string[];\n  className?: string;\n  disabled?: boolean;\n  showPreview?: boolean;\n  autoGenerateThumbnail?: boolean;\n}\n\nconst VideoUpload: React.FC<VideoUploadProps> = ({\n  videos = [],\n  onChange,\n  maxVideos = 3,\n  maxFileSize = 100 * 1024 * 1024, // 100MB\n  acceptedFormats = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'],\n  className = '',\n  disabled = false,\n  showPreview = true,\n  autoGenerateThumbnail = true\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const validateFile = (file: File): string[] => {\n    const newErrors: string[] = [];\n\n    // Check file type\n    const extension = file.name.split('.').pop()?.toLowerCase();\n    if (!extension || !acceptedFormats.includes(extension)) {\n      newErrors.push(`不支持的视频格式。请使用: ${acceptedFormats.join(', ')}`);\n    }\n\n    // Check file size\n    if (file.size > maxFileSize) {\n      newErrors.push(`文件大小不能超过 ${(maxFileSize / 1024 / 1024).toFixed(1)}MB`);\n    }\n\n    return newErrors;\n  };\n\n  const generateThumbnail = (videoFile: File): Promise<string> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d')!;\n\n      video.addEventListener('loadeddata', () => {\n        // Set canvas dimensions to match video\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n\n        // Seek to 1 second or 10% of video duration\n        const seekTime = Math.min(1, video.duration * 0.1);\n        video.currentTime = seekTime;\n      });\n\n      video.addEventListener('seeked', () => {\n        // Draw video frame to canvas\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        // Convert canvas to blob and then to URL\n        canvas.toBlob((blob) => {\n          if (blob) {\n            resolve(URL.createObjectURL(blob));\n          } else {\n            // Fallback: return empty string\n            resolve('');\n          }\n        }, 'image/jpeg', 0.8);\n      });\n\n      video.addEventListener('error', () => {\n        // Fallback: return empty string\n        resolve('');\n      });\n\n      video.src = URL.createObjectURL(videoFile);\n    });\n  };\n\n  const getVideoDuration = (videoFile: File): Promise<number> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n\n      video.addEventListener('loadedmetadata', () => {\n        resolve(video.duration);\n        URL.revokeObjectURL(video.src);\n      });\n\n      video.addEventListener('error', () => {\n        resolve(0);\n      });\n\n      video.src = URL.createObjectURL(videoFile);\n    });\n  };\n\n  const processFile = async (file: File): Promise<ServiceVideo | null> => {\n    const validationErrors = validateFile(file);\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n      return null;\n    }\n\n    try {\n      setUploading(true);\n\n      // Get video duration\n      const duration = await getVideoDuration(file);\n\n      // Generate thumbnail\n      let thumbnail = '';\n      if (autoGenerateThumbnail) {\n        thumbnail = await generateThumbnail(file);\n      }\n\n      // In a real application, you would upload to a server here\n      // For now, we'll create a local URL\n      const url = URL.createObjectURL(file);\n\n      const newVideo: ServiceVideo = {\n        id: `vid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        url,\n        thumbnail,\n        duration,\n        size: file.size,\n        title: file.name,\n        order: videos.length\n      };\n\n      return newVideo;\n    } catch (error) {\n      setErrors(['视频处理失败，请重试']);\n      return null;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleFileSelect = async (files: FileList | null) => {\n    if (!files || disabled) return;\n\n    const newErrors: string[] = [];\n    const newVideos: ServiceVideo[] = [];\n\n    for (let i = 0; i < Math.min(files.length, maxVideos - videos.length); i++) {\n      const file = files[i];\n      const processedVideo = await processFile(file);\n      if (processedVideo) {\n        newVideos.push(processedVideo);\n      }\n    }\n\n    if (newVideos.length > 0) {\n      onChange([...videos, ...newVideos]);\n    }\n\n    // Clear file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (disabled) return;\n\n    const files = e.dataTransfer.files;\n    handleFileSelect(files);\n  }, [disabled, videos.length]);\n\n  const removeVideo = (videoId: string) => {\n    const videoToRemove = videos.find(vid => vid.id === videoId);\n    if (videoToRemove) {\n      // Revoke object URLs to free memory\n      URL.revokeObjectURL(videoToRemove.url);\n      if (videoToRemove.thumbnail) {\n        URL.revokeObjectURL(videoToRemove.thumbnail);\n      }\n    }\n    onChange(videos.filter(vid => vid.id !== videoId));\n  };\n\n  const updateVideoTitle = (videoId: string, title: string) => {\n    onChange(videos.map(vid =>\n      vid.id === videoId ? { ...vid, title } : vid\n    ));\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Upload Area */}\n      {videos.length < maxVideos && (\n        <div\n          className={cn(\n            'border-2 border-dashed rounded-lg p-6 text-center transition-colors',\n            dragActive\n              ? 'border-blue-400 bg-blue-50'\n              : 'border-gray-300 hover:border-gray-400',\n            disabled && 'opacity-50 cursor-not-allowed'\n          )}\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n        >\n          <div className=\"space-y-3\">\n            <div className=\"text-gray-400\">\n              <svg\n                className=\"mx-auto h-12 w-12\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                />\n              </svg>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">\n                拖拽视频到这里，或者\n                <button\n                  type=\"button\"\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                  disabled={disabled}\n                >\n                  点击选择\n                </button>\n              </p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                支持 {acceptedFormats.join(', ')} 格式，最大 {(maxFileSize / 1024 / 1024).toFixed(1)}MB\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={disabled || uploading}\n              loading={uploading}\n            >\n              {uploading ? '上传中...' : '选择视频'}\n            </Button>\n          </div>\n\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept={acceptedFormats.map(format => `.${format}`).join(',')}\n            onChange={(e) => handleFileSelect(e.target.files)}\n            className=\"hidden\"\n            disabled={disabled}\n          />\n        </div>\n      )}\n\n      {/* Error Messages */}\n      {errors.length > 0 && (\n        <div className=\"space-y-2\">\n          {errors.map((error, index) => (\n            <div key={index} className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n              {error}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Video Preview */}\n      {showPreview && videos.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <h4 className=\"text-sm font-medium text-gray-700\">\n              已上传视频 ({videos.length}/{maxVideos})\n            </h4>\n          </div>\n\n          <div className=\"space-y-3\">\n            {videos.map((video) => (\n              <div\n                key={video.id}\n                className=\"border border-gray-200 rounded-lg p-4\"\n              >\n                <div className=\"flex items-start space-x-4\">\n                  {/* Video Thumbnail */}\n                  <div className=\"flex-shrink-0\">\n                    {video.thumbnail ? (\n                      <img\n                        src={video.thumbnail}\n                        alt={video.title}\n                        className=\"w-32 h-20 object-cover rounded\"\n                      />\n                    ) : (\n                      <div className=\"w-32 h-20 bg-gray-200 rounded flex items-center justify-center\">\n                        <svg\n                          className=\"w-8 h-8 text-gray-400\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                          />\n                        </svg>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Video Info */}\n                  <div className=\"flex-1 space-y-2\">\n                    <input\n                      type=\"text\"\n                      value={video.title}\n                      onChange={(e) => updateVideoTitle(video.id, e.target.value)}\n                      placeholder=\"视频标题\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      disabled={disabled}\n                    />\n\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                      <span>时长: {formatDuration(video.duration)}</span>\n                      <span>大小: {formatFileSize(video.size)}</span>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // Open video in new tab\n                          window.open(video.url, '_blank');\n                        }}\n                      >\n                        预览\n                      </Button>\n\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeVideo(video.id)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        删除\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoUpload;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/AuthLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'backgroundImage' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Outlet, Link, useLocation } from 'react-router-dom';\nimport { cn } from '@/utils';\n\ninterface AuthLayoutProps {\n  children?: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  showBranding?: boolean;\n  backgroundImage?: string;\n  className?: string;\n}\n\nexport const AuthLayout: React.FC<AuthLayoutProps> = ({\n  children,\n  title,\n  subtitle,\n  showBranding = true,\n  backgroundImage,\n  className\n}) => {\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Page titles based on route\n  const getPageInfo = () => {\n    const path = location.pathname;\n    if (path.includes('/login')) {\n      return {\n        title: '欢迎回来',\n        subtitle: '登录您的技能集市账户，开启自由职业之旅'\n      };\n    }\n    if (path.includes('/register')) {\n      return {\n        title: '创建账户',\n        subtitle: '加入技能集市，让您的技能发挥价值'\n      };\n    }\n    if (path.includes('/forgot-password')) {\n      return {\n        title: '重置密码',\n        subtitle: '输入您的邮箱地址，我们将发送重置链接'\n      };\n    }\n    if (path.includes('/reset-password')) {\n      return {\n        title: '设置新密码',\n        subtitle: '请输入您的新密码'\n      };\n    }\n    return {\n      title: title || '技能集市',\n      subtitle: subtitle || '中文技能服务与交易平台'\n    };\n  };\n\n  const pageInfo = getPageInfo();\n\n  // Social login options\n  const socialProviders = [\n    {\n      name: '微信',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path d=\"M8.691 2.188C3.891 2.188 0 5.476 0 9.53c0 2.212 1.17 4.203 3.002 5.55a.59.59 0 0 1 .213.665l-.39 1.48c-.019.07-.048.141-.048.213 0 .163.13.295.29.295a.326.326 0 0 0 .167-.054l1.903-1.114a.864.864 0 0 1 .717-.098 10.16 10.16 0 0 0 2.837.403c.276 0 .543-.027.811-.05-.857-2.578.157-4.972 1.932-6.446 1.703-1.415 3.882-1.98 5.853-1.838-.576-3.583-4.196-6.348-8.596-6.348zM5.785 5.991c.642 0 1.162.529 1.162 1.18a1.17 1.17 0 0 1-1.162 1.178A1.17 1.17 0 0 1 4.623 7.17c0-.651.52-1.18 1.162-1.18zm5.813 0c.642 0 1.162.529 1.162 1.18a1.17 1.17 0 0 1-1.162 1.178 1.17 1.17 0 0 1-1.162-1.178c0-.651.52-1.18 1.162-1.18zm5.34 2.867c-1.797-.052-3.746.512-5.28 1.786-1.72 1.428-2.687 3.72-1.78 6.22.942 2.453 3.666 4.229 6.884 4.229.826 0 1.622-.12 2.361-.336a.722.722 0 0 1 .598.082l1.584.926a.272.272 0 0 0 .14.047c.134 0 .24-.111.24-.247 0-.06-.023-.12-.038-.177l-.327-1.233a.582.582 0 0 1-.023-.156.49.49 0 0 1 .201-.398C23.024 18.48 24 16.82 24 14.98c0-3.21-2.931-5.837-6.656-6.088V8.89c-.135-.01-.27-.027-.407-.03zm-2.53 3.274c.535 0 .969.44.969.982a.976.976 0 0 1-.969.983.976.976 0 0 1-.969-.983c0-.542.434-.982.97-.982zm4.844 0c.535 0 .969.44.969.982a.976.976 0 0 1-.969.983.976.976 0 0 1-.969-.983c0-.542.434-.982.969-.982z\"/>\n        </svg>\n      ),\n      color: 'bg-green-500 hover:bg-green-600',\n      url: '#'\n    },\n    {\n      name: 'QQ',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\n        </svg>\n      ),\n      color: 'bg-blue-500 hover:bg-blue-600',\n      url: '#'\n    },\n    {\n      name: '支付宝',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z\"/>\n        </svg>\n      ),\n      color: 'bg-blue-600 hover:bg-blue-700',\n      url: '#'\n    },\n  ];\n\n  // Features list for the side panel\n  const features = [\n    {\n      icon: '🎯',\n      title: '精准匹配',\n      description: '智能算法为您匹配最适合的技能服务需求'\n    },\n    {\n      icon: '🛡️',\n      title: '安全保障',\n      description: '平台担保交易，保障买卖双方权益'\n    },\n    {\n      icon: '⭐',\n      title: '优质服务',\n      description: '严格的服务提供者筛选，确保服务质量'\n    },\n    {\n      icon: '🚀',\n      title: '快速成长',\n      description: '完善的评价体系，助力技能提升和收入增长'\n    },\n  ];\n\n  // Handle social login\n  const handleSocialLogin = (provider: string) => {\n    setIsLoading(true);\n    // Mock social login process\n    setTimeout(() => {\n      setIsLoading(false);\n      console.log(`Login with ${provider}`);\n    }, 1000);\n  };\n\n  return (\n    <div className={cn(\n      'min-h-screen bg-gray-50 flex flex-col lg:flex-row',\n      className\n    )}>\n      {/* Left/Top Section - Branding & Features */}\n      <div className=\"lg:w-1/2 bg-gradient-to-br from-red-500 to-red-600 text-white relative overflow-hidden\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-0 left-0 w-40 h-40 bg-white rounded-full -translate-x-20 -translate-y-20\"></div>\n          <div className=\"absolute top-20 right-0 w-32 h-32 bg-white rounded-full translate-x-16\"></div>\n          <div className=\"absolute bottom-0 left-1/4 w-48 h-48 bg-white rounded-full translate-y-24\"></div>\n          <div className=\"absolute bottom-20 right-0 w-24 h-24 bg-white rounded-full translate-x-12 translate-y-12\"></div>\n        </div>\n\n        <div className=\"relative z-10 flex flex-col justify-center h-full p-8 lg:p-12\">\n          {showBranding && (\n            <div className=\"mb-12\">\n              <Link to=\"/\" className=\"inline-flex items-center space-x-3 mb-8\">\n                <div className=\"w-12 h-12 bg-white text-red-500 rounded-xl flex items-center justify-center text-2xl font-bold\">\n                  技\n                </div>\n                <span className=\"text-2xl font-bold\">技能集市</span>\n              </Link>\n\n              <h1 className=\"text-4xl lg:text-5xl font-bold mb-6 leading-tight\">\n                {pageInfo.title}\n              </h1>\n              <p className=\"text-lg text-red-100 mb-8 leading-relaxed\">\n                {pageInfo.subtitle}\n              </p>\n            </div>\n          )}\n\n          {/* Features */}\n          <div className=\"space-y-6\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-white/20 backdrop-blur-sm rounded-lg flex items-center justify-center text-2xl\">\n                  {feature.icon}\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-1\">{feature.title}</h3>\n                  <p className=\"text-red-100 text-sm leading-relaxed\">{feature.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Stats */}\n          <div className=\"mt-12 grid grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">50K+</div>\n              <div className=\"text-sm text-red-100\">服务提供者</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">200K+</div>\n              <div className=\"text-sm text-red-100\">完成订单</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">4.8</div>\n              <div className=\"text-sm text-red-100\">平均评分</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right/Bottom Section - Auth Form */}\n      <div className=\"lg:w-1/2 bg-white flex items-center justify-center p-8 lg:p-12\">\n        <div className=\"w-full max-w-md\">\n          {/* Mobile Branding (hidden on desktop) */}\n          {showBranding && (\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center space-x-2 mb-6\">\n                <div className=\"w-10 h-10 bg-red-500 text-white rounded-lg flex items-center justify-center text-xl font-bold\">\n                  技\n                </div>\n                <span className=\"text-2xl font-bold text-gray-900\">技能集市</span>\n              </Link>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">{pageInfo.title}</h1>\n              <p className=\"text-gray-600 text-sm\">{pageInfo.subtitle}</p>\n            </div>\n          )}\n\n          {/* Auth Form Container */}\n          <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100\">\n            {/* Form Header */}\n            {!showBranding && (\n              <div className=\"px-8 pt-8 pb-6 text-center border-b border-gray-100\">\n                <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">{pageInfo.title}</h1>\n                <p className=\"text-gray-600 text-sm\">{pageInfo.subtitle}</p>\n              </div>\n            )}\n\n            {/* Form Content */}\n            <div className={cn(\n              'px-8 py-6',\n              showBranding && 'px-8 pt-0'\n            )}>\n              {children || <Outlet />}\n\n              {/* Social Login Divider */}\n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-4 bg-white text-gray-500\">或使用以下方式登录</span>\n                </div>\n              </div>\n\n              {/* Social Login Buttons */}\n              <div className=\"grid grid-cols-3 gap-3\">\n                {socialProviders.map((provider) => (\n                  <button\n                    key={provider.name}\n                    onClick={() => handleSocialLogin(provider.name)}\n                    disabled={isLoading}\n                    className={cn(\n                      'flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg text-white font-medium transition-all duration-200 transform hover:scale-105',\n                      provider.color,\n                      isLoading && 'opacity-50 cursor-not-allowed'\n                    )}\n                  >\n                    {provider.icon}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Footer Links */}\n          <div className=\"mt-8 text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-600\">\n              <Link to=\"/terms\" className=\"hover:text-red-500 transition-colors\">\n                服务条款\n              </Link>\n              <span>·</span>\n              <Link to=\"/privacy\" className=\"hover:text-red-500 transition-colors\">\n                隐私政策\n              </Link>\n              <span>·</span>\n              <Link to=\"/help\" className=\"hover:text-red-500 transition-colors\">\n                帮助中心\n              </Link>\n            </div>\n\n            <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n              <span>© 2024 技能集市. 保留所有权利.</span>\n              <Link to=\"/licenses\" className=\"hover:text-gray-700 transition-colors\">\n                开源许可\n              </Link>\n            </div>\n\n            {/* Trust Badges */}\n            <div className=\"flex items-center justify-center space-x-4 pt-4\">\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <svg className=\"w-4 h-4 mr-1 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n                </svg>\n                安全加密\n              </div>\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <svg className=\"w-4 h-4 mr-1 text-blue-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n                官方认证\n              </div>\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <svg className=\"w-4 h-4 mr-1 text-purple-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                </svg>\n                优质服务\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Loading Overlay */}\n      {isLoading && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 flex items-center space-x-3\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-red-500\"></div>\n            <span className=\"text-gray-700\">登录中...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/Footer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":158,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useI18n } from '@/i18n';\nimport { ROUTES } from '@/constants';\nimport { cn } from '@/utils';\nimport Button from '@/components/ui/Button';\n\ninterface FooterProps {\n  className?: string;\n  showNewsletter?: boolean;\n  showAppDownload?: boolean;\n}\n\ninterface FooterSection {\n  title: string;\n  links: {\n    label: string;\n    href: string;\n    external?: boolean;\n    badge?: string;\n  }[];\n}\n\ninterface SocialLink {\n  name: string;\n  href: string;\n  icon: string;\n  color: string;\n}\n\ninterface PaymentMethod {\n  name: string;\n  icon: string;\n}\n\nexport const Footer: React.FC<FooterProps> = ({\n  className,\n  showNewsletter = true,\n  showAppDownload = true\n}) => {\n  const { t } = useI18n();\n  const location = useLocation();\n  const [email, setEmail] = useState('');\n  const [isSubscribing, setIsSubscribing] = useState(false);\n  const [subscribeMessage, setSubscribeMessage] = useState('');\n\n  // Footer sections configuration\n  const footerSections: FooterSection[] = [\n    {\n      title: '服务分类',\n      links: [\n        { label: '技术开发', href: '/category/development' },\n        { label: '设计创意', href: '/category/design' },\n        { label: '写作翻译', href: '/category/writing' },\n        { label: '视频音频', href: '/category/media' },\n        { label: '营销推广', href: '/category/marketing' },\n        { label: '商业咨询', href: '/category/consulting' },\n        { label: '生活方式', href: '/category/lifestyle' },\n        { label: '教育培训', href: '/category/education', badge: '热门' },\n      ],\n    },\n    {\n      title: '关于我们',\n      links: [\n        { label: '公司介绍', href: '/about' },\n        { label: '工作原理', href: '/how-it-works' },\n        { label: '成为卖家', href: '/become-seller', badge: '赚钱' },\n        { label: '定价方案', href: '/pricing' },\n        { label: '成功案例', href: '/success-stories' },\n        { label: '媒体报道', href: '/press' },\n        { label: '加入我们', href: '/careers', badge: '招聘' },\n        { label: '合作伙伴', href: '/partners' },\n      ],\n    },\n    {\n      title: '帮助支持',\n      links: [\n        { label: '帮助中心', href: '/help' },\n        { label: '常见问题', href: '/faq' },\n        { label: '联系客服', href: '/contact' },\n        { label: '社区论坛', href: '/community' },\n        { label: '服务保障', href: '/protection' },\n        { label: '纠纷处理', href: '/disputes' },\n        { label: '安全中心', href: '/security' },\n        { label: '意见反馈', href: '/feedback' },\n      ],\n    },\n    {\n      title: '政策条款',\n      links: [\n        { label: '用户协议', href: '/terms' },\n        { label: '隐私政策', href: '/privacy' },\n        { label: 'Cookie政策', href: '/cookies' },\n        { label: '知识产权政策', href: '/ip-policy' },\n        { label: '社区准则', href: '/community-guidelines' },\n        { label: '退款政策', href: '/refund-policy' },\n        { label: '免责声明', href: '/disclaimer' },\n        { label: '网站地图', href: '/sitemap' },\n      ],\n    },\n  ];\n\n  // Social media links\n  const socialLinks: SocialLink[] = [\n    {\n      name: '微信',\n      href: '#',\n      icon: 'M8.691 2.188C3.891 2.188 0 5.476 0 9.53c0 2.212 1.17 4.203 3.002 5.55a.59.59 0 0 1 .213.665l-.39 1.48c-.019.07-.048.141-.048.213 0 .163.13.295.29.295a.326.326 0 0 0 .167-.054l1.903-1.114a.864.864 0 0 1 .717-.098 10.16 10.16 0 0 0 2.837.403c.276 0 .543-.027.811-.05-.857-2.578.157-4.972 1.932-6.446 1.703-1.415 3.882-1.98 5.853-1.838-.576-3.583-4.196-6.348-8.596-6.348zM5.785 5.991c.642 0 1.162.529 1.162 1.18a1.17 1.17 0 0 1-1.162 1.178A1.17 1.17 0 0 1 4.623 7.17c0-.651.52-1.18 1.162-1.18zm5.813 0c.642 0 1.162.529 1.162 1.18a1.17 1.17 0 0 1-1.162 1.178 1.17 1.17 0 0 1-1.162-1.178c0-.651.52-1.18 1.162-1.18zm5.34 2.867c-1.797-.052-3.746.512-5.28 1.786-1.72 1.428-2.687 3.72-1.78 6.22.942 2.453 3.666 4.229 6.884 4.229.826 0 1.622-.12 2.361-.336a.722.722 0 0 1 .598.082l1.584.926a.272.272 0 0 0 .14.047c.134 0 .24-.111.24-.247 0-.06-.023-.12-.038-.177l-.327-1.233a.582.582 0 0 1-.023-.156.49.49 0 0 1 .201-.398C23.024 18.48 24 16.82 24 14.98c0-3.21-2.931-5.837-6.656-6.088V8.89c-.135-.01-.27-.027-.407-.03zm-2.53 3.274c.535 0 .969.44.969.982a.976.976 0 0 1-.969.983.976.976 0 0 1-.969-.983c0-.542.434-.982.97-.982zm4.844 0c.535 0 .969.44.969.982a.976.976 0 0 1-.969.983.976.976 0 0 1-.969-.983c0-.542.434-.982.969-.982z',\n      color: 'hover:text-green-500',\n    },\n    {\n      name: '微博',\n      href: '#',\n      icon: 'M9.29 16.29c-2.23.4-4.15-.47-4.29-1.95-.14-1.47 1.55-2.97 3.78-3.37 2.23-.4 4.15.47 4.29 1.95.14 1.47-1.55 2.97-3.78 3.37zm1.42-2.53c-.23-.41-.82-.6-1.32-.43-.49.17-.73.64-.5 1.05.23.41.82.6 1.32.43.49-.17.73-.64.5-1.05zm-1.03-.84c-.09-.15-.32-.22-.51-.16-.2.07-.3.26-.21.41.09.15.32.22.51.16.2-.07.3-.26.21-.41zm3.44 2.14c-.78-.14-1.45-.57-1.73-1.15-.38-.78.03-1.66.9-1.96.88-.3 1.9.13 2.28.91.38.78-.03 1.66-.9 1.96-.17.06-.35.09-.53.1h-.02zm.69-1.34c-.07-.13-.25-.19-.4-.14-.16.05-.23.2-.16.33.07.13.25.19.4.14.16-.05.23-.2.16-.33z',\n      color: 'hover:text-red-500',\n    },\n    {\n      name: 'QQ',\n      href: '#',\n      icon: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z',\n      color: 'hover:text-blue-500',\n    },\n    {\n      name: '抖音',\n      href: '#',\n      icon: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z',\n      color: 'hover:text-black',\n    },\n    {\n      name: 'B站',\n      href: '#',\n      icon: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z',\n      color: 'hover:text-pink-500',\n    },\n  ];\n\n  // Payment methods\n  const paymentMethods: PaymentMethod[] = [\n    { name: '支付宝', icon: '💰' },\n    { name: '微信支付', icon: '💚' },\n    { name: '银联', icon: '💳' },\n    { name: 'PayPal', icon: '🅿️' },\n    { name: '信用卡', icon: '💳' },\n  ];\n\n  const handleNewsletterSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email.trim()) return;\n\n    setIsSubscribing(true);\n    setSubscribeMessage('');\n\n    try {\n      // Mock API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setSubscribeMessage('订阅成功！感谢您的关注。');\n      setEmail('');\n    } catch (error) {\n      setSubscribeMessage('订阅失败，请稍后重试。');\n    } finally {\n      setIsSubscribing(false);\n    }\n  };\n\n  return (\n    <footer className={cn('bg-gray-50 border-t border-gray-200', className)}>\n      {/* Newsletter Section */}\n      {showNewsletter && (\n        <div className=\"bg-gradient-to-r from-red-500 to-red-600 text-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\">\n                🎉 订阅我们的新闻通讯\n              </h3>\n              <p className=\"text-red-100 mb-8 max-w-2xl mx-auto\">\n                获取最新的技能服务趋势、独家优惠和平台动态，助力您的自由职业之旅\n              </p>\n              <form onSubmit={handleNewsletterSubmit} className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"请输入您的邮箱地址\"\n                  className=\"flex-1 px-4 py-3 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50\"\n                  required\n                />\n                <Button\n                  type=\"submit\"\n                  variant=\"secondary\"\n                  size=\"md\"\n                  disabled={isSubscribing}\n                  loading={isSubscribing}\n                  className=\"bg-white text-red-500 hover:bg-gray-100 font-semibold\"\n                >\n                  {isSubscribing ? '订阅中...' : '立即订阅'}\n                </Button>\n              </form>\n              {subscribeMessage && (\n                <p className={cn(\n                  'mt-4 text-sm',\n                  subscribeMessage.includes('成功') ? 'text-green-100' : 'text-red-100'\n                )}>\n                  {subscribeMessage}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile App Download Section */}\n      {showAppDownload && (\n        <div className=\"bg-white border-b border-gray-200\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"flex flex-col lg:flex-row items-center justify-between gap-8\">\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                  📱 下载移动应用\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  随时随地管理您的服务订单，与客户保持联系\n                </p>\n                <div className=\"flex flex-wrap gap-4\">\n                  <a\n                    href=\"#\"\n                    className=\"inline-flex items-center px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\"\n                  >\n                    <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                    </svg>\n                    <div className=\"text-left\">\n                      <div className=\"text-xs\">Download on the</div>\n                      <div className=\"text-sm font-semibold\">App Store</div>\n                    </div>\n                  </a>\n                  <a\n                    href=\"#\"\n                    className=\"inline-flex items-center px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\"\n                  >\n                    <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                    </svg>\n                    <div className=\"text-left\">\n                      <div className=\"text-xs\">GET IT ON</div>\n                      <div className=\"text-sm font-semibold\">Google Play</div>\n                    </div>\n                  </a>\n                </div>\n              </div>\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center text-gray-500\">\n                  <span className=\"text-4xl\">📱</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Footer Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-8\">\n          {/* Company Info - 4 columns */}\n          <div className=\"lg:col-span-4\">\n            <Link to={ROUTES.HOME} className=\"inline-flex items-center space-x-2 mb-6\">\n              <div className=\"w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center text-white font-bold text-xl\">\n                技\n              </div>\n              <span className=\"text-xl font-bold text-gray-900\">技能集市</span>\n            </Link>\n\n            <p className=\"text-gray-600 mb-6 leading-relaxed\">\n              中国领先的技能服务与交易平台，连接优秀的服务提供者和需求方，\n              创造价值共赢的生态系统。让每个人的技能都能发挥价值。\n            </p>\n\n            <div className=\"mb-6\">\n              <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">联系我们</h4>\n              <div className=\"space-y-2 text-sm text-gray-600\">\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">📞</span>\n                  <span>400-888-8888</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">✉️</span>\n                  <span>service@jishimarket.com</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">🕐</span>\n                  <span>周一至周日 9:00-21:00</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">📍</span>\n                  <span>北京市朝阳区建国路88号</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">关注我们</h4>\n              <div className=\"flex space-x-3\">\n                {socialLinks.map((social) => (\n                  <a\n                    key={social.name}\n                    href={social.href}\n                    className={cn(\n                      'w-10 h-10 bg-white border border-gray-200 rounded-lg flex items-center justify-center text-gray-400 transition-all duration-200',\n                      social.color,\n                      'hover:shadow-md hover:scale-105'\n                    )}\n                    aria-label={social.name}\n                  >\n                    <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d={social.icon} />\n                    </svg>\n                  </a>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Footer Sections - 8 columns */}\n          {footerSections.map((section, index) => (\n            <div key={section.title} className={cn(\n              'lg:col-span-2',\n              index === 3 && 'lg:col-span-2'\n            )}>\n              <h4 className=\"text-sm font-semibold text-gray-900 mb-4\">\n                {section.title}\n              </h4>\n              <ul className=\"space-y-3\">\n                {section.links.map((link) => (\n                  <li key={link.label}>\n                    {link.external ? (\n                      <a\n                        href={link.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-sm text-gray-600 hover:text-red-500 transition-colors flex items-center gap-2\"\n                      >\n                        {link.label}\n                        {link.badge && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-600\">\n                            {link.badge}\n                          </span>\n                        )}\n                      </a>\n                    ) : (\n                      <Link\n                        to={link.href}\n                        className={cn(\n                          'text-sm text-gray-600 hover:text-red-500 transition-colors flex items-center gap-2',\n                          location.pathname === link.href && 'text-red-500 font-medium'\n                        )}\n                      >\n                        {link.label}\n                        {link.badge && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-600\">\n                            {link.badge}\n                          </span>\n                        )}\n                      </Link>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Payment Methods */}\n        <div className=\"mt-12 pt-8 border-t border-gray-200\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-center gap-6\">\n            <div>\n              <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">支付方式</h4>\n              <div className=\"flex flex-wrap gap-3\">\n                {paymentMethods.map((method) => (\n                  <div\n                    key={method.name}\n                    className=\"w-12 h-8 bg-white border border-gray-200 rounded flex items-center justify-center text-sm hover:border-red-300 transition-colors\"\n                    title={method.name}\n                  >\n                    {method.icon}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n              <span>ICP备案号：京ICP备12345678号</span>\n              <span>京公网安备 11010502012345号</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"mt-8 pt-8 border-t border-gray-200\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"text-sm text-gray-500\">\n              © 2024 技能集市. 保留所有权利.\n              <Link to=\"/licenses\" className=\"ml-2 hover:text-gray-700\">\n                开源许可\n              </Link>\n            </div>\n\n            <div className=\"flex flex-wrap items-center gap-6 text-sm\">\n              <Link to=\"/sitemap\" className=\"text-gray-500 hover:text-gray-700\">\n                网站地图\n              </Link>\n              <Link to=\"/security\" className=\"text-gray-500 hover:text-gray-700\">\n                安全认证\n              </Link>\n              <Link to=\"/business-license\" className=\"text-gray-500 hover:text-gray-700\">\n                营业执照\n              </Link>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-500\">网站版本:</span>\n                <span className=\"text-gray-700 font-medium\">v2.1.0</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onMenuClick' is defined but never used.","line":30,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logout' is assigned a value but never used.","line":31,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useCartStore } from '@/store';\nimport { useI18n } from '@/i18n';\nimport { ROUTES } from '@/constants';\nimport { cn, debounce } from '@/utils';\nimport Button from '@/components/ui/Button';\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n  className?: string;\n}\n\ninterface SearchSuggestion {\n  id: string;\n  title: string;\n  category: string;\n  price?: number;\n}\n\ninterface NavItem {\n  id: string;\n  label: string;\n  path: string;\n  badge?: number;\n  icon?: React.ReactNode;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onMenuClick, className }) => {\n  const { isAuthenticated, logout, getDisplayName, getAvatarUrl } = useAuth();\n  const { getTotalItems } = useCartStore();\n  const { t } = useI18n();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchSuggestions, setSearchSuggestions] = useState<SearchSuggestion[]>([]);\n  const [showSearchSuggestions, setShowSearchSuggestions] = useState(false);\n  const [notificationDropdownOpen, setNotificationDropdownOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const searchRef = useRef<HTMLDivElement>(null);\n  const profileRef = useRef<HTMLDivElement>(null);\n  const notificationRef = useRef<HTMLDivElement>(null);\n\n  // Navigation items\n  const navItems: NavItem[] = [\n    { id: 'home', label: t('navigation.home'), path: ROUTES.HOME },\n    { id: 'services', label: t('navigation.services'), path: ROUTES.SERVICES },\n    { id: 'orders', label: t('navigation.orders'), path: ROUTES.ORDERS },\n    { id: 'messages', label: t('navigation.messages'), path: ROUTES.MESSAGES, badge: 3 },\n    { id: 'becomeSeller', label: t('navigation.becomeSeller'), path: '/become-seller' },\n  ];\n\n  // User menu items\n  const userMenuItems = [\n    { id: 'dashboard', label: t('navigation.dashboard'), path: ROUTES.DASHBOARD, icon: '📊' },\n    { id: 'profile', label: t('navigation.profile'), path: ROUTES.PROFILE, icon: '👤' },\n    { id: 'orders', label: t('orders.myOrders'), path: ROUTES.ORDERS, icon: '📋' },\n    { id: 'messages', label: t('messages.title'), path: ROUTES.MESSAGES, icon: '💬' },\n    { id: 'favorites', label: t('services.addToFavorites'), path: '/favorites', icon: '❤️' },\n    { id: 'settings', label: t('common.settings'), path: ROUTES.SETTINGS, icon: '⚙️' },\n    { id: 'help', label: t('navigation.help'), path: '/help', icon: '❓' },\n  ];\n\n  // Notifications\n  const notifications = [\n    { id: 1, title: '新订单通知', message: '您有一个新的订单', time: '5分钟前', read: false },\n    { id: 2, title: '消息提醒', message: '张三给您发送了消息', time: '1小时前', read: false },\n    { id: 3, title: '系统更新', message: '系统将于今晚进行维护', time: '2小时前', read: true },\n  ];\n\n  const unreadNotifications = notifications.filter(n => !n.read).length;\n\n  // Handle scroll effect\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Handle click outside dropdowns\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSearchSuggestions(false);\n      }\n      if (profileRef.current && !profileRef.current.contains(event.target as Node)) {\n        setProfileDropdownOpen(false);\n      }\n      if (notificationRef.current && !notificationRef.current.contains(event.target as Node)) {\n        setNotificationDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Mock search suggestions\n  const handleSearchChange = debounce((query: string) => {\n    setSearchQuery(query);\n    if (query.length > 0) {\n      // Mock API call for search suggestions\n      const mockSuggestions: SearchSuggestion[] = [\n        { id: '1', title: '网站开发服务', category: '技术开发', price: 500 },\n        { id: '2', title: 'Logo设计', category: '设计创意', price: 200 },\n        { id: '3', title: '文案写作', category: '写作翻译', price: 100 },\n      ].filter(item => item.title.includes(query) || item.category.includes(query));\n      setSearchSuggestions(mockSuggestions);\n      setShowSearchSuggestions(true);\n    } else {\n      setSearchSuggestions([]);\n      setShowSearchSuggestions(false);\n    }\n  }, 300);\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n      setShowSearchSuggestions(false);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: SearchSuggestion) => {\n    setSearchQuery(suggestion.title);\n    navigate(`/search?q=${encodeURIComponent(suggestion.title)}`);\n    setShowSearchSuggestions(false);\n  };\n\n  return (\n    <header className={cn(\n      'sticky top-0 z-50 bg-white border-b border-gray-200 transition-all duration-300',\n      isScrolled ? 'shadow-md' : 'shadow-sm',\n      className\n    )}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Top bar */}\n        <div className=\"hidden lg:block border-b border-gray-100 bg-gray-50/50\">\n          <div className=\"flex justify-between items-center h-8 text-xs text-gray-600\">\n            <div className=\"flex items-center space-x-4\">\n              <span>📞 400-888-8888</span>\n              <span>✉️ service@jishimarket.com</span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link to=\"/help\" className=\"hover:text-gray-900 transition-colors\">\n                帮助中心\n              </Link>\n              <Link to=\"/language\" className=\"hover:text-gray-900 transition-colors\">\n                简体中文\n              </Link>\n              <Link to=\"/currency\" className=\"hover:text-gray-900 transition-colors\">\n                CNY ¥\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {/* Main header */}\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Left side - Logo and navigation */}\n          <div className=\"flex items-center\">\n            {/* Mobile menu button */}\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-red-500 transition-colors\"\n              aria-label=\"打开菜单\"\n            >\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                {mobileMenuOpen ? (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                ) : (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                )}\n              </svg>\n            </button>\n\n            {/* Logo */}\n            <Link to={ROUTES.HOME} className=\"flex-shrink-0 flex items-center ml-4 lg:ml-0 group\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center text-white font-bold text-lg group-hover:bg-red-600 transition-colors\">\n                  技\n                </div>\n                <h1 className=\"text-xl font-bold text-gray-900 group-hover:text-red-500 transition-colors\">\n                  技能集市\n                </h1>\n              </div>\n            </Link>\n\n            {/* Desktop navigation */}\n            <nav className=\"hidden lg:flex lg:ml-8 lg:space-x-1\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.id}\n                  to={item.path}\n                  className={cn(\n                    'relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200',\n                    location.pathname === item.path\n                      ? 'text-red-500 bg-red-50'\n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                  )}\n                >\n                  {item.label}\n                  {item.badge && item.badge > 0 && (\n                    <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-pulse\">\n                      {item.badge > 99 ? '99+' : item.badge}\n                    </span>\n                  )}\n                </Link>\n              ))}\n            </nav>\n          </div>\n\n          {/* Right side - Search, Notifications, Cart, User */}\n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Search */}\n            <div className=\"hidden md:block\" ref={searchRef}>\n              <form onSubmit={handleSearchSubmit} className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder={t('search.searchQuery') || \"搜索服务...\"}\n                  value={searchQuery}\n                  onChange={(e) => handleSearchChange(e.target.value)}\n                  onFocus={() => searchQuery.length > 0 && setShowSearchSuggestions(true)}\n                  className=\"w-64 px-4 py-2 pr-10 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all\"\n                />\n                <button\n                  type=\"submit\"\n                  className=\"absolute right-2 top-2.5 text-gray-400 hover:text-gray-600 transition-colors\"\n                  aria-label=\"搜索\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                  </svg>\n                </button>\n\n                {/* Search suggestions dropdown */}\n                {showSearchSuggestions && searchSuggestions.length > 0 && (\n                  <div className=\"absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\">\n                    {searchSuggestions.map((suggestion) => (\n                      <div\n                        key={suggestion.id}\n                        onClick={() => handleSuggestionClick(suggestion)}\n                        className=\"px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors\"\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <div className=\"font-medium text-gray-900 text-sm\">\n                              {suggestion.title}\n                            </div>\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              {suggestion.category}\n                            </div>\n                          </div>\n                          {suggestion.price && (\n                            <div className=\"text-sm font-semibold text-red-500\">\n                              ¥{suggestion.price}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </form>\n            </div>\n\n            {/* Notifications */}\n            {isAuthenticated && (\n              <div className=\"relative\" ref={notificationRef}>\n                <button\n                  onClick={() => setNotificationDropdownOpen(!notificationDropdownOpen)}\n                  className=\"relative p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded-lg transition-all duration-200\"\n                  aria-label=\"通知\"\n                >\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\n                  </svg>\n                  {unreadNotifications > 0 && (\n                    <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-bounce\">\n                      {unreadNotifications > 99 ? '99+' : unreadNotifications}\n                    </span>\n                  )}\n                </button>\n\n                {/* Notifications dropdown */}\n                {notificationDropdownOpen && (\n                  <div className=\"absolute right-0 mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50\">\n                    <div className=\"px-4 py-3 border-b border-gray-200\">\n                      <h3 className=\"text-sm font-semibold text-gray-900\">通知</h3>\n                    </div>\n                    <div className=\"max-h-96 overflow-y-auto\">\n                      {notifications.map((notification) => (\n                        <div\n                          key={notification.id}\n                          className={cn(\n                            'px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors',\n                            !notification.read && 'bg-blue-50'\n                          )}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <div className={cn(\n                              'w-2 h-2 rounded-full mt-2 flex-shrink-0',\n                              !notification.read ? 'bg-blue-500' : 'bg-gray-300'\n                            )} />\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium text-gray-900\">\n                                {notification.title}\n                              </p>\n                              <p className=\"text-sm text-gray-600 mt-1\">\n                                {notification.message}\n                              </p>\n                              <p className=\"text-xs text-gray-500 mt-2\">\n                                {notification.time}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"px-4 py-3 border-t border-gray-200 bg-gray-50\">\n                      <Link\n                        to=\"/notifications\"\n                        className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                        onClick={() => setNotificationDropdownOpen(false)}\n                      >\n                        查看所有通知\n                      </Link>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Cart */}\n            <Link\n              to=\"/cart\"\n              className=\"relative p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded-lg transition-all duration-200\"\n              aria-label=\"购物车\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\n              </svg>\n              {getTotalItems() > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-pulse\">\n                  {getTotalItems() > 99 ? '99+' : getTotalItems()}\n                </span>\n              )}\n            </Link>\n\n            {/* User menu */}\n            {isAuthenticated ? (\n              <div className=\"relative\" ref={profileRef}>\n                <button\n                  onClick={() => setProfileDropdownOpen(!profileDropdownOpen)}\n                  className=\"flex items-center space-x-2 text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-200 hover:bg-gray-50 p-1\"\n                >\n                  <img\n                    className=\"h-8 w-8 rounded-full object-cover border-2 border-gray-200\"\n                    src={getAvatarUrl() || 'https://via.placeholder.com/32x32'}\n                    alt={getDisplayName()}\n                  />\n                  <span className=\"hidden md:block text-gray-700 font-medium\">\n                    {getDisplayName()}\n                  </span>\n                  <svg className=\"w-4 h-4 text-gray-400 transition-transform duration-200\"\n                       style={{ transform: profileDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)' }}\n                       fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n\n                {/* Dropdown menu */}\n                {profileDropdownOpen && (\n                  <div className=\"absolute right-0 mt-2 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-50\">\n                    <div className=\"px-4 py-3 border-b border-gray-200\">\n                      <p className=\"text-sm font-medium text-gray-900\">{getDisplayName()}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">查看个人资料</p>\n                    </div>\n                    <div className=\"py-2\">\n                      {userMenuItems.map((item) => (\n                        <Link\n                          key={item.id}\n                          to={item.path}\n                          className=\"flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors\"\n                          onClick={() => setProfileDropdownOpen(false)}\n                        >\n                          <span className=\"text-lg\">{item.icon}</span>\n                          <span>{item.label}</span>\n                        </Link>\n                      ))}\n                    </div>\n                    <div className=\"border-t border-gray-200 py-2\">\n                      <button\n                        onClick={handleLogout}\n                        className=\"flex items-center space-x-3 w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors\"\n                      >\n                        <span className=\"text-lg\">🚪</span>\n                        <span>{t('auth.logout')}</span>\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2 sm:space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => navigate(ROUTES.LOGIN)}\n                >\n                  {t('auth.login')}\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  onClick={() => navigate(ROUTES.REGISTER)}\n                >\n                  {t('auth.register')}\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {mobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200 bg-white\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.id}\n                  to={item.path}\n                  className={cn(\n                    'block px-3 py-2 rounded-md text-base font-medium transition-colors',\n                    location.pathname === item.path\n                      ? 'text-red-500 bg-red-50'\n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                  )}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span>{item.label}</span>\n                    {item.badge && item.badge > 0 && (\n                      <span className=\"bg-red-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center\">\n                        {item.badge > 99 ? '99+' : item.badge}\n                      </span>\n                    )}\n                  </div>\n                </Link>\n              ))}\n            </div>\n\n            {/* Mobile search */}\n            <div className=\"px-4 py-3 border-t border-gray-200\">\n              <form onSubmit={handleSearchSubmit} className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder={t('search.searchQuery') || \"搜索服务...\"}\n                  value={searchQuery}\n                  onChange={(e) => handleSearchChange(e.target.value)}\n                  className=\"w-full px-4 py-2 pr-10 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n                />\n                <button\n                  type=\"submit\"\n                  className=\"absolute right-2 top-2.5 text-gray-400 hover:text-gray-600\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                  </svg>\n                </button>\n              </form>\n            </div>\n\n            {/* Mobile user section */}\n            {!isAuthenticated && (\n              <div className=\"px-4 py-3 border-t border-gray-200\">\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => {\n                      navigate(ROUTES.LOGIN);\n                      setMobileMenuOpen(false);\n                    }}\n                  >\n                    {t('auth.login')}\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => {\n                      navigate(ROUTES.REGISTER);\n                      setMobileMenuOpen(false);\n                    }}\n                  >\n                    {t('auth.register')}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </header>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useI18n } from '@/i18n';\nimport { ROUTES } from '@/constants';\nimport { cn } from '@/utils';\nimport Button from '@/components/ui/Button';\n\ninterface SidebarProps {\n  onClose?: () => void;\n  isMobile?: boolean;\n  isCollapsed?: boolean;\n  onToggleCollapse?: () => void;\n}\n\ninterface NavItem {\n  name: string;\n  href: string;\n  icon: React.ReactNode;\n  badge?: number | string;\n  requiresAuth?: boolean;\n  userType?: 'freelancer' | 'client' | 'both';\n  submenu?: NavItem[];\n  external?: boolean;\n}\n\ninterface QuickAction {\n  name: string;\n  href: string;\n  icon: string;\n  color: string;\n  requiresAuth?: boolean;\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({\n  onClose,\n  isMobile = false,\n  isCollapsed = false,\n  onToggleCollapse\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, isAuthenticated } = useAuth();\n  const { t } = useI18n();\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n  const [userStats, setUserStats] = useState({\n    unreadMessages: 0,\n    pendingOrders: 0,\n    totalRevenue: 0,\n    activeServices: 0\n  });\n\n  // Enhanced navigation with better categorization\n  const mainNavigation: NavItem[] = [\n    {\n      name: t('navigation.dashboard') || '控制面板',\n      href: ROUTES.DASHBOARD,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n      ),\n      requiresAuth: true,\n    },\n    {\n      name: '我的服务',\n      href: '/my-services',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n        </svg>\n      ),\n      requiresAuth: true,\n      userType: 'freelancer',\n      badge: userStats.activeServices,\n      submenu: [\n        { name: '发布新服务', href: '/services/create', icon: '➕' },\n        { name: '草稿箱', href: '/my-services/drafts', icon: '📝' },\n        { name: '已暂停', href: '/my-services/paused', icon: '⏸️' },\n        { name: '已拒绝', href: '/my-services/rejected', icon: '❌' },\n      ]\n    },\n    {\n      name: t('orders.title') || '订单管理',\n      href: ROUTES.ORDERS,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n        </svg>\n      ),\n      requiresAuth: true,\n      badge: userStats.pendingOrders,\n      submenu: [\n        { name: '进行中', href: '/orders/active', icon: '🔄' },\n        { name: '待处理', href: '/orders/pending', icon: '⏳' },\n        { name: '已完成', href: '/orders/completed', icon: '✅' },\n        { name: '已取消', href: '/orders/cancelled', icon: '🚫' },\n      ]\n    },\n    {\n      name: t('messages.title') || '消息',\n      href: ROUTES.MESSAGES,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n      badge: userStats.unreadMessages,\n    },\n    {\n      name: '钱包',\n      href: '/wallet',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n      submenu: [\n        { name: '余额', href: '/wallet/balance', icon: '💰' },\n        { name: '收入记录', href: '/wallet/earnings', icon: '📈' },\n        { name: '提现', href: '/wallet/withdraw', icon: '💸' },\n        { name: '账单明细', href: '/wallet/transactions', icon: '📋' },\n      ]\n    },\n    {\n      name: '收藏夹',\n      href: '/favorites',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n    },\n  ];\n\n  const profileNavigation: NavItem[] = [\n    {\n      name: t('profile.title') || '个人资料',\n      href: ROUTES.PROFILE,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n    },\n    {\n      name: '评价管理',\n      href: '/my-reviews',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n    },\n    {\n      name: '数据分析',\n      href: '/analytics',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n      userType: 'freelancer',\n    },\n    {\n      name: t('common.settings') || '设置',\n      href: ROUTES.SETTINGS,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n        </svg>\n      ),\n      requiresAuth: true,\n    },\n  ];\n\n  const publicNavigation: NavItem[] = [\n    {\n      name: '浏览服务',\n      href: ROUTES.SERVICES,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n        </svg>\n      ),\n    },\n    {\n      name: '服务分类',\n      href: '/categories',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\n        </svg>\n      ),\n    },\n    {\n      name: t('navigation.about') || '关于我们',\n      href: ROUTES.ABOUT,\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n    },\n    {\n      name: t('navigation.help') || '帮助中心',\n      href: '/help',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n    },\n  ];\n\n  // Quick actions for authenticated users\n  const quickActions: QuickAction[] = [\n    {\n      name: '发布服务',\n      href: '/services/create',\n      icon: '➕',\n      color: 'bg-green-500 hover:bg-green-600',\n      requiresAuth: true,\n    },\n    {\n      name: '查找工作',\n      href: '/jobs',\n      icon: '🔍',\n      color: 'bg-blue-500 hover:bg-blue-600',\n      requiresAuth: true,\n    },\n    {\n      name: '在线客服',\n      href: '/support/chat',\n      icon: '💬',\n      color: 'bg-purple-500 hover:bg-purple-600',\n    },\n    {\n      name: '成为卖家',\n      href: '/become-seller',\n      icon: '🚀',\n      color: 'bg-orange-500 hover:bg-orange-600',\n    },\n  ];\n\n  // Filter navigation based on authentication and user type\n  const filterNavigation = (items: NavItem[]) => {\n    return items.filter(item => {\n      if (item.requiresAuth && !isAuthenticated) return false;\n      if (item.userType && item.userType !== 'both' && user?.userType !== item.userType) return false;\n      return true;\n    });\n  };\n\n  const isActive = (href: string) => {\n    return location.pathname === href || location.pathname.startsWith(href + '/');\n  };\n\n  const toggleSubmenu = (itemName: string) => {\n    setExpandedItems(prev =>\n      prev.includes(itemName)\n        ? prev.filter(name => name !== itemName)\n        : [...prev, itemName]\n    );\n  };\n\n  // Mock loading user stats\n  useEffect(() => {\n    if (isAuthenticated) {\n      setUserStats({\n        unreadMessages: 5,\n        pendingOrders: 3,\n        totalRevenue: 12580,\n        activeServices: 12\n      });\n    }\n  }, [isAuthenticated]);\n\n  const handleQuickAction = (action: QuickAction) => {\n    if (action.external) {\n      window.open(action.href, '_blank');\n    } else {\n      navigate(action.href);\n      if (isMobile && onClose) {\n        onClose();\n      }\n    }\n  };\n\n  // Render navigation item with submenu support\n  const renderNavItem = (item: NavItem, level = 0) => {\n    const hasSubmenu = item.submenu && item.submenu.length > 0;\n    const isExpanded = expandedItems.includes(item.name);\n    const isItemActive = isActive(item.href);\n\n    return (\n      <div key={item.name}>\n        <button\n          onClick={() => hasSubmenu ? toggleSubmenu(item.name) : navigate(item.href)}\n          className={cn(\n            'w-full group flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200',\n            level > 0 && 'pl-10',\n            isItemActive\n              ? 'bg-red-50 text-red-700 border-l-4 border-red-500'\n              : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900',\n            isCollapsed && !isMobile && 'justify-center px-2'\n          )}\n        >\n          <div className=\"flex items-center space-x-3\">\n            <span className={cn(\n              'flex-shrink-0',\n              isItemActive && 'text-red-500'\n            )}>\n              {item.icon}\n            </span>\n            {(!isCollapsed || isMobile) && (\n              <span className=\"truncate\">{item.name}</span>\n            )}\n          </div>\n          {(!isCollapsed || isMobile) && (\n            <div className=\"flex items-center space-x-2\">\n              {item.badge && (\n                <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-600\">\n                  {typeof item.badge === 'number' && item.badge > 99 ? '99+' : item.badge}\n                </span>\n              )}\n              {hasSubmenu && (\n                <svg\n                  className={cn(\n                    'w-4 h-4 transition-transform duration-200',\n                    isExpanded && 'rotate-180'\n                  )}\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              )}\n            </div>\n          )}\n        </button>\n\n        {hasSubmenu && isExpanded && (!isCollapsed || isMobile) && (\n          <div className=\"mt-1 space-y-1\">\n            {item.submenu?.map((subItem) => (\n              <button\n                key={subItem.name}\n                onClick={() => navigate(subItem.href)}\n                className={cn(\n                  'w-full group flex items-center px-3 py-2 text-sm rounded-lg transition-all duration-200',\n                  isActive(subItem.href)\n                    ? 'bg-red-50 text-red-700 border-l-4 border-red-500'\n                    : 'text-gray-500 hover:bg-gray-50 hover:text-gray-700',\n                  isCollapsed && !isMobile && 'justify-center px-2'\n                )}\n              >\n                <span className=\"mr-3\">{subItem.icon}</span>\n                {(!isCollapsed || isMobile) && (\n                  <span className=\"truncate\">{subItem.name}</span>\n                )}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn(\n      'flex flex-col bg-white border-r border-gray-200 transition-all duration-300',\n      isCollapsed && !isMobile ? 'w-16' : 'w-64',\n      isMobile && 'fixed inset-y-0 left-0 z-50 w-72 max-w-full',\n      isMobile && onClose && 'transform transition-transform duration-300',\n      isMobile && !onClose && 'translate-x-0'\n    )}>\n      {/* Sidebar Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        {!isCollapsed || isMobile ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center text-white font-bold text-sm\">\n              技\n            </div>\n            <span className=\"text-lg font-bold text-gray-900\">技能集市</span>\n          </div>\n        ) : (\n          <div className=\"w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center text-white font-bold text-sm mx-auto\">\n            技\n          </div>\n        )}\n\n        {/* Close button for mobile or collapse toggle for desktop */}\n        {isMobile ? (\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        ) : !isMobile && onToggleCollapse && (\n          <button\n            onClick={onToggleCollapse}\n            className=\"p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 transition-colors\"\n          >\n            <svg\n              className={cn(\n                'w-5 h-5 transition-transform duration-200',\n                isCollapsed && 'rotate-180'\n              )}\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {/* User Profile Section */}\n      {isAuthenticated && user && (!isCollapsed || isMobile) && (\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <img\n                className=\"h-10 w-10 rounded-full object-cover border-2 border-gray-200\"\n                src={user.profile?.avatar || user.avatar || 'https://via.placeholder.com/40x40'}\n                alt={user.profile?.displayName || `${user.firstName} ${user.lastName}`}\n              />\n              <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border-2 border-white rounded-full\"></div>\n            </div>\n            {(!isCollapsed || isMobile) && (\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-gray-900 truncate\">\n                  {user.profile?.displayName || `${user.firstName} ${user.lastName}`}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {user.userType === 'freelancer' ? '服务提供者' : '客户'}\n                </p>\n                {userStats.totalRevenue > 0 && user.userType === 'freelancer' && (\n                  <p className=\"text-xs text-green-600 font-medium\">\n                    ¥{userStats.totalRevenue.toLocaleString()}\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      {isAuthenticated && (!isCollapsed || isMobile) && (\n        <div className=\"p-4 border-b border-gray-200\">\n          <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3\">\n            快速操作\n          </h3>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {quickActions\n              .filter(action => !action.requiresAuth || isAuthenticated)\n              .slice(0, isCollapsed && !isMobile ? 2 : 4)\n              .map((action) => (\n                <button\n                  key={action.name}\n                  onClick={() => handleQuickAction(action)}\n                  className={cn(\n                    'flex flex-col items-center justify-center p-3 rounded-lg text-white text-xs font-medium transition-all duration-200 transform hover:scale-105',\n                    action.color,\n                    isCollapsed && !isMobile && 'p-2'\n                  )}\n                >\n                  <span className={cn(\n                    'text-lg mb-1',\n                    isCollapsed && !isMobile && 'text-sm mb-0'\n                  )}>\n                    {action.icon}\n                  </span>\n                  {(!isCollapsed || isMobile) && (\n                    <span className=\"text-center leading-tight\">{action.name}</span>\n                  )}\n                </button>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Navigation */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <nav className=\"p-2 space-y-1\">\n          {isAuthenticated ? (\n            <>\n              {/* Main Navigation */}\n              {filterNavigation(mainNavigation).map(item => renderNavItem(item))}\n\n              {/* Profile Section */}\n              {filterNavigation(profileNavigation).length > 0 && (\n                <>\n                  <div className=\"pt-4 mt-4 border-t border-gray-200\">\n                    <h3 className={cn(\n                      'px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3',\n                      isCollapsed && !isMobile && 'hidden'\n                    )}>\n                      个人中心\n                    </h3>\n                    {filterNavigation(profileNavigation).map(item => renderNavItem(item))}\n                  </div>\n                </>\n              )}\n            </>\n          ) : (\n            <>\n              {/* Public Navigation */}\n              <h3 className={cn(\n                'px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3',\n                isCollapsed && !isMobile && 'hidden'\n              )}>\n                浏览\n              </h3>\n              {filterNavigation(publicNavigation).map(item => renderNavItem(item))}\n            </>\n          )}\n\n          {/* Auth Section for non-authenticated users */}\n          {!isAuthenticated && (!isCollapsed || isMobile) && (\n            <div className=\"pt-4 mt-4 border-t border-gray-200 space-y-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full justify-center\"\n                onClick={() => {\n                  navigate('/auth/login');\n                  if (isMobile && onClose) onClose();\n                }}\n              >\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\" />\n                </svg>\n                {t('auth.login')}\n              </Button>\n              <Button\n                variant=\"primary\"\n                size=\"sm\"\n                className=\"w-full justify-center\"\n                onClick={() => {\n                  navigate('/auth/register');\n                  if (isMobile && onClose) onClose();\n                }}\n              >\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z\" />\n                </svg>\n                {t('auth.register')}\n              </Button>\n            </div>\n          )}\n        </nav>\n      </div>\n\n      {/* Sidebar Footer */}\n      {(!isCollapsed || isMobile) && (\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n            <span>v2.1.0</span>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                className=\"hover:text-gray-700 transition-colors\"\n                title=\"检查更新\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              </button>\n              <button\n                className=\"hover:text-gray-700 transition-colors\"\n                title=\"反馈建议\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/PortfolioUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1540,1543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1540,1543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Upload, Image as ImageIcon, Link2, Plus, X, Camera, Video, FileText } from 'lucide-react';\nimport { FreelancerProfile, PortfolioItem } from '../../types';\n\ninterface PortfolioUploadProps {\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}\n\nconst COMMON_TECHNOLOGIES = [\n  'JavaScript', 'TypeScript', 'React', 'Vue.js', 'Angular', 'Node.js',\n  'Python', 'Django', 'Flask', 'Java', 'Spring', 'C#', '.NET',\n  'PHP', 'Laravel', 'Ruby', 'Rails', 'Go', 'Rust', 'Swift',\n  'Kotlin', 'HTML', 'CSS', 'Sass', 'Tailwind CSS', 'Bootstrap',\n  'MySQL', 'PostgreSQL', 'MongoDB', 'Redis', 'Docker', 'Kubernetes',\n  'AWS', 'Azure', 'Google Cloud', 'Git', 'CI/CD', 'Agile',\n  'Figma', 'Sketch', 'Adobe XD', 'Photoshop', 'Illustrator',\n  'After Effects', 'Premiere Pro', 'Final Cut Pro', 'Blender'\n];\n\nexport const PortfolioUpload: React.FC<PortfolioUploadProps> = ({\n  data,\n  onUpdate,\n}) => {\n  const [isAdding, setIsAdding] = useState(false);\n  const [newItem, setNewItem] = useState<Partial<PortfolioItem> & { tempId: string }>({\n    tempId: Date.now().toString(),\n    title: '',\n    description: '',\n    projectUrl: '',\n    technologies: [],\n    images: [] as File[],\n    completedAt: new Date().toISOString().split('T')[0],\n  });\n\n  const [selectedTechnologies, setSelectedTechnologies] = useState<string[]>([]);\n  const [previewImages, setPreviewImages] = useState<string[]>([]);\n\n  const handleInputChange = useCallback((field: string, value: any) => {\n    setNewItem(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleImageSelect = useCallback((files: FileList | null) => {\n    if (!files) return;\n\n    const imageFiles = Array.from(files);\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    const maxSize = 5 * 1024 * 1024; // 5MB per image\n    const maxImages = 10;\n\n    if ((newItem.images?.length || 0) + imageFiles.length > maxImages) {\n      alert(`最多只能上传 ${maxImages} 张图片`);\n      return;\n    }\n\n    const validImages = imageFiles.filter(file => {\n      if (!allowedTypes.includes(file.type)) {\n        alert(`${file.name} 不是支持的图片格式`);\n        return false;\n      }\n\n      if (file.size > maxSize) {\n        alert(`${file.name} 大小超过 5MB`);\n        return false;\n      }\n\n      return true;\n    });\n\n    const newImages = [...(newItem.images || []), ...validImages];\n    handleInputChange('images', newImages);\n\n    // Generate preview URLs\n    const newPreviews = newImages.map(file => URL.createObjectURL(file));\n    setPreviewImages(newPreviews);\n  }, [newItem.images, handleInputChange]);\n\n  const removeImage = useCallback((index: number) => {\n    const newImages = (newItem.images || []).filter((_, i) => i !== index);\n    handleInputChange('images', newImages);\n\n    const newPreviews = previewImages.filter((_, i) => i !== index);\n    setPreviewImages(newPreviews);\n  }, [newItem.images, previewImages, handleInputChange]);\n\n  const toggleTechnology = useCallback((tech: string) => {\n    setSelectedTechnologies(prev => {\n      const newTechs = prev.includes(tech)\n        ? prev.filter(t => t !== tech)\n        : [...prev, tech];\n\n      handleInputChange('technologies', newTechs);\n      return newTechs;\n    });\n  }, [handleInputChange]);\n\n  const addPortfolioItem = useCallback(() => {\n    if (!newItem.title?.trim()) {\n      alert('请输入项目标题');\n      return;\n    }\n\n    if (!newItem.description?.trim()) {\n      alert('请输入项目描述');\n      return;\n    }\n\n    if (!newItem.images || newItem.images.length === 0) {\n      alert('请至少上传一张项目图片');\n      return;\n    }\n\n    if (!newItem.technologies || newItem.technologies.length === 0) {\n      alert('请选择使用的技术');\n      return;\n    }\n\n    const portfolioItem: PortfolioItem = {\n      id: Date.now().toString(),\n      title: newItem.title!,\n      description: newItem.description!,\n      images: previewImages,\n      projectUrl: newItem.projectUrl || undefined,\n      technologies: newItem.technologies!,\n      completedAt: newItem.completedAt || new Date().toISOString(),\n    };\n\n    const existingPortfolio = data.portfolio || [];\n    onUpdate({\n      ...data,\n      portfolio: [...existingPortfolio, portfolioItem]\n    });\n\n    // Reset form\n    setNewItem({\n      tempId: Date.now().toString(),\n      title: '',\n      description: '',\n      projectUrl: '',\n      technologies: [],\n      images: [],\n      completedAt: new Date().toISOString().split('T')[0],\n    });\n    setSelectedTechnologies([]);\n    setPreviewImages([]);\n    setIsAdding(false);\n  }, [newItem, previewImages, data, onUpdate]);\n\n  const removePortfolioItem = useCallback((itemId: string) => {\n    const existingPortfolio = data.portfolio || [];\n    onUpdate({\n      ...data,\n      portfolio: existingPortfolio.filter(item => item.id !== itemId)\n    });\n  }, [data, onUpdate]);\n\n  const currentPortfolio = data.portfolio || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <Video className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">作品集</h2>\n        <p className=\"text-gray-600\">\n          展示您最优秀的项目作品，让客户更好地了解您的专业能力\n        </p>\n      </div>\n\n      {/* Portfolio Stats */}\n      {currentPortfolio.length > 0 && (\n        <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">作品集统计</h3>\n              <p className=\"text-sm text-gray-600\">展示您的专业作品和项目经验</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold text-purple-600\">{currentPortfolio.length}</div>\n              <div className=\"text-sm text-gray-600\">个项目</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Existing Portfolio Items */}\n      {currentPortfolio.length > 0 && (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">已上传的作品</h3>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {currentPortfolio.map(item => (\n              <div key={item.id} className=\"bg-white border rounded-lg overflow-hidden\">\n                {/* Image Preview */}\n                <div className=\"aspect-video bg-gray-100 relative\">\n                  {item.images && item.images.length > 0 ? (\n                    <img\n                      src={item.images[0]}\n                      alt={item.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center\">\n                      <ImageIcon className=\"w-12 h-12 text-gray-400\" />\n                    </div>\n                  )}\n                  {item.images && item.images.length > 1 && (\n                    <div className=\"absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs\">\n                      +{item.images.length - 1}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <h4 className=\"font-semibold text-gray-900 line-clamp-1\">{item.title}</h4>\n                    <button\n                      onClick={() => removePortfolioItem(item.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">{item.description}</p>\n\n                  {item.technologies && item.technologies.length > 0 && (\n                    <div className=\"flex flex-wrap gap-1\">\n                      {item.technologies.slice(0, 3).map(tech => (\n                        <span\n                          key={tech}\n                          className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full\"\n                        >\n                          {tech}\n                        </span>\n                      ))}\n                      {item.technologies.length > 3 && (\n                        <span className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full\">\n                          +{item.technologies.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  )}\n\n                  {item.projectUrl && (\n                    <div className=\"flex items-center text-sm text-blue-600\">\n                      <Link2 className=\"w-3 h-3 mr-1\" />\n                      <span className=\"truncate\">{item.projectUrl}</span>\n                    </div>\n                  )}\n\n                  <div className=\"text-xs text-gray-500\">\n                    完成于 {new Date(item.completedAt).toLocaleDateString('zh-CN')}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add New Portfolio Item Form */}\n      {isAdding && (\n        <div className=\"bg-white border rounded-lg p-6 space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">添加新作品</h3>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              项目标题 *\n            </label>\n            <input\n              type=\"text\"\n              value={newItem.title || ''}\n              onChange={(e) => handleInputChange('title', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"例如：电商网站开发\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              项目描述 *\n            </label>\n            <textarea\n              value={newItem.description || ''}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              rows={4}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"详细描述项目的目标、您的职责、遇到的挑战和解决方案...\"\n            />\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                项目链接\n              </label>\n              <input\n                type=\"url\"\n                value={newItem.projectUrl || ''}\n                onChange={(e) => handleInputChange('projectUrl', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://github.com/...\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                完成时间\n              </label>\n              <input\n                type=\"date\"\n                value={newItem.completedAt || ''}\n                onChange={(e) => handleInputChange('completedAt', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n\n          {/* Technologies Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              使用的技术 *\n            </label>\n            <div className=\"border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto\">\n              <div className=\"flex flex-wrap gap-2\">\n                {COMMON_TECHNOLOGIES.map(tech => (\n                  <button\n                    key={tech}\n                    type=\"button\"\n                    onClick={() => toggleTechnology(tech)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      selectedTechnologies.includes(tech)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    {tech}\n                  </button>\n                ))}\n              </div>\n            </div>\n            {selectedTechnologies.length > 0 && (\n              <div className=\"mt-2 flex flex-wrap gap-1\">\n                {selectedTechnologies.map(tech => (\n                  <span\n                    key={tech}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full\"\n                  >\n                    {tech}\n                  </span>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Image Upload */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              项目图片 *\n            </label>\n            <div className=\"space-y-3\">\n              {previewImages.length > 0 && (\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {previewImages.map((preview, index) => (\n                    <div key={index} className=\"relative group\">\n                      <img\n                        src={preview}\n                        alt={`Preview ${index + 1}`}\n                        className=\"w-full h-20 object-cover rounded-lg\"\n                      />\n                      <button\n                        onClick={() => removeImage(index)}\n                        className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n                <input\n                  type=\"file\"\n                  accept=\"image/jpeg,image/png,image/webp\"\n                  multiple\n                  onChange={(e) => handleImageSelect(e.target.files)}\n                  className=\"hidden\"\n                  id=\"portfolio-images\"\n                />\n                <label\n                  htmlFor=\"portfolio-images\"\n                  className=\"cursor-pointer flex flex-col items-center justify-center py-4\"\n                >\n                  <Camera className=\"w-8 h-8 text-gray-400 mb-2\" />\n                  <span className=\"text-sm text-gray-600\">\n                    点击上传项目图片\n                  </span>\n                  <span className=\"text-xs text-gray-500 mt-1\">\n                    最多 10 张，支持 JPG、PNG、WebP，单张不超过 5MB\n                  </span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              onClick={() => {\n                setIsAdding(false);\n                setNewItem({\n                  tempId: Date.now().toString(),\n                  title: '',\n                  description: '',\n                  projectUrl: '',\n                  technologies: [],\n                  images: [],\n                  completedAt: new Date().toISOString().split('T')[0],\n                });\n                setSelectedTechnologies([]);\n                setPreviewImages([]);\n              }}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              取消\n            </button>\n            <button\n              onClick={addPortfolioItem}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              添加作品\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add Button */}\n      {!isAdding && (\n        <button\n          onClick={() => setIsAdding(true)}\n          className=\"w-full py-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors flex items-center justify-center\"\n        >\n          <Plus className=\"w-5 h-5 mr-2\" />\n          添加作品集项目\n        </button>\n      )}\n\n      {/* Tips */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex\">\n          <FileText className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900 mb-1\">作品集建议</h3>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              <li>• 选择您最优秀和最具代表性的项目</li>\n              <li>• 提供清晰的项目描述和您的具体贡献</li>\n              <li>• 上传高质量的项目截图或照片</li>\n              <li>• 如有可能，提供项目链接或在线演示</li>\n              <li>• 真实地标注使用的技术和工具</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/PricingWizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":2,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DELIVERY_TIME_OPTIONS' is assigned a value but never used.","line":35,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'REVISION_OPTIONS' is assigned a value but never used.","line":43,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'complexityMultipliers'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [complexity, complexityMultipliers, projectDuration]","fix":{"range":[2260,2289],"text":"[complexity, complexityMultipliers, projectDuration]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4360,4363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4360,4363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { DollarSign, Calculator, TrendingUp, Plus, X, Star, Clock, Zap } from 'lucide-react';\nimport { FreelancerProfile, PricingTier } from '../../types';\n\ninterface PricingWizardProps {\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}\n\nconst SERVICE_PACKAGES = [\n  {\n    id: 'basic',\n    name: '基础套餐',\n    description: '适合小型项目',\n    features: ['基础功能', '标准支持', '1次修改'],\n    multiplier: 1,\n  },\n  {\n    id: 'standard',\n    name: '标准套餐',\n    description: '最受欢迎的选择',\n    features: ['全部功能', '优先支持', '3次修改', '源文件'],\n    multiplier: 1.5,\n    isPopular: true,\n  },\n  {\n    id: 'premium',\n    name: '高级套餐',\n    description: '适合大型项目',\n    features: ['全部功能', '24/7支持', '无限修改', '源文件', '商业授权', '快速交付'],\n    multiplier: 2.5,\n  },\n];\n\nconst DELIVERY_TIME_OPTIONS = [\n  { days: 1, label: '1天', priceMultiplier: 2.0 },\n  { days: 3, label: '3天', priceMultiplier: 1.5 },\n  { days: 7, label: '7天', priceMultiplier: 1.0 },\n  { days: 14, label: '14天', priceMultiplier: 0.9 },\n  { days: 30, label: '30天', priceMultiplier: 0.8 },\n];\n\nconst REVISION_OPTIONS = [\n  { count: 0, label: '不允许修改', priceMultiplier: 0.9 },\n  { count: 1, label: '1次修改', priceMultiplier: 1.0 },\n  { count: 3, label: '3次修改', priceMultiplier: 1.2 },\n  { count: 5, label: '5次修改', priceMultiplier: 1.4 },\n  { count: -1, label: '无限修改', priceMultiplier: 1.8 },\n];\n\nexport const PricingWizard: React.FC<PricingWizardProps> = ({\n  data,\n  onUpdate,\n}) => {\n  const [baseHourlyRate, setBaseHourlyRate] = useState(data.hourlyRate || 100);\n  const [projectDuration, setProjectDuration] = useState(8); // hours\n  const [complexity, setComplexity] = useState<'simple' | 'medium' | 'complex'>('medium');\n  const [selectedPackages, setSelectedPackages] = useState<string[]>(['standard']);\n  const [customPackages, setCustomPackages] = useState<Partial<PricingTier>[]>([]);\n\n  const complexityMultipliers = {\n    simple: 0.8,\n    medium: 1.0,\n    complex: 1.5,\n  };\n\n  const calculatePackagePrice = useCallback((baseRate: number, multiplier: number) => {\n    const complexityMultiplier = complexityMultipliers[complexity];\n    return Math.round(baseRate * projectDuration * multiplier * complexityMultiplier);\n  }, [complexity, projectDuration]);\n\n  const generatePricingTiers = useCallback(() => {\n    const tiers: PricingTier[] = [];\n\n    SERVICE_PACKAGES.forEach(pkg => {\n      if (selectedPackages.includes(pkg.id)) {\n        tiers.push({\n          id: pkg.id,\n          name: pkg.name,\n          description: pkg.description,\n          price: calculatePackagePrice(baseHourlyRate, pkg.multiplier),\n          deliveryTime: 7, // Default delivery time\n          revisions: pkg.id === 'basic' ? 1 : pkg.id === 'standard' ? 3 : -1,\n          features: pkg.features,\n          isPopular: pkg.isPopular || false,\n        });\n      }\n    });\n\n    // Add custom packages\n    customPackages.forEach((pkg, index) => {\n      if (pkg.name && pkg.price) {\n        tiers.push({\n          id: `custom-${index}`,\n          name: pkg.name!,\n          description: pkg.description || '',\n          price: pkg.price,\n          deliveryTime: pkg.deliveryTime || 7,\n          revisions: pkg.revisions || 1,\n          features: pkg.features || [],\n          isPopular: false,\n        });\n      }\n    });\n\n    return tiers;\n  }, [baseHourlyRate, calculatePackagePrice, selectedPackages, customPackages]);\n\n  useEffect(() => {\n    const tiers = generatePricingTiers();\n    onUpdate({\n      ...data,\n      hourlyRate: baseHourlyRate,\n      pricingTiers: tiers,\n    });\n  }, [baseHourlyRate, generatePricingTiers, data, onUpdate]);\n\n  const handlePackageToggle = useCallback((packageId: string) => {\n    setSelectedPackages(prev => {\n      if (prev.includes(packageId)) {\n        return prev.filter(id => id !== packageId);\n      } else {\n        return [...prev, packageId];\n      }\n    });\n  }, []);\n\n  const addCustomPackage = useCallback(() => {\n    const newPackage: Partial<PricingTier> = {\n      id: `custom-${Date.now()}`,\n      name: '',\n      description: '',\n      price: 0,\n      deliveryTime: 7,\n      revisions: 1,\n      features: [],\n      isPopular: false,\n    };\n    setCustomPackages(prev => [...prev, newPackage]);\n  }, []);\n\n  const updateCustomPackage = useCallback((index: number, field: keyof PricingTier, value: any) => {\n    setCustomPackages(prev => {\n      const updated = [...prev];\n      updated[index] = { ...updated[index], [field]: value };\n      return updated;\n    });\n  }, []);\n\n  const removeCustomPackage = useCallback((index: number) => {\n    setCustomPackages(prev => prev.filter((_, i) => i !== index));\n  }, []);\n\n  const getPricingSuggestion = useCallback(() => {\n    const skills = data.skills || [];\n    const experience = data.experience || '';\n\n    let suggestion = baseHourlyRate;\n\n    // Adjust based on skill level\n    const advancedSkills = skills.filter(skill =>\n      skill.level === 'advanced' || skill.level === 'expert'\n    ).length;\n\n    if (advancedSkills > 3) suggestion *= 1.3;\n    if (advancedSkills > 6) suggestion *= 1.5;\n\n    // Adjust based on experience\n    if (experience.includes('5年以上')) suggestion *= 1.2;\n    if (experience.includes('10年以上')) suggestion *= 1.5;\n\n    return Math.round(suggestion);\n  }, [baseHourlyRate, data.skills, data.experience]);\n\n  const suggestedRate = getPricingSuggestion();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <DollarSign className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">定价策略</h2>\n        <p className=\"text-gray-600\">\n          设置合理的服务价格，提供不同层次的套餐选择\n        </p>\n      </div>\n\n      {/* Pricing Calculator */}\n      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <Calculator className=\"w-5 h-5 mr-2\" />\n          定价计算器\n        </h3>\n\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              基础小时费率 (¥)\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"1000\"\n                step=\"10\"\n                value={baseHourlyRate}\n                onChange={(e) => setBaseHourlyRate(parseInt(e.target.value))}\n                className=\"flex-1\"\n              />\n              <input\n                type=\"number\"\n                value={baseHourlyRate}\n                onChange={(e) => setBaseHourlyRate(parseInt(e.target.value) || 0)}\n                className=\"w-20 px-2 py-1 border border-gray-300 rounded text-center\"\n                min=\"10\"\n                max=\"1000\"\n              />\n            </div>\n            <div className=\"mt-2 text-xs text-gray-500\">\n              建议费率: ¥{suggestedRate}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              项目时长 (小时)\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                value={projectDuration}\n                onChange={(e) => setProjectDuration(parseInt(e.target.value))}\n                className=\"flex-1\"\n              />\n              <span className=\"w-16 text-center font-medium\">{projectDuration}h</span>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              项目复杂度\n            </label>\n            <div className=\"flex space-x-2\">\n              {(['simple', 'medium', 'complex'] as const).map(level => (\n                <button\n                  key={level}\n                  onClick={() => setComplexity(level)}\n                  className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-colors ${\n                    complexity === level\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  {level === 'simple' ? '简单' : level === 'medium' ? '中等' : '复杂'}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-white rounded-lg\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">预估项目总价:</span>\n            <span className=\"text-xl font-bold text-green-600\">\n              ¥{calculatePackagePrice(baseHourlyRate, 1)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Standard Packages */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">标准套餐</h3>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          {SERVICE_PACKAGES.map(pkg => {\n            const price = calculatePackagePrice(baseHourlyRate, pkg.multiplier);\n            const isSelected = selectedPackages.includes(pkg.id);\n\n            return (\n              <div\n                key={pkg.id}\n                className={`relative border-2 rounded-lg p-4 transition-all cursor-pointer ${\n                  isSelected\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => handlePackageToggle(pkg.id)}\n              >\n                {pkg.isPopular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-blue-600 text-white px-3 py-1 rounded-full text-xs font-medium\">\n                      最受欢迎\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-4\">\n                  <h4 className=\"font-semibold text-gray-900\">{pkg.name}</h4>\n                  <p className=\"text-sm text-gray-600 mt-1\">{pkg.description}</p>\n                  <div className=\"mt-3\">\n                    <span className=\"text-3xl font-bold text-gray-900\">¥{price}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {pkg.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center text-sm\">\n                      <Star className=\"w-4 h-4 text-yellow-500 mr-2 flex-shrink-0\" />\n                      <span>{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"mt-4\">\n                  <div className={`w-full py-2 rounded-lg text-center text-sm font-medium ${\n                    isSelected\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-100 text-gray-700'\n                  }`}>\n                    {isSelected ? '已选择' : '选择套餐'}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Custom Packages */}\n      <div>\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">自定义套餐</h3>\n          <button\n            onClick={addCustomPackage}\n            className=\"px-3 py-1 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 flex items-center\"\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            添加套餐\n          </button>\n        </div>\n\n        <div className=\"space-y-4\">\n          {customPackages.map((pkg, index) => (\n            <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <h4 className=\"font-medium text-gray-900\">自定义套餐 {index + 1}</h4>\n                <button\n                  onClick={() => removeCustomPackage(index)}\n                  className=\"text-red-500 hover:text-red-700\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">套餐名称</label>\n                  <input\n                    type=\"text\"\n                    value={pkg.name || ''}\n                    onChange={(e) => updateCustomPackage(index, 'name', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"套餐名称\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">价格 (¥)</label>\n                  <input\n                    type=\"number\"\n                    value={pkg.price || ''}\n                    onChange={(e) => updateCustomPackage(index, 'price', parseInt(e.target.value) || 0)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"0\"\n                    min=\"0\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">交付时间 (天)</label>\n                  <input\n                    type=\"number\"\n                    value={pkg.deliveryTime || ''}\n                    onChange={(e) => updateCustomPackage(index, 'deliveryTime', parseInt(e.target.value) || 1)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"7\"\n                    min=\"1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">修改次数</label>\n                  <select\n                    value={pkg.revisions || 1}\n                    onChange={(e) => updateCustomPackage(index, 'revisions', parseInt(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value={0}>不允许修改</option>\n                    <option value={1}>1次修改</option>\n                    <option value={3}>3次修改</option>\n                    <option value={5}>5次修改</option>\n                    <option value={-1}>无限修改</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">套餐描述</label>\n                <textarea\n                  value={pkg.description || ''}\n                  onChange={(e) => updateCustomPackage(index, 'description', e.target.value)}\n                  rows={2}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"描述这个套餐的特点和优势\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Pricing Summary */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <TrendingUp className=\"w-5 h-5 mr-2\" />\n          定价总结\n        </h3>\n\n        <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n          <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-gray-900\">¥{baseHourlyRate}</div>\n            <div className=\"text-sm text-gray-600\">小时费率</div>\n          </div>\n\n          <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {generatePricingTiers().length}\n            </div>\n            <div className=\"text-sm text-gray-600\">套餐数量</div>\n          </div>\n\n          <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              ¥{Math.min(...generatePricingTiers().map(t => t.price))} -\n              ¥{Math.max(...generatePricingTiers().map(t => t.price))}\n            </div>\n            <div className=\"text-sm text-gray-600\">价格范围</div>\n          </div>\n        </div>\n\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <Zap className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n            <div>\n              <h4 className=\"text-sm font-semibold text-blue-900 mb-1\">定价建议</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• 根据您的技能水平和经验调整价格</li>\n                <li>• 提供多个价格层次，满足不同客户需求</li>\n                <li>• 定期根据市场反馈调整定价策略</li>\n                <li>• 考虑项目复杂度和交付时间对价格的影响</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/ProfessionalInfoForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":2,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1635,1638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1635,1638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2018,2021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2018,2021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2880,2883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2880,2883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { MapPin, Globe, Clock, User, Building, Briefcase, GraduationCap } from 'lucide-react';\nimport { FreelancerProfile } from '../../types';\n\ninterface ProfessionalInfoFormProps {\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}\n\nconst CHINA_PROVINCES = [\n  '北京', '上海', '天津', '重庆', '河北', '山西', '内蒙古', '辽宁', '吉林', '黑龙江',\n  '江苏', '浙江', '安徽', '福建', '江西', '山东', '河南', '湖北', '湖南', '广东',\n  '广西', '海南', '四川', '贵州', '云南', '西藏', '陕西', '甘肃', '青海', '宁夏', '新疆'\n];\n\nconst CHINA_TIMEZONES = [\n  { value: 'Asia/Shanghai', label: '北京时间 (UTC+8)' },\n  { value: 'Asia/Urumqi', label: '乌鲁木齐时间 (UTC+6)' },\n];\n\nconst LANGUAGES = [\n  { code: 'zh', name: '中文', levels: ['native', 'professional'] },\n  { code: 'en', name: '英语', levels: ['basic', 'conversational', 'professional'] },\n  { code: 'ja', name: '日语', levels: ['basic', 'conversational', 'professional'] },\n  { code: 'ko', name: '韩语', levels: ['basic', 'conversational', 'professional'] },\n  { code: 'fr', name: '法语', levels: ['basic', 'conversational', 'professional'] },\n  { code: 'de', name: '德语', levels: ['basic', 'conversational', 'professional'] },\n  { code: 'es', name: '西班牙语', levels: ['basic', 'conversational', 'professional'] },\n];\n\nconst LANGUAGE_LEVELS = {\n  basic: '基础',\n  conversational: '会话',\n  professional: '专业',\n  native: '母语'\n};\n\nexport const ProfessionalInfoForm: React.FC<ProfessionalInfoFormProps> = ({\n  data,\n  onUpdate,\n}) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleChange = useCallback((field: keyof FreelancerProfile, value: any) => {\n    onUpdate({ ...data, [field]: value });\n    // Clear error when field is updated\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field as string];\n        return newErrors;\n      });\n    }\n  }, [data, onUpdate, errors]);\n\n  const handleLanguageChange = useCallback((index: number, field: string, value: any) => {\n    const languages = [...(data.languages || [])];\n    if (!languages[index]) {\n      languages[index] = { language: '', proficiency: 'basic' as const };\n    }\n    languages[index] = { ...languages[index], [field]: value };\n    handleChange('languages', languages);\n  }, [data.languages, handleChange]);\n\n  const addLanguage = useCallback(() => {\n    const languages = [...(data.languages || [])];\n    languages.push({ language: '', proficiency: 'basic' as const });\n    handleChange('languages', languages);\n  }, [data.languages, handleChange]);\n\n  const removeLanguage = useCallback((index: number) => {\n    const languages = [...(data.languages || [])];\n    languages.splice(index, 1);\n    handleChange('languages', languages);\n  }, [data.languages, handleChange]);\n\n  const handleEducationChange = useCallback((index: number, field: string, value: any) => {\n    const education = [...(data.education || [])];\n    if (!education[index]) {\n      education[index] = {\n        id: Date.now().toString(),\n        institution: '',\n        degree: '',\n        field: '',\n        startDate: '',\n        endDate: '',\n        isCurrent: false,\n      };\n    }\n    education[index] = { ...education[index], [field]: value };\n    handleChange('education', education);\n  }, [data.education, handleChange]);\n\n  const addEducation = useCallback(() => {\n    const education = [...(data.education || [])];\n    education.push({\n      id: Date.now().toString(),\n      institution: '',\n      degree: '',\n      field: '',\n      startDate: '',\n      endDate: '',\n      isCurrent: false,\n    });\n    handleChange('education', education);\n  }, [data.education, handleChange]);\n\n  const removeEducation = useCallback((index: number) => {\n    const education = [...(data.education || [])];\n    education.splice(index, 1);\n    handleChange('education', education);\n  }, [data.education, handleChange]);\n\n  const validateForm = useCallback(() => {\n    const newErrors: Record<string, string> = {};\n\n    if (!data.professionalTitle?.trim()) {\n      newErrors.professionalTitle = '请输入职业头衔';\n    }\n\n    if (!data.bio?.trim()) {\n      newErrors.bio = '请输入个人简介';\n    } else if (data.bio.length < 50) {\n      newErrors.bio = '个人简介至少需要50个字符';\n    } else if (data.bio.length > 1000) {\n      newErrors.bio = '个人简介不能超过1000个字符';\n    }\n\n    if (!data.hourlyRate || data.hourlyRate <= 0) {\n      newErrors.hourlyRate = '请输入有效的小时费率';\n    }\n\n    if (!data.responseTime || data.responseTime <= 0) {\n      newErrors.responseTime = '请输入有效的响应时间';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [data]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <Briefcase className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">专业信息</h2>\n        <p className=\"text-gray-600\">\n          完善您的专业资料，让客户更好地了解您的专业能力\n        </p>\n      </div>\n\n      {/* Company Information for Business Accounts */}\n      {data.accountType === 'company' && (\n        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6 space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Building className=\"w-5 h-5 mr-2\" />\n            企业信息\n          </h3>\n\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                公司名称 *\n              </label>\n              <input\n                type=\"text\"\n                value={data.companyName || ''}\n                onChange={(e) => handleChange('companyName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"请输入公司全称\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                统一社会信用代码\n              </label>\n              <input\n                type=\"text\"\n                value={data.companyRegistrationNumber || ''}\n                onChange={(e) => handleChange('companyRegistrationNumber', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"请输入统一社会信用代码\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Professional Title */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          职业头衔 *\n        </label>\n        <input\n          type=\"text\"\n          value={data.professionalTitle || ''}\n          onChange={(e) => handleChange('professionalTitle', e.target.value)}\n          className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n            errors.professionalTitle ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"例如：高级前端开发工程师、UI/UX设计师\"\n        />\n        {errors.professionalTitle && (\n          <p className=\"mt-1 text-sm text-red-600\">{errors.professionalTitle}</p>\n        )}\n      </div>\n\n      {/* Bio */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          个人简介 *\n        </label>\n        <textarea\n          value={data.bio || ''}\n          onChange={(e) => handleChange('bio', e.target.value)}\n          rows={6}\n          className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n            errors.bio ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"详细描述您的专业背景、工作经验、专业技能和服务优势...\"\n        />\n        <div className=\"flex justify-between mt-1\">\n          <p className=\"text-xs text-gray-500\">\n            {errors.bio || '请输入至少50个字符的个人简介'}\n          </p>\n          <p className=\"text-xs text-gray-500\">\n            {data.bio?.length || 0} / 1000\n          </p>\n        </div>\n      </div>\n\n      {/* Location */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          <MapPin className=\"w-4 h-4 inline mr-1\" />\n          所在地\n        </label>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <select\n            value={data.location?.country || '中国'}\n            onChange={(e) => handleChange('location', { ...data.location, country: e.target.value })}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"中国\">中国</option>\n          </select>\n\n          <select\n            value={data.location?.province || ''}\n            onChange={(e) => handleChange('location', { ...data.location, province: e.target.value })}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"\">选择省份</option>\n            {CHINA_PROVINCES.map(province => (\n              <option key={province} value={province}>{province}</option>\n            ))}\n          </select>\n\n          <input\n            type=\"text\"\n            value={data.location?.city || ''}\n            onChange={(e) => handleChange('location', { ...data.location, city: e.target.value })}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            placeholder=\"城市\"\n          />\n        </div>\n      </div>\n\n      {/* Timezone */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          <Clock className=\"w-4 h-4 inline mr-1\" />\n          时区\n        </label>\n        <select\n          value={data.location?.timezone || 'Asia/Shanghai'}\n          onChange={(e) => handleChange('location', { ...data.location, timezone: e.target.value })}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        >\n          {CHINA_TIMEZONES.map(tz => (\n            <option key={tz.value} value={tz.value}>{tz.label}</option>\n          ))}\n        </select>\n      </div>\n\n      {/* Languages */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          <Globe className=\"w-4 h-4 inline mr-1\" />\n          语言能力\n        </label>\n        <div className=\"space-y-3\">\n          {(data.languages || []).map((lang, index) => (\n            <div key={index} className=\"flex items-center space-x-3\">\n              <select\n                value={lang.language}\n                onChange={(e) => handleLanguageChange(index, 'language', e.target.value)}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"\">选择语言</option>\n                {LANGUAGES.map(language => (\n                  <option key={language.code} value={language.code}>{language.name}</option>\n                ))}\n              </select>\n\n              <select\n                value={lang.proficiency}\n                onChange={(e) => handleLanguageChange(index, 'proficiency', e.target.value)}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {Object.entries(LANGUAGE_LEVELS).map(([value, label]) => (\n                  <option key={value} value={value}>{label}</option>\n                ))}\n              </select>\n\n              <button\n                onClick={() => removeLanguage(index)}\n                className=\"p-2 text-red-500 hover:text-red-700\"\n              >\n                ×\n              </button>\n            </div>\n          ))}\n        </div>\n\n        <button\n          onClick={addLanguage}\n          className=\"mt-2 text-sm text-blue-600 hover:text-blue-700 font-medium\"\n        >\n          + 添加语言\n        </button>\n      </div>\n\n      {/* Education */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          <GraduationCap className=\"w-4 h-4 inline mr-1\" />\n          教育背景\n        </label>\n        <div className=\"space-y-4\">\n          {(data.education || []).map((edu, index) => (\n            <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">学校名称</label>\n                  <input\n                    type=\"text\"\n                    value={edu.institution}\n                    onChange={(e) => handleEducationChange(index, 'institution', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"学校或培训机构\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">专业</label>\n                  <input\n                    type=\"text\"\n                    value={edu.field}\n                    onChange={(e) => handleEducationChange(index, 'field', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"专业领域\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">学位</label>\n                  <input\n                    type=\"text\"\n                    value={edu.degree}\n                    onChange={(e) => handleEducationChange(index, 'degree', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"如：本科、硕士、博士\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">时间</label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"month\"\n                      value={edu.startDate}\n                      onChange={(e) => handleEducationChange(index, 'startDate', e.target.value)}\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    />\n                    <span>至</span>\n                    {edu.isCurrent ? (\n                      <span className=\"px-3 py-2 border border-gray-300 rounded-lg bg-gray-50\">至今</span>\n                    ) : (\n                      <input\n                        type=\"month\"\n                        value={edu.endDate}\n                        onChange={(e) => handleEducationChange(index, 'endDate', e.target.value)}\n                        className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      />\n                    )}\n                  </div>\n                  <label className=\"flex items-center mt-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={edu.isCurrent}\n                      onChange={(e) => handleEducationChange(index, 'isCurrent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">在读</span>\n                  </label>\n                </div>\n              </div>\n\n              <button\n                onClick={() => removeEducation(index)}\n                className=\"mt-3 text-sm text-red-500 hover:text-red-700\"\n              >\n                删除\n              </button>\n            </div>\n          ))}\n        </div>\n\n        <button\n          onClick={addEducation}\n          className=\"mt-3 text-sm text-blue-600 hover:text-blue-700 font-medium\"\n        >\n          + 添加教育经历\n        </button>\n      </div>\n\n      {/* Professional Settings */}\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            小时费率 (¥) *\n          </label>\n          <input\n            type=\"number\"\n            value={data.hourlyRate || ''}\n            onChange={(e) => handleChange('hourlyRate', parseInt(e.target.value))}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.hourlyRate ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"100\"\n            min=\"1\"\n          />\n          {errors.hourlyRate && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.hourlyRate}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            平均响应时间 (小时) *\n          </label>\n          <input\n            type=\"number\"\n            value={data.responseTime || ''}\n            onChange={(e) => handleChange('responseTime', parseInt(e.target.value))}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.responseTime ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"1\"\n            min=\"1\"\n            max=\"24\"\n          />\n          {errors.responseTime && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.responseTime}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          可用状态\n        </label>\n        <select\n          value={data.availabilityStatus || 'available'}\n          onChange={(e) => handleChange('availabilityStatus', e.target.value)}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        >\n          <option value=\"available\">可接单</option>\n          <option value=\"busy\">忙碌中</option>\n          <option value=\"unavailable\">暂停接单</option>\n        </select>\n      </div>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <button\n          onClick={validateForm}\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          保存并继续\n        </button>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/SkillAssessment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showSuggestions' is assigned a value but never used.","line":126,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7554,7557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7554,7557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Star, Plus, X, TrendingUp, Award, Target } from 'lucide-react';\nimport { FreelancerProfile, SkillItem } from '../../types';\n\ninterface SkillAssessmentProps {\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}\n\nconst SKILL_CATEGORIES = [\n  { id: 'development', name: '开发编程', icon: '💻', color: 'blue' },\n  { id: 'design', name: '设计创意', icon: '🎨', color: 'purple' },\n  { id: 'marketing', name: '市场营销', icon: '📈', color: 'green' },\n  { id: 'writing', name: '写作翻译', icon: '✍️', color: 'yellow' },\n  { id: 'video', name: '视频制作', icon: '🎬', color: 'red' },\n  { id: 'audio', name: '音频制作', icon: '🎵', color: 'indigo' },\n  { id: 'business', name: '商业咨询', icon: '💼', color: 'gray' },\n  { id: 'data', name: '数据分析', icon: '📊', color: 'teal' },\n];\n\nconst COMMON_SKILLS = {\n  development: [\n    { name: 'JavaScript', level: 'intermediate', category: 'development' },\n    { name: 'Python', level: 'intermediate', category: 'development' },\n    { name: 'React', level: 'intermediate', category: 'development' },\n    { name: 'Vue.js', level: 'intermediate', category: 'development' },\n    { name: 'Node.js', level: 'intermediate', category: 'development' },\n    { name: 'TypeScript', level: 'intermediate', category: 'development' },\n    { name: 'Java', level: 'intermediate', category: 'development' },\n    { name: 'PHP', level: 'intermediate', category: 'development' },\n    { name: 'C++', level: 'intermediate', category: 'development' },\n    { name: 'Go', level: 'intermediate', category: 'development' },\n    { name: 'Ruby', level: 'intermediate', category: 'development' },\n    { name: 'Swift', level: 'intermediate', category: 'development' },\n    { name: 'Kotlin', level: 'intermediate', category: 'development' },\n    { name: 'Docker', level: 'intermediate', category: 'development' },\n    { name: 'Kubernetes', level: 'intermediate', category: 'development' },\n    { name: 'AWS', level: 'intermediate', category: 'development' },\n    { name: 'Azure', level: 'intermediate', category: 'development' },\n    { name: 'Google Cloud', level: 'intermediate', category: 'development' },\n  ],\n  design: [\n    { name: 'UI设计', level: 'intermediate', category: 'design' },\n    { name: 'UX设计', level: 'intermediate', category: 'design' },\n    { name: '平面设计', level: 'intermediate', category: 'design' },\n    { name: 'Photoshop', level: 'intermediate', category: 'design' },\n    { name: 'Illustrator', level: 'intermediate', category: 'design' },\n    { name: 'Figma', level: 'intermediate', category: 'design' },\n    { name: 'Sketch', level: 'intermediate', category: 'design' },\n    { name: 'Adobe XD', level: 'intermediate', category: 'design' },\n    { name: '3D建模', level: 'intermediate', category: 'design' },\n    { name: '品牌设计', level: 'intermediate', category: 'design' },\n  ],\n  marketing: [\n    { name: 'SEO', level: 'intermediate', category: 'marketing' },\n    { name: 'SEM', level: 'intermediate', category: 'marketing' },\n    { name: '社交媒体营销', level: 'intermediate', category: 'marketing' },\n    { name: '内容营销', level: 'intermediate', category: 'marketing' },\n    { name: '邮件营销', level: 'intermediate', category: 'marketing' },\n    { name: '品牌营销', level: 'intermediate', category: 'marketing' },\n    { name: '增长黑客', level: 'intermediate', category: 'marketing' },\n    { name: '数据分析', level: 'intermediate', category: 'marketing' },\n  ],\n  writing: [\n    { name: '文案写作', level: 'intermediate', category: 'writing' },\n    { name: '技术写作', level: 'intermediate', category: 'writing' },\n    { name: '翻译', level: 'intermediate', category: 'writing' },\n    { name: '内容创作', level: 'intermediate', category: 'writing' },\n    { name: '编辑校对', level: 'intermediate', category: 'writing' },\n    { name: '博客写作', level: 'intermediate', category: 'writing' },\n    { name: '创意写作', level: 'intermediate', category: 'writing' },\n  ],\n  video: [\n    { name: '视频剪辑', level: 'intermediate', category: 'video' },\n    { name: 'After Effects', level: 'intermediate', category: 'video' },\n    { name: 'Premiere Pro', level: 'intermediate', category: 'video' },\n    { name: 'Final Cut Pro', level: 'intermediate', category: 'video' },\n    { name: '动画制作', level: 'intermediate', category: 'video' },\n    { name: '视频脚本', level: 'intermediate', category: 'video' },\n    { name: '视频拍摄', level: 'intermediate', category: 'video' },\n  ],\n  audio: [\n    { name: '音频编辑', level: 'intermediate', category: 'audio' },\n    { name: '播客制作', level: 'intermediate', category: 'audio' },\n    { name: '声音设计', level: 'intermediate', category: 'audio' },\n    { name: '音乐制作', level: 'intermediate', category: 'audio' },\n    { name: '配音', level: 'intermediate', category: 'audio' },\n    { name: '混音', level: 'intermediate', category: 'audio' },\n    { name: '母带处理', level: 'intermediate', category: 'audio' },\n  ],\n  business: [\n    { name: '商业策略', level: 'intermediate', category: 'business' },\n    { name: '市场研究', level: 'intermediate', category: 'business' },\n    { name: '财务咨询', level: 'intermediate', category: 'business' },\n    { name: '技术咨询', level: 'intermediate', category: 'business' },\n    { name: '管理咨询', level: 'intermediate', category: 'business' },\n    { name: '项目管理', level: 'intermediate', category: 'business' },\n    { name: '敏捷开发', level: 'intermediate', category: 'business' },\n    { name: 'Scrum', level: 'intermediate', category: 'business' },\n  ],\n  data: [\n    { name: '数据分析', level: 'intermediate', category: 'data' },\n    { name: 'Excel', level: 'intermediate', category: 'data' },\n    { name: 'SQL', level: 'intermediate', category: 'data' },\n    { name: 'Tableau', level: 'intermediate', category: 'data' },\n    { name: 'Power BI', level: 'intermediate', category: 'data' },\n    { name: 'Python数据分析', level: 'intermediate', category: 'data' },\n    { name: 'R语言', level: 'intermediate', category: 'data' },\n    { name: '机器学习', level: 'intermediate', category: 'data' },\n  ],\n};\n\nconst SKILL_LEVELS = {\n  beginner: { name: '初学者', description: '刚入门，需要指导', color: 'gray' },\n  intermediate: { name: '中级', description: '能独立完成工作', color: 'blue' },\n  advanced: { name: '高级', description: '经验丰富，能处理复杂问题', color: 'purple' },\n  expert: { name: '专家', description: '行业权威，能指导他人', color: 'green' },\n};\n\nexport const SkillAssessment: React.FC<SkillAssessmentProps> = ({\n  data,\n  onUpdate,\n}) => {\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [customSkill, setCustomSkill] = useState('');\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const handleAddSkill = useCallback((skillName: string, category: string, level: string = 'intermediate') => {\n    const newSkill: SkillItem = {\n      id: Date.now().toString(),\n      name: skillName,\n      category,\n      level: level as SkillItem['level'],\n      yearsExperience: 1,\n      isVerified: false,\n    };\n\n    const existingSkills = data.skills || [];\n\n    // Check for duplicates\n    if (existingSkills.some(skill => skill.name.toLowerCase() === skillName.toLowerCase())) {\n      return;\n    }\n\n    onUpdate({\n      ...data,\n      skills: [...existingSkills, newSkill]\n    });\n\n    setCustomSkill('');\n    setShowSuggestions(false);\n  }, [data, onUpdate]);\n\n  const handleRemoveSkill = useCallback((skillId: string) => {\n    const existingSkills = data.skills || [];\n    onUpdate({\n      ...data,\n      skills: existingSkills.filter(skill => skill.id !== skillId)\n    });\n  }, [data, onUpdate]);\n\n  const handleUpdateSkill = useCallback((skillId: string, field: keyof SkillItem, value: any) => {\n    const existingSkills = data.skills || [];\n    onUpdate({\n      ...data,\n      skills: existingSkills.map(skill =>\n        skill.id === skillId ? { ...skill, [field]: value } : skill\n      )\n    });\n  }, [data, onUpdate]);\n\n  const getSkillsByCategory = useCallback((category: string) => {\n    return COMMON_SKILLS[category as keyof typeof COMMON_SKILLS] || [];\n  }, []);\n\n  const calculateSkillScore = useCallback(() => {\n    const skills = data.skills || [];\n    if (skills.length === 0) return 0;\n\n    const levelScores = {\n      beginner: 1,\n      intermediate: 2,\n      advanced: 3,\n      expert: 4,\n    };\n\n    const totalScore = skills.reduce((sum, skill) => {\n      const levelScore = levelScores[skill.level] || 1;\n      const experienceBonus = Math.min(skill.yearsExperience * 0.1, 1);\n      return sum + (levelScore + experienceBonus);\n    }, 0);\n\n    return Math.round((totalScore / skills.length) * 25);\n  }, [data.skills]);\n\n  const currentSkills = data.skills || [];\n  const skillScore = calculateSkillScore();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <Target className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">技能评估</h2>\n        <p className=\"text-gray-600\">\n          选择您擅长的技能，诚实地评估您的熟练程度和经验\n        </p>\n      </div>\n\n      {/* Skill Score */}\n      {currentSkills.length > 0 && (\n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">技能评分</h3>\n              <p className=\"text-sm text-gray-600\">基于您的技能水平和工作经验</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold text-blue-600\">{skillScore}</div>\n              <div className=\"text-sm text-gray-600\">/ 100</div>\n            </div>\n          </div>\n          <div className=\"mt-4 w-full bg-gray-200 rounded-full h-3\">\n            <div\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500\"\n              style={{ width: `${Math.min(skillScore, 100)}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Category Selection */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">选择技能类别</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n          {SKILL_CATEGORIES.map(category => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`p-4 border-2 rounded-lg transition-all text-center ${\n                selectedCategory === category.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n            >\n              <div className=\"text-2xl mb-2\">{category.icon}</div>\n              <div className=\"text-sm font-medium text-gray-900\">{category.name}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Skill Suggestions */}\n      {selectedCategory && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            {SKILL_CATEGORIES.find(cat => cat.id === selectedCategory)?.name} 技能\n          </h3>\n\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={customSkill}\n              onChange={(e) => {\n                setCustomSkill(e.target.value);\n                setShowSuggestions(e.target.value.length > 0);\n              }}\n              onFocus={() => setShowSuggestions(true)}\n              onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"搜索或输入自定义技能...\"\n            />\n          </div>\n\n          {/* Common Skills */}\n          <div className=\"space-y-3\">\n            {getSkillsByCategory(selectedCategory)\n              .filter(skill =>\n                skill.name.toLowerCase().includes(customSkill.toLowerCase()) ||\n                customSkill.length === 0\n              )\n              .slice(0, 8)\n              .map(skill => {\n                const isAdded = currentSkills.some(s => s.name === skill.name);\n                return (\n                  <div key={skill.name} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                        <Award className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-gray-900\">{skill.name}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {SKILL_LEVELS[skill.level as keyof typeof SKILL_LEVELS]?.name}\n                        </div>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => handleAddSkill(skill.name, skill.category, skill.level)}\n                      disabled={isAdded}\n                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                        isAdded\n                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                          : 'bg-blue-600 text-white hover:bg-blue-700'\n                      }`}\n                    >\n                      {isAdded ? '已添加' : '添加'}\n                    </button>\n                  </div>\n                );\n              })}\n\n            {/* Custom Skill */}\n            {customSkill && !getSkillsByCategory(selectedCategory).some(s =>\n              s.name.toLowerCase().includes(customSkill.toLowerCase())\n            ) && (\n              <div className=\"flex items-center justify-between p-3 border border-blue-200 rounded-lg bg-blue-50\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Plus className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">{customSkill}</div>\n                    <div className=\"text-sm text-gray-500\">自定义技能</div>\n                  </div>\n                </div>\n                <button\n                  onClick={() => handleAddSkill(customSkill, selectedCategory)}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700\"\n                >\n                  添加自定义\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Selected Skills */}\n      {currentSkills.length > 0 && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">已选择的技能 ({currentSkills.length})</h3>\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <TrendingUp className=\"w-4 h-4 mr-1\" />\n              技能评分: {skillScore}\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            {currentSkills.map(skill => (\n              <div key={skill.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <h4 className=\"font-medium text-gray-900\">{skill.name}</h4>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium bg-${SKILL_LEVELS[skill.level].color}-100 text-${SKILL_LEVELS[skill.level].color}-700`}>\n                      {SKILL_LEVELS[skill.level].name}\n                    </span>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-xs text-gray-500 mb-1\">熟练度</label>\n                      <select\n                        value={skill.level}\n                        onChange={(e) => handleUpdateSkill(skill.id, 'level', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n                      >\n                        {Object.entries(SKILL_LEVELS).map(([value, level]) => (\n                          <option key={value} value={value}>{level.name} - {level.description}</option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-xs text-gray-500 mb-1\">经验年限</label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"range\"\n                          min=\"0\"\n                          max=\"30\"\n                          value={skill.yearsExperience}\n                          onChange={(e) => handleUpdateSkill(skill.id, 'yearsExperience', parseInt(e.target.value))}\n                          className=\"flex-1\"\n                        />\n                        <span className=\"text-sm font-medium text-gray-700 w-12 text-right\">\n                          {skill.yearsExperience}年\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <button\n                  onClick={() => handleRemoveSkill(skill.id)}\n                  className=\"ml-4 p-2 text-red-500 hover:text-red-700\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Tips */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <div className=\"flex\">\n          <Award className=\"w-5 h-5 text-yellow-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-yellow-900 mb-1\">技能评估建议</h3>\n            <ul className=\"text-sm text-yellow-800 space-y-1\">\n              <li>• 选择您真正擅长并能够提供高质量服务的技能</li>\n              <li>• 诚实地评估您的熟练程度，这有助于建立客户信任</li>\n              <li>• 建议添加5-15个核心技能，突出您的专业优势</li>\n              <li>• 定期更新您的技能水平，反映真实的成长进度</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/StepGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/onboarding/VerificationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/AccountSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RefreshCw' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Progress' is defined but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccountSecuritySettings' is defined but never used.","line":42,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3605,3608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3605,3608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3921,3924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3921,3924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'oldPassword' is defined but never used.","line":134,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newPassword' is defined but never used.","line":134,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'method' is defined but never used.","line":140,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":52},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":170,"column":9,"nodeType":"Literal","messageId":"unexpected","endLine":170,"endColumn":13},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":171,"column":9,"nodeType":"Literal","messageId":"unexpected","endLine":171,"endColumn":14}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Settings,\n  Bell,\n  Globe,\n  Smartphone,\n  Mail,\n  MessageSquare,\n  CreditCard,\n  Shield,\n  User,\n  Trash2,\n  AlertTriangle,\n  Check,\n  X,\n  RefreshCw,\n  Download,\n  Upload,\n  Eye,\n  EyeOff,\n  Key,\n  Clock,\n  Smartphone as PhoneIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from 'sonner';\n\nimport type { ProfileSettings, AccountSecuritySettings, ActiveSession } from '@/types/profile';\n\ninterface AccountSettingsProps {\n  settings: ProfileSettings;\n  onChange: (settings: ProfileSettings) => void;\n  showDangerZone?: boolean;\n}\n\nconst LANGUAGES = [\n  { code: 'zh-CN', name: '简体中文', flag: '🇨🇳' },\n  { code: 'zh-TW', name: '繁體中文', flag: '🇹🇼' },\n  { code: 'en-US', name: 'English', flag: '🇺🇸' },\n  { code: 'ja-JP', name: '日本語', flag: '🇯🇵' },\n  { code: 'ko-KR', name: '한국어', flag: '🇰🇷' }\n];\n\nconst TIMEZONES = [\n  { value: 'Asia/Shanghai', label: '北京时间 (GMT+8)', offset: '+08:00' },\n  { value: 'Asia/Tokyo', label: '东京时间 (GMT+9)', offset: '+09:00' },\n  { value: 'Asia/Seoul', label: '首尔时间 (GMT+9)', offset: '+09:00' },\n  { value: 'America/New_York', label: '纽约时间 (GMT-5)', offset: '-05:00' },\n  { value: 'Europe/London', label: '伦敦时间 (GMT+0)', offset: '+00:00' },\n  { value: 'Europe/Paris', label: '巴黎时间 (GMT+1)', offset: '+01:00' }\n];\n\nconst CURRENCIES = [\n  { code: 'CNY', name: '人民币', symbol: '¥' },\n  { code: 'USD', name: '美元', symbol: '$' },\n  { code: 'EUR', name: '欧元', symbol: '€' },\n  { code: 'JPY', name: '日元', symbol: '¥' },\n  { code: 'KRW', name: '韩元', symbol: '₩' }\n];\n\nconst MOCK_ACTIVE_SESSIONS: ActiveSession[] = [\n  {\n    id: '1',\n    device: 'Chrome on Windows',\n    browser: 'Chrome 120.0',\n    location: '北京, 中国',\n    ipAddress: '192.168.1.100',\n    lastAccess: '2024-01-20T10:30:00Z',\n    isCurrent: true\n  },\n  {\n    id: '2',\n    device: 'Safari on iPhone',\n    browser: 'Safari 17.2',\n    location: '上海, 中国',\n    ipAddress: '192.168.1.101',\n    lastAccess: '2024-01-19T15:45:00Z',\n    isCurrent: false\n  }\n];\n\nexport const AccountSettings: React.FC<AccountSettingsProps> = ({\n  settings,\n  onChange,\n  showDangerZone = true\n}) => {\n  const { t } = useTranslation();\n  const [hasChanges, setHasChanges] = useState(false);\n  const [activeTab, setActiveTab] = useState('notifications');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [showExportDialog, setShowExportDialog] = useState(false);\n  const [showPasswordDialog, setShowPasswordDialog] = useState(false);\n  const [show2FADialog, setShow2FADialog] = useState(false);\n  const [activeSessions, setActiveSessions] = useState<ActiveSession[]>(MOCK_ACTIVE_SESSIONS);\n\n  const handleSettingChange = useCallback((category: string, key: string, value: any) => {\n    const newSettings = {\n      ...settings,\n      [category]: {\n        ...settings[category as keyof ProfileSettings],\n        [key]: value\n      }\n    };\n    onChange(newSettings);\n    setHasChanges(true);\n  }, [settings, onChange]);\n\n  const handleBasicSettingChange = useCallback((key: string, value: any) => {\n    const newSettings = { ...settings, [key]: value };\n    onChange(newSettings);\n    setHasChanges(true);\n  }, [settings, onChange]);\n\n  const handleSaveSettings = useCallback(() => {\n    // TODO: Save settings to API\n    setHasChanges(false);\n    toast.success(t('profile.account.settingsSaved'));\n  }, [t]);\n\n  const handlePasswordChange = useCallback(async (oldPassword: string, newPassword: string) => {\n    // TODO: Implement password change\n    setShowPasswordDialog(false);\n    toast.success(t('profile.account.passwordChanged'));\n  }, [t]);\n\n  const handleEnable2FA = useCallback(async (method: 'sms' | 'email' | 'app') => {\n    // TODO: Implement 2FA enablement\n    setShow2FADialog(false);\n    toast.success(t('profile.account.twoFactorEnabled'));\n  }, [t]);\n\n  const handleTerminateSession = useCallback((sessionId: string) => {\n    setActiveSessions(prev => prev.filter(session => session.id !== sessionId));\n    toast.success(t('profile.account.sessionTerminated'));\n  }, [t]);\n\n  const handleExportData = useCallback(() => {\n    // TODO: Implement data export\n    setShowExportDialog(false);\n    toast.success(t('profile.account.exportStarted'));\n  }, [t]);\n\n  const handleDeleteAccount = useCallback(() => {\n    // TODO: Implement account deletion\n    setShowDeleteDialog(false);\n    toast.success(t('profile.account.deletionRequested'));\n  }, [t]);\n\n  const getNotificationCount = () => {\n    const notifications = settings.notifications;\n    return Object.values(notifications).filter(Boolean).length;\n  };\n\n  const getSecurityLevel = () => {\n    let score = 0;\n    if (true) score++; // Password strength (mock)\n    if (false) score++; // 2FA enabled (mock)\n    if (activeSessions.length <= 2) score++; // Limited sessions\n    if (settings.privacy.profileVisibility !== 'public') score++; // Privacy settings\n\n    if (score >= 3) return { level: 'high', color: 'text-green-600', text: t('profile.account.security.high') };\n    if (score >= 2) return { level: 'medium', color: 'text-yellow-600', text: t('profile.account.security.medium') };\n    return { level: 'low', color: 'text-red-600', text: t('profile.account.security.low') };\n  };\n\n  const security = getSecurityLevel();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              {t('profile.account.title')}\n            </CardTitle>\n\n            <div className=\"flex items-center gap-3\">\n              {/* Security Level Indicator */}\n              <Badge variant=\"outline\" className=\"flex items-center gap-2\">\n                <Shield className={`h-4 w-4 ${security.color}`} />\n                <span className={security.color}>{security.text}</span>\n              </Badge>\n\n              {hasChanges && (\n                <Button onClick={handleSaveSettings}>\n                  <Check className=\"h-4 w-4 mr-2\" />\n                  {t('common.save')}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <p className=\"text-sm text-gray-600\">\n            {t('profile.account.description')}\n          </p>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            {t('profile.account.notifications')}\n            {getNotificationCount() > 0 && (\n              <Badge variant=\"secondary\" className=\"h-5 w-5 p-0 text-xs\">\n                {getNotificationCount()}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"language\" className=\"flex items-center gap-2\">\n            <Globe className=\"h-4 w-4\" />\n            {t('profile.account.language')}\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            {t('profile.account.security')}\n          </TabsTrigger>\n          <TabsTrigger value=\"sessions\" className=\"flex items-center gap-2\">\n            <Smartphone className=\"h-4 w-4\" />\n            {t('profile.account.sessions')}\n          </TabsTrigger>\n          {showDangerZone && (\n            <TabsTrigger value=\"danger\" className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              {t('profile.account.dangerZone')}\n            </TabsTrigger>\n          )}\n        </TabsList>\n\n        {/* Notification Settings */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                {t('profile.account.notifications')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Email Notifications */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.account.emailNotifications')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.account.emailNotifications.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.emailNotifications}\n                    onCheckedChange={(checked) => handleSettingChange('notifications', 'emailNotifications', checked)}\n                  />\n                </div>\n\n                {settings.notifications.emailNotifications && (\n                  <div className=\"ml-4 space-y-3 border-l-2 border-gray-200 pl-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-sm\">{t('profile.account.projectUpdates')}</Label>\n                      <Switch\n                        checked={settings.notifications.projectUpdates}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'projectUpdates', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-sm\">{t('profile.account.messageAlerts')}</Label>\n                      <Switch\n                        checked={settings.notifications.messageAlerts}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'messageAlerts', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-sm\">{t('profile.account.reviewNotifications')}</Label>\n                      <Switch\n                        checked={settings.notifications.reviewNotifications}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'reviewNotifications', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-sm\">{t('profile.account.promotionalEmails')}</Label>\n                      <Switch\n                        checked={settings.notifications.promotionalEmails}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'promotionalEmails', checked)}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Push Notifications */}\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.account.pushNotifications')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.account.pushNotifications.description')}</p>\n                </div>\n                <Switch\n                  checked={settings.notifications.pushNotifications}\n                  onCheckedChange={(checked) => handleSettingChange('notifications', 'pushNotifications', checked)}\n                />\n              </div>\n\n              <Separator />\n\n              {/* SMS Notifications */}\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.account.smsNotifications')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.account.smsNotifications.description')}</p>\n                </div>\n                <Switch\n                  checked={settings.notifications.smsNotifications}\n                  onCheckedChange={(checked) => handleSettingChange('notifications', 'smsNotifications', checked)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Language and Region */}\n        <TabsContent value=\"language\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"h-5 w-5\" />\n                {t('profile.account.languageRegion')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Language */}\n              <div className=\"space-y-2\">\n                <Label>{t('profile.account.language')}</Label>\n                <Select\n                  value={settings.language}\n                  onValueChange={(value) => handleBasicSettingChange('language', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.map(language => (\n                      <SelectItem key={language.code} value={language.code}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{language.flag}</span>\n                          <span>{language.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Timezone */}\n              <div className=\"space-y-2\">\n                <Label>{t('profile.account.timezone')}</Label>\n                <Select\n                  value={settings.timezone}\n                  onValueChange={(value) => handleBasicSettingChange('timezone', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {TIMEZONES.map(timezone => (\n                      <SelectItem key={timezone.value} value={timezone.value}>\n                        <div className=\"flex flex-col\">\n                          <span>{timezone.label}</span>\n                          <span className=\"text-xs text-gray-500\">{timezone.offset}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Currency */}\n              <div className=\"space-y-2\">\n                <Label>{t('profile.account.currency')}</Label>\n                <Select\n                  value={settings.currency}\n                  onValueChange={(value) => handleBasicSettingChange('currency', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CURRENCIES.map(currency => (\n                      <SelectItem key={currency.code} value={currency.code}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{currency.symbol}</span>\n                          <span>{currency.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Alert>\n                <Globe className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t('profile.account.languageNote')}\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Settings */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                {t('profile.account.security')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Password */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.account.password')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.account.password.description')}</p>\n                  </div>\n                  <Dialog open={showPasswordDialog} onOpenChange={setShowPasswordDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\">\n                        <Key className=\"h-4 w-4 mr-2\" />\n                        {t('profile.account.changePassword')}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>{t('profile.account.changePassword')}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"currentPassword\">{t('profile.account.currentPassword')}</Label>\n                          <Input id=\"currentPassword\" type=\"password\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"newPassword\">{t('profile.account.newPassword')}</Label>\n                          <Input id=\"newPassword\" type=\"password\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"confirmPassword\">{t('profile.account.confirmPassword')}</Label>\n                          <Input id=\"confirmPassword\" type=\"password\" />\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowPasswordDialog(false)}>\n                            {t('common.cancel')}\n                          </Button>\n                          <Button onClick={() => handlePasswordChange('old', 'new')}>\n                            {t('profile.account.updatePassword')}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {/* Two-Factor Authentication */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.account.twoFactorAuth')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.account.twoFactorAuth.description')}</p>\n                  </div>\n                  <Dialog open={show2FADialog} onOpenChange={setShow2FADialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\">\n                        <Smartphone className=\"h-4 w-4 mr-2\" />\n                        {t('profile.account.enable2FA')}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>{t('profile.account.enable2FA')}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <p className=\"text-sm text-gray-600\">\n                          {t('profile.account.twoFactorAuth.selectMethod')}\n                        </p>\n                        <div className=\"space-y-2\">\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full justify-start\"\n                            onClick={() => handleEnable2FA('sms')}\n                          >\n                            <PhoneIcon className=\"h-4 w-4 mr-2\" />\n                            {t('profile.account.twoFactorAuth.sms')}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full justify-start\"\n                            onClick={() => handleEnable2FA('email')}\n                          >\n                            <Mail className=\"h-4 w-4 mr-2\" />\n                            {t('profile.account.twoFactorAuth.email')}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full justify-start\"\n                            onClick={() => handleEnable2FA('app')}\n                          >\n                            <Smartphone className=\"h-4 w-4 mr-2\" />\n                            {t('profile.account.twoFactorAuth.app')}\n                          </Button>\n                        </div>\n                        <div className=\"flex justify-end\">\n                          <Button variant=\"outline\" onClick={() => setShow2FADialog(false)}>\n                            {t('common.cancel')}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {/* Login Alerts */}\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.account.loginAlerts')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.account.loginAlerts.description')}</p>\n                </div>\n                <Switch\n                  checked={true} // Mock value\n                  onCheckedChange={() => {}} // Mock handler\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Active Sessions */}\n        <TabsContent value=\"sessions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Smartphone className=\"h-5 w-5\" />\n                {t('profile.account.activeSessions')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {activeSessions.map(session => (\n                <div key={session.id} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Smartphone className=\"h-5 w-5 text-gray-400\" />\n                      <div>\n                        <div className=\"font-medium\">{session.device}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {session.browser} • {session.location}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {t('profile.account.lastAccess')}: {new Date(session.lastAccess).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {session.isCurrent && (\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                          {t('profile.account.currentSession')}\n                        </Badge>\n                      )}\n                      {!session.isCurrent && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleTerminateSession(session.id)}\n                        >\n                          {t('profile.account.terminate')}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              <Alert>\n                <Shield className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t('profile.account.sessionsNote')}\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Danger Zone */}\n        {showDangerZone && (\n          <TabsContent value=\"danger\" className=\"space-y-6\">\n            <Card className=\"border-red-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-red-600\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  {t('profile.account.dangerZone')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Export Data */}\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"font-medium\">{t('profile.account.exportData')}</Label>\n                      <p className=\"text-sm text-gray-600\">{t('profile.account.exportData.description')}</p>\n                    </div>\n                    <Dialog open={showExportDialog} onOpenChange={setShowExportDialog}>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\">\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          {t('profile.account.exportData')}\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>{t('profile.account.exportData')}</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <p className=\"text-sm text-gray-600\">\n                            {t('profile.account.exportData.confirmation')}\n                          </p>\n                          <div className=\"flex justify-end gap-2\">\n                            <Button variant=\"outline\" onClick={() => setShowExportDialog(false)}>\n                              {t('common.cancel')}\n                            </Button>\n                            <Button onClick={handleExportData}>\n                              {t('profile.account.exportData.start')}\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Delete Account */}\n                <div className=\"p-4 border border-red-200 rounded-lg bg-red-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"font-medium text-red-600\">{t('profile.account.deleteAccount')}</Label>\n                      <p className=\"text-sm text-gray-600\">{t('profile.account.deleteAccount.description')}</p>\n                    </div>\n                    <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                      <DialogTrigger asChild>\n                        <Button variant=\"destructive\">\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          {t('profile.account.deleteAccount')}\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle className=\"text-red-600\">\n                            {t('profile.account.deleteAccount.confirmation')}\n                          </DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <Alert variant=\"destructive\">\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            <AlertDescription>\n                              {t('profile.account.deleteAccount.warning')}\n                            </AlertDescription>\n                          </Alert>\n\n                          <div className=\"space-y-2\">\n                            <Label>{t('profile.account.deleteAccount.reason')}</Label>\n                            <Textarea\n                              placeholder={t('profile.account.deleteAccount.reason.placeholder')}\n                              rows={3}\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"flex items-center gap-2\">\n                              <input type=\"checkbox\" />\n                              {t('profile.account.deleteAccount.confirmation.checkbox')}\n                            </Label>\n                          </div>\n\n                          <div className=\"flex justify-end gap-2\">\n                            <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)}>\n                              {t('common.cancel')}\n                            </Button>\n                            <Button variant=\"destructive\" onClick={handleDeleteAccount}>\n                              {t('profile.account.deleteAccount.confirm')}\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/BioEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":25,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFormatting' is assigned a value but never used.","line":60,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsFormatting' is assigned a value but never used.","line":60,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":39},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'validateBio'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [validateBio, value.bio]","fix":{"range":[2188,2199],"text":"[validateBio, value.bio]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FileText,\n  Bold,\n  Italic,\n  Link,\n  List,\n  ListOrdered,\n  Quote,\n  Code,\n  Eye,\n  Edit3,\n  AlertCircle,\n  Check,\n  X\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\n\nimport type { BasicInfo } from '@/types/profile';\n\ninterface BioEditorProps {\n  value: BasicInfo;\n  onChange: (value: BasicInfo) => void;\n  maxLength?: number;\n  minLength?: number;\n  showPreview?: boolean;\n  placeholder?: string;\n  enableFormatting?: boolean;\n}\n\nconst DEFAULT_OPTIONS = {\n  maxLength: 2000,\n  minLength: 50,\n  showPreview: true,\n  placeholder: 'Tell us about yourself, your experience, and what makes you unique...',\n  enableFormatting: true\n};\n\nexport const BioEditor: React.FC<BioEditorProps> = ({\n  value,\n  onChange,\n  maxLength = DEFAULT_OPTIONS.maxLength,\n  minLength = DEFAULT_OPTIONS.minLength,\n  showPreview = DEFAULT_OPTIONS.showPreview,\n  placeholder = DEFAULT_OPTIONS.placeholder,\n  enableFormatting = DEFAULT_OPTIONS.enableFormatting\n}) => {\n  const { t } = useTranslation();\n  const [activeView, setActiveView] = useState<'edit' | 'preview'>('edit');\n  const [isFormatting, setIsFormatting] = useState(false);\n  const [showLinkDialog, setShowLinkDialog] = useState(false);\n  const [linkUrl, setLinkUrl] = useState('');\n  const [linkText, setLinkText] = useState('');\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [charCount, setCharCount] = useState(value.bio?.length || 0);\n  const [warnings, setWarnings] = useState<string[]>([]);\n\n  useEffect(() => {\n    setCharCount(value.bio?.length || 0);\n    validateBio(value.bio || '');\n  }, [value.bio]);\n\n  const validateBio = (text: string) => {\n    const newWarnings: string[] = [];\n\n    if (text.length < minLength) {\n      newWarnings.push(t('profile.bio.tooShort', { minLength }));\n    }\n\n    if (text.length > maxLength * 0.9) {\n      newWarnings.push(t('profile.bio approachingLimit'));\n    }\n\n    // Check for common issues\n    if (text.includes('http://') || text.includes('https://')) {\n      newWarnings.push(t('profile.bio.useLinkTool'));\n    }\n\n    const paragraphs = text.split('\\n\\n').filter(p => p.trim().length > 0);\n    if (paragraphs.length === 1 && text.length > 300) {\n      newWarnings.push(t('profile.bio.considerParagraphs'));\n    }\n\n    setWarnings(newWarnings);\n  };\n\n  const handleBioChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newBio = e.target.value;\n    if (newBio.length <= maxLength) {\n      onChange({\n        ...value,\n        bio: newBio\n      });\n    }\n  }, [value, onChange, maxLength]);\n\n  const handleBasicInfoChange = useCallback((field: keyof BasicInfo, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue\n    });\n  }, [value, onChange]);\n\n  const insertFormatting = useCallback((type: string) => {\n    if (!textareaRef.current) return;\n\n    const textarea = textareaRef.current;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = value.bio?.slice(start, end) || '';\n    let formattedText = '';\n\n    switch (type) {\n      case 'bold':\n        formattedText = `**${selectedText || 'bold text'}**`;\n        break;\n      case 'italic':\n        formattedText = `*${selectedText || 'italic text'}*`;\n        break;\n      case 'code':\n        formattedText = `\\`${selectedText || 'code'}\\``;\n        break;\n      case 'link':\n        if (selectedText) {\n          setLinkText(selectedText);\n        }\n        setShowLinkDialog(true);\n        return;\n      case 'list':\n        formattedText = '\\n• Item 1\\n• Item 2\\n• Item 3';\n        break;\n      case 'ordered-list':\n        formattedText = '\\n1. Item 1\\n2. Item 2\\n3. Item 3';\n        break;\n      case 'quote':\n        formattedText = `\\n> ${selectedText || 'Quote text'}`;\n        break;\n      default:\n        return;\n    }\n\n    const newBio = (value.bio || '').slice(0, start) + formattedText + (value.bio || '').slice(end);\n    onChange({\n      ...value,\n      bio: newBio\n    });\n\n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(\n        start + formattedText.length,\n        start + formattedText.length\n      );\n    }, 0);\n  }, [value, onChange]);\n\n  const insertLink = useCallback(() => {\n    if (!linkUrl.trim()) return;\n\n    const linkTextToUse = linkText.trim() || linkUrl;\n    const formattedLink = `[${linkTextToUse}](${linkUrl})`;\n\n    if (textareaRef.current) {\n      const textarea = textareaRef.current;\n      const start = textarea.selectionStart;\n      const newBio = (value.bio || '').slice(0, start) + formattedLink + (value.bio || '').slice(start);\n\n      onChange({\n        ...value,\n        bio: newBio\n      });\n\n      setTimeout(() => {\n        textarea.focus();\n        textarea.setSelectionRange(\n          start + formattedLink.length,\n          start + formattedLink.length\n        );\n      }, 0);\n    }\n\n    setLinkUrl('');\n    setLinkText('');\n    setShowLinkDialog(false);\n  }, [value, onChange, linkUrl, linkText]);\n\n  const renderPreview = () => {\n    if (!value.bio) {\n      return (\n        <div className=\"text-center py-8 text-gray-500\">\n          <FileText className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n          <p>{t('profile.bio.noContent')}</p>\n        </div>\n      );\n    }\n\n    // Simple markdown parser (in production, use a proper markdown library)\n    const parseMarkdown = (text: string) => {\n      return text\n        // Bold\n        .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n        // Italic\n        .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n        // Code\n        .replace(/`(.*?)`/g, '<code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">$1</code>')\n        // Links\n        .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:underline\">$1</a>')\n        // Unordered lists\n        .replace(/• (.+)(\\n|$)/g, '<li class=\"ml-4\">• $1</li>')\n        // Ordered lists\n        .replace(/^\\d+\\. (.+)(\\n|$)/gm, '<li class=\"ml-4\">$1</li>')\n        // Quotes\n        .replace(/^> (.+)/gm, '<blockquote class=\"border-l-4 border-gray-300 pl-4 italic\">$1</blockquote>')\n        // Line breaks\n        .replace(/\\n\\n/g, '</p><p class=\"mb-4\">')\n        .replace(/\\n/g, '<br />');\n    };\n\n    return (\n      <div className=\"prose prose-sm max-w-none\">\n        <div\n          className=\"text-gray-700 leading-relaxed\"\n          dangerouslySetInnerHTML={{\n            __html: `<p class=\"mb-4\">${parseMarkdown(value.bio)}</p>`\n          }}\n        />\n      </div>\n    );\n  };\n\n  const getCharacterCountColor = () => {\n    const percentage = (charCount / maxLength) * 100;\n    if (percentage >= 100) return 'text-red-600';\n    if (percentage >= 90) return 'text-orange-600';\n    if (percentage >= 75) return 'text-yellow-600';\n    return 'text-gray-600';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Basic Information Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            {t('profile.bio.basicInfo')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"displayName\">{t('profile.displayName')}</Label>\n              <Input\n                id=\"displayName\"\n                value={value.displayName || ''}\n                onChange={(e) => handleBasicInfoChange('displayName', e.target.value)}\n                placeholder={t('profile.displayName.placeholder')}\n                maxLength={100}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">{t('profile.title')}</Label>\n              <Input\n                id=\"title\"\n                value={value.title || ''}\n                onChange={(e) => handleBasicInfoChange('title', e.target.value)}\n                placeholder={t('profile.title.placeholder')}\n                maxLength={100}\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">{t('profile.location')}</Label>\n              <Input\n                id=\"location\"\n                value={value.location?.city || ''}\n                onChange={(e) => handleBasicInfoChange('location', e.target.value)}\n                placeholder={t('profile.location.placeholder')}\n                maxLength={100}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"website\">{t('profile.website')}</Label>\n              <Input\n                id=\"website\"\n                type=\"url\"\n                value={value.website || ''}\n                onChange={(e) => handleBasicInfoChange('website', e.target.value)}\n                placeholder={t('profile.website.placeholder')}\n                maxLength={200}\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>{t('profile.languages')}</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {value.languages?.map((language, index) => (\n                <Badge key={index} variant=\"secondary\">\n                  {language}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-auto p-1 ml-1\"\n                    onClick={() => {\n                      const newLanguages = value.languages?.filter((_, i) => i !== index) || [];\n                      handleBasicInfoChange('languages', newLanguages.join(','));\n                    }}\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </Badge>\n              ))}\n              <Input\n                placeholder={t('profile.languages.add')}\n                className=\"w-32\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    const target = e.target as HTMLInputElement;\n                    const newLanguage = target.value.trim();\n                    if (newLanguage && !value.languages?.includes(newLanguage)) {\n                      const newLanguages = [...(value.languages || []), newLanguage];\n                      handleBasicInfoChange('languages', newLanguages.join(','));\n                      target.value = '';\n                    }\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bio Editor Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Edit3 className=\"h-5 w-5\" />\n              {t('profile.bio.title')}\n            </CardTitle>\n\n            {showPreview && (\n              <Tabs value={activeView} onValueChange={(value) => setActiveView(value as 'edit' | 'preview')}>\n                <TabsList>\n                  <TabsTrigger value=\"edit\" className=\"flex items-center gap-2\">\n                    <Edit3 className=\"h-4 w-4\" />\n                    {t('common.edit')}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    {t('common.preview')}\n                  </TabsTrigger>\n                </TabsList>\n              </Tabs>\n            )}\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {/* Formatting Toolbar */}\n          {enableFormatting && activeView === 'edit' && (\n            <div className=\"flex flex-wrap gap-2 p-3 bg-gray-50 rounded-lg\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('bold')}\n                className=\"h-8 px-2\"\n              >\n                <Bold className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('italic')}\n                className=\"h-8 px-2\"\n              >\n                <Italic className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('code')}\n                className=\"h-8 px-2\"\n              >\n                <Code className=\"h-4 w-4\" />\n              </Button>\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('link')}\n                className=\"h-8 px-2\"\n              >\n                <Link className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('list')}\n                className=\"h-8 px-2\"\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('ordered-list')}\n                className=\"h-8 px-2\"\n              >\n                <ListOrdered className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertFormatting('quote')}\n                className=\"h-8 px-2\"\n              >\n                <Quote className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n\n          {/* Text Editor */}\n          {activeView === 'edit' ? (\n            <div className=\"space-y-3\">\n              <Textarea\n                ref={textareaRef}\n                value={value.bio || ''}\n                onChange={handleBioChange}\n                placeholder={placeholder}\n                className=\"min-h-[200px] resize-none\"\n                maxLength={maxLength}\n              />\n\n              {/* Character Count */}\n              <div className=\"flex items-center justify-between text-sm\">\n                <div className={`flex items-center gap-2 ${getCharacterCountColor()}`}>\n                  <span>{charCount}</span>\n                  <span>/</span>\n                  <span>{maxLength}</span>\n                  {charCount < minLength && (\n                    <span className=\"text-orange-600\">\n                      (Minimum {minLength} characters)\n                    </span>\n                  )}\n                </div>\n\n                {charCount >= maxLength * 0.9 && (\n                  <AlertCircle className=\"h-4 w-4 text-orange-600\" />\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"min-h-[200px] p-4 border rounded-lg bg-gray-50\">\n              {renderPreview()}\n            </div>\n          )}\n\n          {/* Warnings */}\n          {warnings.length > 0 && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-1\">\n                  {warnings.map((warning, index) => (\n                    <div key={index} className=\"text-sm\">\n                      {warning}\n                    </div>\n                  ))}\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Tips */}\n          <div className=\"text-sm text-gray-600 bg-blue-50 p-3 rounded-lg\">\n            <p className=\"font-medium mb-1\">{t('profile.bio.tips.title')}:</p>\n            <ul className=\"space-y-1 list-disc list-inside\">\n              <li>{t('profile.bio.tips.beSpecific')}</li>\n              <li>{t('profile.bio.tips.showExperience')}</li>\n              <li>{t('profile.bio.tips.useKeywords')}</li>\n              <li>{t('profile.bio.tips.keepConcise')}</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Link Dialog */}\n      {showLinkDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle>{t('profile.bio.addLink')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"linkText\">{t('profile.bio.linkText')}</Label>\n                <Input\n                  id=\"linkText\"\n                  value={linkText}\n                  onChange={(e) => setLinkText(e.target.value)}\n                  placeholder={t('profile.bio.linkText.placeholder')}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"linkUrl\">{t('profile.bio.linkUrl')}</Label>\n                <Input\n                  id=\"linkUrl\"\n                  type=\"url\"\n                  value={linkUrl}\n                  onChange={(e) => setLinkUrl(e.target.value)}\n                  placeholder=\"https://example.com\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowLinkDialog(false);\n                    setLinkUrl('');\n                    setLinkText('');\n                  }}\n                >\n                  {t('common.cancel')}\n                </Button>\n                <Button onClick={insertLink} disabled={!linkUrl.trim()}>\n                  <Check className=\"h-4 w-4 mr-2\" />\n                  {t('common.add')}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/ContactInfoEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Smartphone' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipContent' is defined but never used.","line":27,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipTrigger' is defined but never used.","line":27,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getFieldValidationMessage' is assigned a value but never used.","line":133,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":34}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Phone,\n  Mail,\n  MapPin,\n  Globe,\n  Clock,\n  Check,\n  AlertCircle,\n  Eye,\n  EyeOff,\n  Shield,\n  Smartphone,\n  MessageCircle\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { toast } from 'sonner';\n\nimport type { ContactInfo } from '@/types/profile';\n\ninterface ContactInfoEditorProps {\n  value: ContactInfo;\n  onChange: (value: ContactInfo) => void;\n  showVerification?: boolean;\n  showPrivacyControls?: boolean;\n}\n\nconst TIMEZONES = [\n  { value: 'Asia/Shanghai', label: '北京时间 (GMT+8)', offset: '+08:00' },\n  { value: 'Asia/Tokyo', label: '东京时间 (GMT+9)', offset: '+09:00' },\n  { value: 'Asia/Seoul', label: '首尔时间 (GMT+9)', offset: '+09:00' },\n  { value: 'America/New_York', label: '纽约时间 (GMT-5)', offset: '-05:00' },\n  { value: 'Europe/London', label: '伦敦时间 (GMT+0)', offset: '+00:00' },\n  { value: 'Europe/Paris', label: '巴黎时间 (GMT+1)', offset: '+01:00' },\n  { value: 'Australia/Sydney', label: '悉尼时间 (GMT+10)', offset: '+10:00' }\n];\n\nconst COUNTRIES = [\n  { code: 'CN', name: '中国', flag: '🇨🇳' },\n  { code: 'US', name: '美国', flag: '🇺🇸' },\n  { code: 'UK', name: '英国', flag: '🇬🇧' },\n  { code: 'JP', name: '日本', flag: '🇯🇵' },\n  { code: 'KR', name: '韩国', flag: '🇰🇷' },\n  { code: 'SG', name: '新加坡', flag: '🇸🇬' },\n  { code: 'AU', name: '澳大利亚', flag: '🇦🇺' },\n  { code: 'CA', name: '加拿大', flag: '🇨🇦' },\n  { code: 'DE', name: '德国', flag: '🇩🇪' },\n  { code: 'FR', name: '法国', flag: '🇫🇷' }\n];\n\nconst PHONE_VALIDATION_PATTERNS = {\n  CN: /^1[3-9]\\d{9}$/,\n  US: /^\\+1\\d{10}$/,\n  UK: /^\\+44\\d{10,11}$/,\n  default: /^\\+?[1-9]\\d{1,14}$/\n};\n\nexport const ContactInfoEditor: React.FC<ContactInfoEditorProps> = ({\n  value,\n  onChange,\n  showVerification = true,\n  showPrivacyControls = true\n}) => {\n  const { t } = useTranslation();\n  const [isEmailVerified, setIsEmailVerified] = useState(true); // Mock state\n  const [isPhoneVerified, setIsPhoneVerified] = useState(false); // Mock state\n  const [showEmailVerification, setShowEmailVerification] = useState(false);\n  const [showPhoneVerification, setShowPhoneVerification] = useState(false);\n  const [emailVerificationCode, setEmailVerificationCode] = useState('');\n  const [phoneVerificationCode, setPhoneVerificationCode] = useState('');\n\n  const handleFieldChange = useCallback((field: keyof ContactInfo, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue\n    });\n  }, [value, onChange]);\n\n  const validateEmail = useCallback((email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }, []);\n\n  const validatePhone = useCallback((phone: string, countryCode?: string) => {\n    if (!phone) return true;\n\n    // Remove all non-digit characters except + at the beginning\n    const cleanPhone = phone.replace(/[^\\d+]/g, '');\n\n    if (countryCode && PHONE_VALIDATION_PATTERNS[countryCode as keyof typeof PHONE_VALIDATION_PATTERNS]) {\n      return PHONE_VALIDATION_PATTERNS[countryCode as keyof typeof PHONE_VALIDATION_PATTERNS].test(cleanPhone);\n    }\n\n    return PHONE_VALIDATION_PATTERNS.default.test(cleanPhone);\n  }, []);\n\n  const validateWebsite = useCallback((website: string) => {\n    if (!website) return true;\n    try {\n      const url = website.startsWith('http') ? website : `https://${website}`;\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }, []);\n\n  const handleEmailVerification = useCallback(async () => {\n    // TODO: Implement email verification\n    setIsEmailVerified(true);\n    setShowEmailVerification(false);\n    toast.success(t('profile.contact.emailVerified'));\n  }, [t]);\n\n  const handlePhoneVerification = useCallback(async () => {\n    // TODO: Implement phone verification\n    setIsPhoneVerified(true);\n    setShowPhoneVerification(false);\n    toast.success(t('profile.contact.phoneVerified'));\n  }, [t]);\n\n  const getFieldValidationMessage = (field: string, fieldValue: string) => {\n    switch (field) {\n      case 'email':\n        if (fieldValue && !validateEmail(fieldValue)) {\n          return t('profile.contact.validation.email.invalid');\n        }\n        break;\n      case 'phone':\n        if (fieldValue && !validatePhone(fieldValue)) {\n          return t('profile.contact.validation.phone.invalid');\n        }\n        break;\n      case 'website':\n        if (fieldValue && !validateWebsite(fieldValue)) {\n          return t('profile.contact.validation.website.invalid');\n        }\n        break;\n      default:\n        return null;\n    }\n    return null;\n  };\n\n  const getCompletionPercentage = () => {\n    const fields = ['email', 'phone', 'city', 'province', 'country'];\n    const completedFields = fields.filter(field => value[field as keyof ContactInfo]?.trim()).length;\n    return Math.round((completedFields / fields.length) * 100);\n  };\n\n  const getContactStrength = () => {\n    const percentage = getCompletionPercentage();\n    if (percentage >= 80) return { level: 'excellent', color: 'text-green-600', text: t('profile.contact.strength.excellent') };\n    if (percentage >= 60) return { level: 'good', color: 'text-blue-600', text: t('profile.contact.strength.good') };\n    if (percentage >= 40) return { level: 'fair', color: 'text-yellow-600', text: t('profile.contact.strength.fair') };\n    return { level: 'poor', color: 'text-red-600', text: t('profile.contact.strength.poor') };\n  };\n\n  const strength = getContactStrength();\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageCircle className=\"h-5 w-5\" />\n                {t('profile.contact.title')}\n              </CardTitle>\n\n              <div className=\"flex items-center gap-3\">\n                {/* Contact Strength Indicator */}\n                <Badge variant=\"outline\" className={`flex items-center gap-1 ${strength.color}`}>\n                  <Shield className=\"h-3 w-3\" />\n                  <span>{strength.text}</span>\n                </Badge>\n\n                {/* Completion Percentage */}\n                <div className=\"text-sm text-gray-600\">\n                  {getCompletionPercentage()}% {t('profile.contact.completed')}\n                </div>\n              </div>\n            </div>\n\n            <p className=\"text-sm text-gray-600\">\n              {t('profile.contact.description')}\n            </p>\n          </CardHeader>\n        </Card>\n\n        <Tabs defaultValue=\"basic\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"basic\">{t('profile.contact.tabs.basic')}</TabsTrigger>\n            <TabsTrigger value=\"location\">{t('profile.contact.tabs.location')}</TabsTrigger>\n            <TabsTrigger value=\"preferences\">{t('profile.contact.tabs.preferences')}</TabsTrigger>\n          </TabsList>\n\n          {/* Basic Contact Information */}\n          <TabsContent value=\"basic\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">{t('profile.contact.basicInfo')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Email */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    {t('profile.contact.email')} *\n                    {showVerification && isEmailVerified && (\n                      <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                        <Check className=\"h-3 w-3 mr-1\" />\n                        {t('profile.contact.verified')}\n                      </Badge>\n                    )}\n                  </Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={value.email || ''}\n                      onChange={(e) => handleFieldChange('email', e.target.value)}\n                      placeholder={t('profile.contact.email.placeholder')}\n                      className=\"flex-1\"\n                    />\n                    {showVerification && !isEmailVerified && value.email && validateEmail(value.email) && (\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setShowEmailVerification(true)}\n                      >\n                        {t('profile.contact.verify')}\n                      </Button>\n                    )}\n                  </div>\n                  {value.email && (\n                    <p className={`text-xs ${\n                      validateEmail(value.email) ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {validateEmail(value.email) ? t('profile.contact.validation.email.valid') : t('profile.contact.validation.email.invalid')}\n                    </p>\n                  )}\n                </div>\n\n                {/* Phone */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\" className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4\" />\n                    {t('profile.contact.phone')}\n                    {showVerification && isPhoneVerified && (\n                      <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                        <Check className=\"h-3 w-3 mr-1\" />\n                        {t('profile.contact.verified')}\n                      </Badge>\n                    )}\n                  </Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={value.phone || ''}\n                      onChange={(e) => handleFieldChange('phone', e.target.value)}\n                      placeholder={t('profile.contact.phone.placeholder')}\n                      className=\"flex-1\"\n                    />\n                    {showVerification && !isPhoneVerified && value.phone && validatePhone(value.phone) && (\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setShowPhoneVerification(true)}\n                      >\n                        {t('profile.contact.verify')}\n                      </Button>\n                    )}\n                  </div>\n                  {value.phone && (\n                    <p className={`text-xs ${\n                      validatePhone(value.phone) ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {validatePhone(value.phone) ? t('profile.contact.validation.phone.valid') : t('profile.contact.validation.phone.invalid')}\n                    </p>\n                  )}\n                </div>\n\n                {/* Website */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"website\" className=\"flex items-center gap-2\">\n                    <Globe className=\"h-4 w-4\" />\n                    {t('profile.contact.website')}\n                  </Label>\n                  <Input\n                    id=\"website\"\n                    type=\"url\"\n                    value={value.website || ''}\n                    onChange={(e) => handleFieldChange('website', e.target.value)}\n                    placeholder={t('profile.contact.website.placeholder')}\n                  />\n                  {value.website && (\n                    <p className={`text-xs ${\n                      validateWebsite(value.website) ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {validateWebsite(value.website) ? t('profile.contact.validation.website.valid') : t('profile.contact.validation.website.invalid')}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Location Information */}\n          <TabsContent value=\"location\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  {t('profile.contact.location')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Country */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"country\">{t('profile.contact.country')}</Label>\n                  <Select\n                    value={value.country || ''}\n                    onValueChange={(value) => handleFieldChange('country', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('profile.contact.country.placeholder')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {COUNTRIES.map(country => (\n                        <SelectItem key={country.code} value={country.code}>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{country.flag}</span>\n                            <span>{country.name}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Province/State */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"province\">{t('profile.contact.province')}</Label>\n                  <Input\n                    id=\"province\"\n                    value={value.province || ''}\n                    onChange={(e) => handleFieldChange('province', e.target.value)}\n                    placeholder={t('profile.contact.province.placeholder')}\n                  />\n                </div>\n\n                {/* City */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">{t('profile.contact.city')}</Label>\n                  <Input\n                    id=\"city\"\n                    value={value.city || ''}\n                    onChange={(e) => handleFieldChange('city', e.target.value)}\n                    placeholder={t('profile.contact.city.placeholder')}\n                  />\n                </div>\n\n                {/* Address */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">{t('profile.contact.address')}</Label>\n                  <Input\n                    id=\"address\"\n                    value={value.address || ''}\n                    onChange={(e) => handleFieldChange('address', e.target.value)}\n                    placeholder={t('profile.contact.address.placeholder')}\n                  />\n                </div>\n\n                {/* Postal Code */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"postalCode\">{t('profile.contact.postalCode')}</Label>\n                  <Input\n                    id=\"postalCode\"\n                    value={value.postalCode || ''}\n                    onChange={(e) => handleFieldChange('postalCode', e.target.value)}\n                    placeholder={t('profile.contact.postalCode.placeholder')}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Preferences */}\n          <TabsContent value=\"preferences\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  {t('profile.contact.preferences')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Timezone */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timezone\">{t('profile.contact.timezone')}</Label>\n                  <Select\n                    value={value.timezone || ''}\n                    onValueChange={(value) => handleFieldChange('timezone', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('profile.contact.timezone.placeholder')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {TIMEZONES.map(timezone => (\n                        <SelectItem key={timezone.value} value={timezone.value}>\n                          <div className=\"flex flex-col\">\n                            <span>{timezone.label}</span>\n                            <span className=\"text-xs text-gray-500\">{timezone.offset}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Preferred Contact Method */}\n                <div className=\"space-y-2\">\n                  <Label>{t('profile.contact.preferredMethod')}</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[\n                      { value: 'email', label: t('profile.contact.email'), icon: Mail },\n                      { value: 'phone', label: t('profile.contact.phone'), icon: Phone },\n                      { value: 'message', label: t('profile.contact.message'), icon: MessageCircle },\n                      { value: 'video', label: t('profile.contact.video'), icon: Globe }\n                    ].map(method => {\n                      const Icon = method.icon;\n                      return (\n                        <Button\n                          key={method.value}\n                          variant=\"outline\"\n                          className=\"justify-start\"\n                        >\n                          <Icon className=\"h-4 w-4 mr-2\" />\n                          {method.label}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Response Time */}\n                <div className=\"space-y-2\">\n                  <Label>{t('profile.contact.responseTime')}</Label>\n                  <Select defaultValue=\"within_24h\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"within_1h\">{t('profile.contact.response.within1h')}</SelectItem>\n                      <SelectItem value=\"within_6h\">{t('profile.contact.response.within6h')}</SelectItem>\n                      <SelectItem value=\"within_24h\">{t('profile.contact.response.within24h')}</SelectItem>\n                      <SelectItem value=\"within_48h\">{t('profile.contact.response.within48h')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Working Hours */}\n                <div className=\"space-y-2\">\n                  <Label>{t('profile.contact.workingHours')}</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Input type=\"time\" defaultValue=\"09:00\" />\n                    <Input type=\"time\" defaultValue=\"18:00\" />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">\n                    {t('profile.contact.workingHours.note')}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Privacy Controls */}\n            {showPrivacyControls && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Shield className=\"h-5 w-5\" />\n                    {t('profile.contact.privacy')}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"font-medium\">{t('profile.contact.showEmail')}</Label>\n                      <p className=\"text-sm text-gray-600\">{t('profile.contact.showEmail.description')}</p>\n                    </div>\n                    <Switch defaultChecked={false} />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"font-medium\">{t('profile.contact.showPhone')}</Label>\n                      <p className=\"text-sm text-gray-600\">{t('profile.contact.showPhone.description')}</p>\n                    </div>\n                    <Switch defaultChecked={false} />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"font-medium\">{t('profile.contact.showLocation')}</Label>\n                      <p className=\"text-sm text-gray-600\">{t('profile.contact.showLocation.description')}</p>\n                    </div>\n                    <Switch defaultChecked={true} />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Email Verification Dialog */}\n        {showEmailVerification && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader>\n                <CardTitle>{t('profile.contact.verifyEmail')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  {t('profile.contact.verifyEmail.description')}\n                </p>\n                <Input\n                  placeholder={t('profile.contact.verificationCode')}\n                  value={emailVerificationCode}\n                  onChange={(e) => setEmailVerificationCode(e.target.value)}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowEmailVerification(false)}>\n                    {t('common.cancel')}\n                  </Button>\n                  <Button onClick={handleEmailVerification}>\n                    {t('profile.contact.verify')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Phone Verification Dialog */}\n        {showPhoneVerification && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader>\n                <CardTitle>{t('profile.contact.verifyPhone')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  {t('profile.contact.verifyPhone.description')}\n                </p>\n                <Input\n                  placeholder={t('profile.contact.verificationCode')}\n                  value={phoneVerificationCode}\n                  onChange={(e) => setPhoneVerificationCode(e.target.value)}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowPhoneVerification(false)}>\n                    {t('common.cancel')}\n                  </Button>\n                  <Button onClick={handlePhoneVerification}>\n                    {t('profile.contact.verify')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Tips */}\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <div className=\"space-y-2\">\n              <p className=\"font-medium\">{t('profile.contact.tips.title')}:</p>\n              <ul className=\"space-y-1 text-sm\">\n                <li>• {t('profile.contact.tips.verifyContact')}</li>\n                <li>• {t('profile.contact.tips.keepUpdated')}</li>\n                <li>• {t('profile.contact.tips.useProfessional')}</li>\n                <li>• {t('profile.contact.tips.privacyAware')}</li>\n              </ul>\n            </div>\n          </AlertDescription>\n        </Alert>\n      </div>\n    </TooltipProvider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/EducationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAddingEducation' is assigned a value but never used.","line":78,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsAddingEducation' is assigned a value but never used.","line":78,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":49}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  GraduationCap,\n  Plus,\n  Calendar,\n  Building,\n  Award,\n  X,\n  Edit2,\n  Trash2,\n  ChevronDown,\n  ChevronUp,\n  Check,\n  AlertCircle,\n  MoveUp,\n  MoveDown,\n  Upload,\n  FileText,\n  Download\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from 'sonner';\n\nimport type { EducationItem } from '@/types/profile';\n\ninterface EducationManagerProps {\n  education: EducationItem[];\n  onChange: (education: EducationItem[]) => void;\n  maxItems?: number;\n  enableReordering?: boolean;\n  showDocumentUpload?: boolean;\n}\n\nconst EDUCATION_LEVELS = [\n  { value: 'high_school', label: '高中', weight: 1 },\n  { value: 'associate', label: '专科', weight: 2 },\n  { value: 'bachelor', label: '本科', weight: 3 },\n  { value: 'master', label: '硕士', weight: 4 },\n  { value: 'doctorate', label: '博士', weight: 5 },\n  { value: 'postdoc', label: '博士后', weight: 6 },\n  { value: 'certificate', label: '证书', weight: 2 },\n  { value: 'diploma', label: '文凭', weight: 2 }\n];\n\nconst FIELDS_OF_STUDY = [\n  'Computer Science', 'Engineering', 'Business', 'Medicine', 'Law',\n  'Arts', 'Science', 'Mathematics', 'Education', 'Psychology',\n  'Design', 'Architecture', 'Journalism', 'Literature', 'History',\n  'Philosophy', 'Economics', 'Finance', 'Marketing', 'Communication'\n];\n\nconst COMMON_INSTITUTIONS = [\n  '清华大学', '北京大学', '复旦大学', '上海交通大学', '浙江大学',\n  '南京大学', '中山大学', '华中科技大学', '西安交通大学', '哈尔滨工业大学',\n  'MIT', 'Stanford University', 'Harvard University', 'UC Berkeley', 'Oxford University',\n  'Cambridge University', 'ETH Zurich', 'NUS', 'University of Tokyo', 'Tsinghua University'\n];\n\nexport const EducationManager: React.FC<EducationManagerProps> = ({\n  education,\n  onChange,\n  maxItems = 10,\n  enableReordering = true,\n  showDocumentUpload = true\n}) => {\n  const { t } = useTranslation();\n  const [isAddingEducation, setIsAddingEducation] = useState(false);\n  const [editingEducation, setEditingEducation] = useState<EducationItem | null>(null);\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [newEducation, setNewEducation] = useState<Partial<EducationItem>>({\n    institution: '',\n    degree: '',\n    field: '',\n    startDate: '',\n    endDate: '',\n    isCurrent: false,\n    diplomaDocument: ''\n  });\n\n  const handleAddEducation = useCallback(() => {\n    if (!newEducation.institution?.trim() || !newEducation.degree?.trim() || !newEducation.field?.trim()) {\n      toast.error(t('profile.education.requiredFields'));\n      return;\n    }\n\n    if (education.length >= maxItems) {\n      toast.error(t('profile.education.maxReached', { max: maxItems }));\n      return;\n    }\n\n    const educationItem: EducationItem = {\n      id: Date.now().toString(),\n      institution: newEducation.institution!,\n      degree: newEducation.degree!,\n      field: newEducation.field!,\n      startDate: newEducation.startDate!,\n      endDate: newEducation.isCurrent ? '' : newEducation.endDate || '',\n      isCurrent: newEducation.isCurrent || false,\n      diplomaDocument: newEducation.diplomaDocument || ''\n    };\n\n    onChange([...education, educationItem]);\n    setNewEducation({\n      institution: '',\n      degree: '',\n      field: '',\n      startDate: '',\n      endDate: '',\n      isCurrent: false,\n      diplomaDocument: ''\n    });\n    setShowAddDialog(false);\n    toast.success(t('profile.education.added'));\n  }, [newEducation, education, onChange, maxItems, t]);\n\n  const handleUpdateEducation = useCallback(() => {\n    if (!editingEducation || !editingEducation.institution?.trim() || !editingEducation.degree?.trim() || !editingEducation.field?.trim()) {\n      toast.error(t('profile.education.requiredFields'));\n      return;\n    }\n\n    const updatedEducation = education.map(edu =>\n      edu.id === editingEducation.id ? editingEducation : edu\n    );\n    onChange(updatedEducation);\n    setEditingEducation(null);\n    toast.success(t('profile.education.updated'));\n  }, [editingEducation, education, onChange, t]);\n\n  const handleDeleteEducation = useCallback((educationId: string) => {\n    const updatedEducation = education.filter(edu => edu.id !== educationId);\n    onChange(updatedEducation);\n    toast.success(t('profile.education.deleted'));\n  }, [education, onChange, t]);\n\n  const handleReorderEducation = useCallback((index: number, direction: 'up' | 'down') => {\n    if (!enableReordering) return;\n\n    const reorderedEducation = [...education];\n    const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n    if (targetIndex >= 0 && targetIndex < reorderedEducation.length) {\n      [reorderedEducation[index], reorderedEducation[targetIndex]] =\n      [reorderedEducation[targetIndex], reorderedEducation[index]];\n      onChange(reorderedEducation);\n    }\n  }, [education, onChange, enableReordering]);\n\n  const toggleExpanded = useCallback((id: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  }, [expandedItems]);\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long' });\n  };\n\n  const calculateDuration = (startDate: string, endDate: string, isCurrent: boolean) => {\n    const start = new Date(startDate);\n    const end = isCurrent ? new Date() : new Date(endDate);\n\n    const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());\n    const years = Math.floor(months / 12);\n    const remainingMonths = months % 12;\n\n    if (years > 0) {\n      return remainingMonths > 0\n        ? `${years}年${remainingMonths}个月`\n        : `${years}年`;\n    }\n    return `${remainingMonths}个月`;\n  };\n\n  const getEducationLevelWeight = (degree: string) => {\n    const level = EDUCATION_LEVELS.find(l => l.label === degree || l.value === degree);\n    return level ? level.weight : 0;\n  };\n\n  const sortEducationByLevel = (items: EducationItem[]) => {\n    return [...items].sort((a, b) => {\n      const weightA = getEducationLevelWeight(a.degree);\n      const weightB = getEducationLevelWeight(b.degree);\n      if (weightA !== weightB) {\n        return weightB - weightA;\n      }\n      // If same level, sort by date (most recent first)\n      const dateA = a.isCurrent ? new Date() : new Date(a.endDate || a.startDate);\n      const dateB = b.isCurrent ? new Date() : new Date(b.endDate || b.startDate);\n      return dateB.getTime() - dateA.getTime();\n    });\n  };\n\n  const sortedEducation = sortEducationByLevel(education);\n\n  const handleDocumentUpload = useCallback(async (file: File) => {\n    // TODO: Implement actual file upload\n    const mockDocumentUrl = URL.createObjectURL(file);\n    return mockDocumentUrl;\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-5 w-5\" />\n              {t('profile.education.title')}\n              <Badge variant=\"outline\">{education.length}</Badge>\n            </CardTitle>\n\n            <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n              <DialogTrigger asChild>\n                <Button\n                  disabled={education.length >= maxItems}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  {t('profile.education.add')}\n                </Button>\n              </DialogTrigger>\n\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>{t('profile.education.addNew')}</DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"institution\">{t('profile.education.institution')} *</Label>\n                    <Input\n                      id=\"institution\"\n                      value={newEducation.institution || ''}\n                      onChange={(e) => setNewEducation({ ...newEducation, institution: e.target.value })}\n                      placeholder={t('profile.education.institution.placeholder')}\n                    />\n                    {/* Suggestions */}\n                    <div className=\"flex flex-wrap gap-2\">\n                      {COMMON_INSTITUTIONS.filter(inst =>\n                        inst.toLowerCase().includes((newEducation.institution || '').toLowerCase())\n                      ).slice(0, 5).map(inst => (\n                        <Button\n                          key={inst}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setNewEducation({ ...newEducation, institution: inst })}\n                          className=\"text-xs\"\n                        >\n                          {inst}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"degree\">{t('profile.education.degree')} *</Label>\n                      <Select\n                        value={newEducation.degree || ''}\n                        onValueChange={(value) => setNewEducation({ ...newEducation, degree: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('profile.education.degree.placeholder')} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {EDUCATION_LEVELS.map(level => (\n                            <SelectItem key={level.value} value={level.label}>\n                              {level.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"field\">{t('profile.education.field')} *</Label>\n                      <Input\n                        id=\"field\"\n                        value={newEducation.field || ''}\n                        onChange={(e) => setNewEducation({ ...newEducation, field: e.target.value })}\n                        placeholder={t('profile.education.field.placeholder')}\n                      />\n                      {/* Field suggestions */}\n                      <div className=\"flex flex-wrap gap-2\">\n                        {FIELDS_OF_STUDY.filter(field =>\n                          field.toLowerCase().includes((newEducation.field || '').toLowerCase())\n                        ).slice(0, 3).map(field => (\n                          <Button\n                            key={field}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setNewEducation({ ...newEducation, field })}\n                            className=\"text-xs\"\n                          >\n                            {field}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"startDate\">{t('profile.education.startDate')} *</Label>\n                      <Input\n                        id=\"startDate\"\n                        type=\"month\"\n                        value={newEducation.startDate || ''}\n                        onChange={(e) => setNewEducation({ ...newEducation, startDate: e.target.value })}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"endDate\">{t('profile.education.endDate')}</Label>\n                      <Input\n                        id=\"endDate\"\n                        type=\"month\"\n                        value={newEducation.endDate || ''}\n                        onChange={(e) => setNewEducation({ ...newEducation, endDate: e.target.value })}\n                        disabled={newEducation.isCurrent}\n                      />\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          id=\"isCurrent\"\n                          checked={newEducation.isCurrent || false}\n                          onCheckedChange={(checked) =>\n                            setNewEducation({\n                              ...newEducation,\n                              isCurrent: checked as boolean,\n                              endDate: checked ? '' : newEducation.endDate\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"isCurrent\" className=\"text-sm\">\n                          {t('profile.education.currentlyStudy')}\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n\n                  {showDocumentUpload && (\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"diplomaDocument\">{t('profile.education.diplomaDocument')}</Label>\n                      <div className=\"flex items-center gap-3\">\n                        <Input\n                          id=\"diplomaDocument\"\n                          type=\"file\"\n                          accept=\".pdf,.jpg,.jpeg,.png\"\n                          onChange={async (e) => {\n                            const file = e.target.files?.[0];\n                            if (file) {\n                              const documentUrl = await handleDocumentUpload(file);\n                              setNewEducation({ ...newEducation, diplomaDocument: documentUrl });\n                            }\n                          }}\n                          className=\"flex-1\"\n                        />\n                        {newEducation.diplomaDocument && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-gray-500\">\n                        {t('profile.education.documentHelp')}\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                      {t('common.cancel')}\n                    </Button>\n                    <Button onClick={handleAddEducation}>\n                      {t('common.add')}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {sortedEducation.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <GraduationCap className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">{t('profile.education.noEducation')}</h3>\n              <p className=\"text-sm mb-4\">{t('profile.education.noEducation.description')}</p>\n              <Button onClick={() => setShowAddDialog(true)}>\n                {t('profile.education.addFirst')}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {sortedEducation.map((edu, index) => (\n                <Card key={edu.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex gap-4\">\n                      {enableReordering && (\n                        <div className=\"flex flex-col gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleReorderEducation(index, 'up')}\n                            disabled={index === 0}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <MoveUp className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleReorderEducation(index, 'down')}\n                            disabled={index === sortedEducation.length - 1}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <MoveDown className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      )}\n\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                              {edu.degree}\n                            </h3>\n                            <div className=\"flex items-center gap-2 text-gray-600 mb-2\">\n                              <Building className=\"h-4 w-4\" />\n                              <span className=\"font-medium\">{edu.institution}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2 text-gray-600 mb-2\">\n                              <Award className=\"h-4 w-4\" />\n                              <span>{edu.field}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <Calendar className=\"h-4 w-4\" />\n                              <span>\n                                {formatDate(edu.startDate)} - {edu.isCurrent ? t('profile.education.present') : formatDate(edu.endDate)}\n                              </span>\n                              <span className=\"text-gray-400\">\n                                ({calculateDuration(edu.startDate, edu.endDate || '', edu.isCurrent)})\n                              </span>\n                              {edu.isCurrent && (\n                                <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                  {t('profile.education.current')}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center gap-2\">\n                            {edu.diplomaDocument && (\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <FileText className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleExpanded(edu.id)}\n                            >\n                              {expandedItems.has(edu.id) ? (\n                                <ChevronUp className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setEditingEducation(edu)}\n                            >\n                              <Edit2 className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteEducation(edu.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        {/* Expanded content */}\n                        {expandedItems.has(edu.id) && (\n                          <div className=\"mt-4 space-y-3\">\n                            {edu.diplomaDocument && (\n                              <div className=\"flex items-center gap-2 p-3 bg-gray-50 rounded-lg\">\n                                <FileText className=\"h-4 w-4 text-gray-600\" />\n                                <span className=\"text-sm text-gray-600\">\n                                  {t('profile.education.documentUploaded')}\n                                </span>\n                                <Button variant=\"outline\" size=\"sm\" className=\"ml-auto\">\n                                  <Download className=\"h-4 w-4 mr-1\" />\n                                  {t('common.download')}\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Education Dialog */}\n      {editingEducation && (\n        <Dialog open={!!editingEducation} onOpenChange={() => setEditingEducation(null)}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{t('profile.education.edit')}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editInstitution\">{t('profile.education.institution')} *</Label>\n                <Input\n                  id=\"editInstitution\"\n                  value={editingEducation.institution}\n                  onChange={(e) => setEditingEducation({ ...editingEducation, institution: e.target.value })}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editDegree\">{t('profile.education.degree')} *</Label>\n                  <Select\n                    value={editingEducation.degree}\n                    onValueChange={(value) => setEditingEducation({ ...editingEducation, degree: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {EDUCATION_LEVELS.map(level => (\n                        <SelectItem key={level.value} value={level.label}>\n                          {level.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editField\">{t('profile.education.field')} *</Label>\n                  <Input\n                    id=\"editField\"\n                    value={editingEducation.field}\n                    onChange={(e) => setEditingEducation({ ...editingEducation, field: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editStartDate\">{t('profile.education.startDate')} *</Label>\n                  <Input\n                    id=\"editStartDate\"\n                    type=\"month\"\n                    value={editingEducation.startDate}\n                    onChange={(e) => setEditingEducation({ ...editingEducation, startDate: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editEndDate\">{t('profile.education.endDate')}</Label>\n                  <Input\n                    id=\"editEndDate\"\n                    type=\"month\"\n                    value={editingEducation.endDate || ''}\n                    onChange={(e) => setEditingEducation({ ...editingEducation, endDate: e.target.value })}\n                    disabled={editingEducation.isCurrent}\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <Checkbox\n                      id=\"editIsCurrent\"\n                      checked={editingEducation.isCurrent}\n                      onCheckedChange={(checked) =>\n                        setEditingEducation({\n                          ...editingEducation,\n                          isCurrent: checked as boolean,\n                          endDate: checked ? '' : editingEducation.endDate\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"editIsCurrent\" className=\"text-sm\">\n                      {t('profile.education.currentlyStudy')}\n                    </Label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setEditingEducation(null)}>\n                  {t('common.cancel')}\n                </Button>\n                <Button onClick={handleUpdateEducation}>\n                  {t('common.save')}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Tips */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.education.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.education.tips.beAccurate')}</li>\n              <li>• {t('profile.education.tips.includeDates')}</li>\n              <li>• {t('profile.education.tips.uploadDocuments')}</li>\n              <li>• {t('profile.education.tips.listInReverse')}</li>\n              <li>• {t('profile.education.tips.includeRelevant')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/ExperienceManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GripVertical' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":31,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":31,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":31,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":31,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'INDUSTRY_TYPES' is assigned a value but never used.","line":54,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAddingExperience' is assigned a value but never used.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsAddingExperience' is assigned a value but never used.","line":68,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":51}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Briefcase,\n  Plus,\n  Calendar,\n  MapPin,\n  X,\n  Edit2,\n  Trash2,\n  ChevronDown,\n  ChevronUp,\n  Building,\n  ExternalLink,\n  Check,\n  AlertCircle,\n  MoveUp,\n  MoveDown,\n  GripVertical\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from 'sonner';\n\nimport type { ExperienceItem } from '@/types/profile';\n\ninterface ExperienceManagerProps {\n  experience: ExperienceItem[];\n  onChange: (experience: ExperienceItem[]) => void;\n  maxItems?: number;\n  enableReordering?: boolean;\n  showTechnologies?: boolean;\n}\n\nconst COMMON_TECHNOLOGIES = [\n  'JavaScript', 'TypeScript', 'React', 'Vue.js', 'Angular', 'Node.js',\n  'Python', 'Java', 'C++', 'Go', 'Rust', 'PHP', 'Ruby',\n  'HTML', 'CSS', 'Sass', 'Tailwind CSS', 'Bootstrap',\n  'MongoDB', 'PostgreSQL', 'MySQL', 'Redis', 'Elasticsearch',\n  'AWS', 'Google Cloud', 'Azure', 'Docker', 'Kubernetes',\n  'Git', 'CI/CD', 'Jenkins', 'GitHub Actions', 'Agile', 'Scrum'\n];\n\nconst INDUSTRY_TYPES = [\n  'Technology', 'Finance', 'Healthcare', 'Education', 'E-commerce',\n  'Media', 'Consulting', 'Manufacturing', 'Real Estate', 'Government',\n  'Non-profit', 'Retail', 'Transportation', 'Energy', 'Telecommunications'\n];\n\nexport const ExperienceManager: React.FC<ExperienceManagerProps> = ({\n  experience,\n  onChange,\n  maxItems = 10,\n  enableReordering = true,\n  showTechnologies = true\n}) => {\n  const { t } = useTranslation();\n  const [isAddingExperience, setIsAddingExperience] = useState(false);\n  const [editingExperience, setEditingExperience] = useState<ExperienceItem | null>(null);\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [newExperience, setNewExperience] = useState<Partial<ExperienceItem>>({\n    company: '',\n    position: '',\n    description: '',\n    startDate: '',\n    endDate: '',\n    isCurrent: false,\n    location: '',\n    technologies: []\n  });\n\n  const handleAddExperience = useCallback(() => {\n    if (!newExperience.company?.trim() || !newExperience.position?.trim()) {\n      toast.error(t('profile.experience.requiredFields'));\n      return;\n    }\n\n    if (experience.length >= maxItems) {\n      toast.error(t('profile.experience.maxReached', { max: maxItems }));\n      return;\n    }\n\n    const experienceItem: ExperienceItem = {\n      id: Date.now().toString(),\n      company: newExperience.company!,\n      position: newExperience.position!,\n      description: newExperience.description || '',\n      startDate: newExperience.startDate!,\n      endDate: newExperience.isCurrent ? '' : newExperience.endDate || '',\n      isCurrent: newExperience.isCurrent || false,\n      location: newExperience.location || '',\n      technologies: newExperience.technologies || []\n    };\n\n    onChange([...experience, experienceItem]);\n    setNewExperience({\n      company: '',\n      position: '',\n      description: '',\n      startDate: '',\n      endDate: '',\n      isCurrent: false,\n      location: '',\n      technologies: []\n    });\n    setShowAddDialog(false);\n    toast.success(t('profile.experience.added'));\n  }, [newExperience, experience, onChange, maxItems, t]);\n\n  const handleUpdateExperience = useCallback(() => {\n    if (!editingExperience || !editingExperience.company?.trim() || !editingExperience.position?.trim()) {\n      toast.error(t('profile.experience.requiredFields'));\n      return;\n    }\n\n    const updatedExperience = experience.map(exp =>\n      exp.id === editingExperience.id ? editingExperience : exp\n    );\n    onChange(updatedExperience);\n    setEditingExperience(null);\n    toast.success(t('profile.experience.updated'));\n  }, [editingExperience, experience, onChange, t]);\n\n  const handleDeleteExperience = useCallback((experienceId: string) => {\n    const updatedExperience = experience.filter(exp => exp.id !== experienceId);\n    onChange(updatedExperience);\n    toast.success(t('profile.experience.deleted'));\n  }, [experience, onChange, t]);\n\n  const handleReorderExperience = useCallback((index: number, direction: 'up' | 'down') => {\n    if (!enableReordering) return;\n\n    const reorderedExperience = [...experience];\n    const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n    if (targetIndex >= 0 && targetIndex < reorderedExperience.length) {\n      [reorderedExperience[index], reorderedExperience[targetIndex]] =\n      [reorderedExperience[targetIndex], reorderedExperience[index]];\n      onChange(reorderedExperience);\n    }\n  }, [experience, onChange, enableReordering]);\n\n  const toggleExpanded = useCallback((id: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  }, [expandedItems]);\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long' });\n  };\n\n  const calculateDuration = (startDate: string, endDate: string, isCurrent: boolean) => {\n    const start = new Date(startDate);\n    const end = isCurrent ? new Date() : new Date(endDate);\n\n    const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());\n    const years = Math.floor(months / 12);\n    const remainingMonths = months % 12;\n\n    if (years > 0) {\n      return remainingMonths > 0\n        ? `${years}年${remainingMonths}个月`\n        : `${years}年`;\n    }\n    return `${remainingMonths}个月`;\n  };\n\n  const sortExperienceByDate = (items: ExperienceItem[]) => {\n    return [...items].sort((a, b) => {\n      const dateA = a.isCurrent ? new Date() : new Date(a.endDate || a.startDate);\n      const dateB = b.isCurrent ? new Date() : new Date(b.endDate || b.startDate);\n      return dateB.getTime() - dateA.getTime();\n    });\n  };\n\n  const sortedExperience = sortExperienceByDate(experience);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Briefcase className=\"h-5 w-5\" />\n              {t('profile.experience.title')}\n              <Badge variant=\"outline\">{experience.length}</Badge>\n            </CardTitle>\n\n            <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n              <DialogTrigger asChild>\n                <Button\n                  disabled={experience.length >= maxItems}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  {t('profile.experience.add')}\n                </Button>\n              </DialogTrigger>\n\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>{t('profile.experience.addNew')}</DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company\">{t('profile.experience.company')} *</Label>\n                      <Input\n                        id=\"company\"\n                        value={newExperience.company || ''}\n                        onChange={(e) => setNewExperience({ ...newExperience, company: e.target.value })}\n                        placeholder={t('profile.experience.company.placeholder')}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"position\">{t('profile.experience.position')} *</Label>\n                      <Input\n                        id=\"position\"\n                        value={newExperience.position || ''}\n                        onChange={(e) => setNewExperience({ ...newExperience, position: e.target.value })}\n                        placeholder={t('profile.experience.position.placeholder')}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"startDate\">{t('profile.experience.startDate')} *</Label>\n                      <Input\n                        id=\"startDate\"\n                        type=\"month\"\n                        value={newExperience.startDate || ''}\n                        onChange={(e) => setNewExperience({ ...newExperience, startDate: e.target.value })}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"endDate\">{t('profile.experience.endDate')}</Label>\n                      <Input\n                        id=\"endDate\"\n                        type=\"month\"\n                        value={newExperience.endDate || ''}\n                        onChange={(e) => setNewExperience({ ...newExperience, endDate: e.target.value })}\n                        disabled={newExperience.isCurrent}\n                      />\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          id=\"isCurrent\"\n                          checked={newExperience.isCurrent || false}\n                          onCheckedChange={(checked) =>\n                            setNewExperience({\n                              ...newExperience,\n                              isCurrent: checked as boolean,\n                              endDate: checked ? '' : newExperience.endDate\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"isCurrent\" className=\"text-sm\">\n                          {t('profile.experience.currentlyWork')}\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"location\">{t('profile.experience.location')}</Label>\n                    <Input\n                      id=\"location\"\n                      value={newExperience.location || ''}\n                      onChange={(e) => setNewExperience({ ...newExperience, location: e.target.value })}\n                      placeholder={t('profile.experience.location.placeholder')}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">{t('profile.experience.description')}</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={newExperience.description || ''}\n                      onChange={(e) => setNewExperience({ ...newExperience, description: e.target.value })}\n                      placeholder={t('profile.experience.description.placeholder')}\n                      rows={4}\n                    />\n                  </div>\n\n                  {showTechnologies && (\n                    <div className=\"space-y-2\">\n                      <Label>{t('profile.experience.technologies')}</Label>\n                      <div className=\"flex flex-wrap gap-2 mb-2\">\n                        {COMMON_TECHNOLOGIES.map(tech => (\n                          <Badge\n                            key={tech}\n                            variant={newExperience.technologies?.includes(tech) ? \"default\" : \"outline\"}\n                            className=\"cursor-pointer\"\n                            onClick={() => {\n                              const technologies = newExperience.technologies || [];\n                              if (technologies.includes(tech)) {\n                                setNewExperience({\n                                  ...newExperience,\n                                  technologies: technologies.filter(t => t !== tech)\n                                });\n                              } else {\n                                setNewExperience({\n                                  ...newExperience,\n                                  technologies: [...technologies, tech]\n                                });\n                              }\n                            }}\n                          >\n                            {tech}\n                          </Badge>\n                        ))}\n                      </div>\n                      <Input\n                        placeholder={t('profile.experience.technologies.custom')}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            const target = e.target as HTMLInputElement;\n                            const tech = target.value.trim();\n                            if (tech && !newExperience.technologies?.includes(tech)) {\n                              setNewExperience({\n                                ...newExperience,\n                                technologies: [...(newExperience.technologies || []), tech]\n                              });\n                              target.value = '';\n                            }\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                      {t('common.cancel')}\n                    </Button>\n                    <Button onClick={handleAddExperience}>\n                      {t('common.add')}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {sortedExperience.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Briefcase className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">{t('profile.experience.noExperience')}</h3>\n              <p className=\"text-sm mb-4\">{t('profile.experience.noExperience.description')}</p>\n              <Button onClick={() => setShowAddDialog(true)}>\n                {t('profile.experience.addFirst')}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {sortedExperience.map((exp, index) => (\n                <Card key={exp.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex gap-4\">\n                      {enableReordering && (\n                        <div className=\"flex flex-col gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleReorderExperience(index, 'up')}\n                            disabled={index === 0}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <MoveUp className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleReorderExperience(index, 'down')}\n                            disabled={index === sortedExperience.length - 1}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <MoveDown className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      )}\n\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                              {exp.position}\n                            </h3>\n                            <div className=\"flex items-center gap-2 text-gray-600 mb-2\">\n                              <Building className=\"h-4 w-4\" />\n                              <span className=\"font-medium\">{exp.company}</span>\n                              {exp.location && (\n                                <>\n                                  <MapPin className=\"h-4 w-4 ml-2\" />\n                                  <span>{exp.location}</span>\n                                </>\n                              )}\n                            </div>\n                            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <Calendar className=\"h-4 w-4\" />\n                              <span>\n                                {formatDate(exp.startDate)} - {exp.isCurrent ? t('profile.experience.present') : formatDate(exp.endDate)}\n                              </span>\n                              <span className=\"text-gray-400\">\n                                ({calculateDuration(exp.startDate, exp.endDate || '', exp.isCurrent)})\n                              </span>\n                              {exp.isCurrent && (\n                                <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                  {t('profile.experience.current')}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleExpanded(exp.id)}\n                            >\n                              {expandedItems.has(exp.id) ? (\n                                <ChevronUp className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setEditingExperience(exp)}\n                            >\n                              <Edit2 className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteExperience(exp.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        {/* Expanded content */}\n                        {expandedItems.has(exp.id) && (\n                          <div className=\"mt-4 space-y-3\">\n                            {exp.description && (\n                              <div>\n                                <h4 className=\"font-medium text-gray-900 mb-2\">\n                                  {t('profile.experience.description')}\n                                </h4>\n                                <p className=\"text-gray-600 whitespace-pre-wrap\">\n                                  {exp.description}\n                                </p>\n                              </div>\n                            )}\n\n                            {showTechnologies && exp.technologies && exp.technologies.length > 0 && (\n                              <div>\n                                <h4 className=\"font-medium text-gray-900 mb-2\">\n                                  {t('profile.experience.technologies')}\n                                </h4>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {exp.technologies.map((tech, techIndex) => (\n                                    <Badge key={techIndex} variant=\"secondary\">\n                                      {tech}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Experience Dialog */}\n      {editingExperience && (\n        <Dialog open={!!editingExperience} onOpenChange={() => setEditingExperience(null)}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{t('profile.experience.edit')}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editCompany\">{t('profile.experience.company')} *</Label>\n                  <Input\n                    id=\"editCompany\"\n                    value={editingExperience.company}\n                    onChange={(e) => setEditingExperience({ ...editingExperience, company: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editPosition\">{t('profile.experience.position')} *</Label>\n                  <Input\n                    id=\"editPosition\"\n                    value={editingExperience.position}\n                    onChange={(e) => setEditingExperience({ ...editingExperience, position: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editStartDate\">{t('profile.experience.startDate')} *</Label>\n                  <Input\n                    id=\"editStartDate\"\n                    type=\"month\"\n                    value={editingExperience.startDate}\n                    onChange={(e) => setEditingExperience({ ...editingExperience, startDate: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editEndDate\">{t('profile.experience.endDate')}</Label>\n                  <Input\n                    id=\"editEndDate\"\n                    type=\"month\"\n                    value={editingExperience.endDate || ''}\n                    onChange={(e) => setEditingExperience({ ...editingExperience, endDate: e.target.value })}\n                    disabled={editingExperience.isCurrent}\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <Checkbox\n                      id=\"editIsCurrent\"\n                      checked={editingExperience.isCurrent}\n                      onCheckedChange={(checked) =>\n                        setEditingExperience({\n                          ...editingExperience,\n                          isCurrent: checked as boolean,\n                          endDate: checked ? '' : editingExperience.endDate\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"editIsCurrent\" className=\"text-sm\">\n                      {t('profile.experience.currentlyWork')}\n                    </Label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editLocation\">{t('profile.experience.location')}</Label>\n                <Input\n                  id=\"editLocation\"\n                  value={editingExperience.location || ''}\n                  onChange={(e) => setEditingExperience({ ...editingExperience, location: e.target.value })}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editDescription\">{t('profile.experience.description')}</Label>\n                <Textarea\n                  id=\"editDescription\"\n                  value={editingExperience.description || ''}\n                  onChange={(e) => setEditingExperience({ ...editingExperience, description: e.target.value })}\n                  rows={4}\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setEditingExperience(null)}>\n                  {t('common.cancel')}\n                </Button>\n                <Button onClick={handleUpdateExperience}>\n                  {t('common.save')}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Tips */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.experience.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.experience.tips.beSpecific')}</li>\n              <li>• {t('profile.experience.tips.quantifyAchievements')}</li>\n              <li>• {t('profile.experience.tips.useKeywords')}</li>\n              <li>• {t('profile.experience.tips.focusOnRelevant')}</li>\n              <li>• {t('profile.experience.tips.includeDates')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/PortfolioManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Play' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Maximize2' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":33,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":33,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":33,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PortfolioMedia' is defined but never used.","line":37,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleUpdateItem' is assigned a value but never used.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":25}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Image as ImageIcon,\n  Video,\n  FileText,\n  Plus,\n  X,\n  Edit2,\n  Trash2,\n  Eye,\n  ExternalLink,\n  Upload,\n  Calendar,\n  Tag,\n  Play,\n  Maximize2,\n  Check,\n  AlertCircle,\n  Star,\n  Grid,\n  List\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from 'sonner';\n\nimport type { PortfolioItem, PortfolioMedia } from '@/types/profile';\n\ninterface PortfolioManagerProps {\n  portfolio: PortfolioItem[];\n  onChange: (portfolio: PortfolioItem[]) => void;\n  maxItems?: number;\n  maxImagesPerItem?: number;\n  enableVideo?: boolean;\n  enableDocuments?: boolean;\n}\n\nconst SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];\nconst SUPPORTED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/ogg'];\nconst SUPPORTED_DOCUMENT_TYPES = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n\nconst COMMON_TAGS = [\n  'Web Design', 'Mobile App', 'UI/UX', 'Branding', 'Logo Design',\n  'Frontend', 'Backend', 'Full Stack', 'React', 'Vue.js', 'Angular',\n  'Node.js', 'Python', 'E-commerce', 'SaaS', 'Mobile First',\n  'Responsive', 'Animation', 'Illustration', 'Photography', 'Video'\n];\n\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB per file\nconst MAX_IMAGES_PER_ITEM = 10;\n\nexport const PortfolioManager: React.FC<PortfolioManagerProps> = ({\n  portfolio,\n  onChange,\n  maxItems = 20,\n  maxImagesPerItem = MAX_IMAGES_PER_ITEM,\n  enableVideo = true,\n  enableDocuments = true\n}) => {\n  const { t } = useTranslation();\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [isAddingItem, setIsAddingItem] = useState(false);\n  const [editingItem, setEditingItem] = useState<PortfolioItem | null>(null);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  const [previewItem, setPreviewItem] = useState<PortfolioItem | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const [uploadErrors, setUploadErrors] = useState<string[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [newItem, setNewItem] = useState<Partial<PortfolioItem>>({\n    title: '',\n    description: '',\n    images: [],\n    projectUrl: '',\n    technologies: [],\n    completedAt: new Date().toISOString().split('T')[0]\n  });\n\n  const handleAddItem = useCallback(() => {\n    if (!newItem.title?.trim()) {\n      toast.error(t('profile.portfolio.titleRequired'));\n      return;\n    }\n\n    if (portfolio.length >= maxItems) {\n      toast.error(t('profile.portfolio.maxReached', { max: maxItems }));\n      return;\n    }\n\n    const portfolioItem: PortfolioItem = {\n      id: Date.now().toString(),\n      title: newItem.title!,\n      description: newItem.description || '',\n      images: newItem.images || [],\n      projectUrl: newItem.projectUrl || '',\n      technologies: newItem.technologies || [],\n      completedAt: newItem.completedAt || new Date().toISOString()\n    };\n\n    onChange([...portfolio, portfolioItem]);\n    setNewItem({\n      title: '',\n      description: '',\n      images: [],\n      projectUrl: '',\n      technologies: [],\n      completedAt: new Date().toISOString().split('T')[0]\n    });\n    setIsAddingItem(false);\n    toast.success(t('profile.portfolio.itemAdded'));\n  }, [newItem, portfolio, onChange, maxItems, t]);\n\n  const handleUpdateItem = useCallback(() => {\n    if (!editingItem || !editingItem.title?.trim()) {\n      toast.error(t('profile.portfolio.titleRequired'));\n      return;\n    }\n\n    const updatedPortfolio = portfolio.map(item =>\n      item.id === editingItem.id ? editingItem : item\n    );\n    onChange(updatedPortfolio);\n    setEditingItem(null);\n    toast.success(t('profile.portfolio.itemUpdated'));\n  }, [editingItem, portfolio, onChange, t]);\n\n  const handleDeleteItem = useCallback((itemId: string) => {\n    const updatedPortfolio = portfolio.filter(item => item.id !== itemId);\n    onChange(updatedPortfolio);\n    toast.success(t('profile.portfolio.itemDeleted'));\n  }, [portfolio, onChange, t]);\n\n  const handleFileUpload = useCallback(async (files: FileList | null, targetItem: Partial<PortfolioItem>) => {\n    if (!files || files.length === 0) return;\n\n    const validFiles = Array.from(files).filter(file => {\n      const isValidType = [\n        ...SUPPORTED_IMAGE_TYPES,\n        ...(enableVideo ? SUPPORTED_VIDEO_TYPES : []),\n        ...(enableDocuments ? SUPPORTED_DOCUMENT_TYPES : [])\n      ].includes(file.type);\n\n      const isValidSize = file.size <= MAX_FILE_SIZE;\n\n      if (!isValidType) {\n        setUploadErrors(prev => [...prev, t('profile.portfolio.invalidFileType', { fileName: file.name })]);\n        return false;\n      }\n\n      if (!isValidSize) {\n        setUploadErrors(prev => [...prev, t('profile.portfolio.fileTooLarge', { fileName: file.name })]);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (validFiles.length === 0) return;\n\n    const currentImages = targetItem.images || [];\n    if (currentImages.length + validFiles.length > maxImagesPerItem) {\n      toast.error(t('profile.portfolio.tooManyFiles', { max: maxImagesPerItem }));\n      return;\n    }\n\n    // Simulate file upload\n    for (const file of validFiles) {\n      const fileId = `${Date.now()}-${Math.random()}`;\n      setUploadProgress(prev => ({ ...prev, [fileId]: 0 }));\n\n      try {\n        // Simulate upload progress\n        for (let progress = 0; progress <= 100; progress += 10) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n          setUploadProgress(prev => ({ ...prev, [fileId]: progress }));\n        }\n\n        // Create file URL (in production, this would be the URL from the server)\n        const fileUrl = URL.createObjectURL(file);\n        const updatedImages = [...currentImages, fileUrl];\n\n        if (targetItem.id) {\n          // Update existing item\n          setEditingItem(prev => prev ? { ...prev, images: updatedImages } : null);\n        } else {\n          // Update new item\n          setNewItem(prev => ({ ...prev, images: updatedImages }));\n        }\n\n        setUploadProgress(prev => {\n          const newProgress = { ...prev };\n          delete newProgress[fileId];\n          return newProgress;\n        });\n\n      } catch (error) {\n        console.error('Upload error:', error);\n        setUploadErrors(prev => [...prev, t('profile.portfolio.uploadError', { fileName: file.name })]);\n      }\n    }\n  }, [enableVideo, enableDocuments, maxImagesPerItem, t]);\n\n  const handlePreviewItem = useCallback((item: PortfolioItem) => {\n    setPreviewItem(item);\n    setShowPreviewDialog(true);\n  }, []);\n\n  const handleAddTag = useCallback((tag: string, targetItem: Partial<PortfolioItem>) => {\n    if (!tag.trim()) return;\n\n    const currentTags = targetItem.technologies || [];\n    if (currentTags.includes(tag)) return;\n\n    const updatedTags = [...currentTags, tag];\n\n    if (targetItem.id) {\n      setEditingItem(prev => prev ? { ...prev, technologies: updatedTags } : null);\n    } else {\n      setNewItem(prev => ({ ...prev, technologies: updatedTags }));\n    }\n  }, []);\n\n  const handleRemoveTag = useCallback((tag: string, targetItem: Partial<PortfolioItem>) => {\n    const currentTags = targetItem.technologies || [];\n    const updatedTags = currentTags.filter(t => t !== tag);\n\n    if (targetItem.id) {\n      setEditingItem(prev => prev ? { ...prev, technologies: updatedTags } : null);\n    } else {\n      setNewItem(prev => ({ ...prev, technologies: updatedTags }));\n    }\n  }, []);\n\n  const getMediaType = (url: string): 'image' | 'video' | 'document' => {\n    if (url.match(/\\.(jpg|jpeg|png|gif|webp)$/i)) return 'image';\n    if (url.match(/\\.(mp4|webm|ogg)$/i)) return 'video';\n    if (url.match(/\\.(pdf|doc|docx)$/i)) return 'document';\n    return 'image';\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: 'long'\n      });\n    } catch {\n      return dateString;\n    }\n  };\n\n  const sortedPortfolio = [...portfolio].sort((a, b) =>\n    new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime()\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <ImageIcon className=\"h-5 w-5\" />\n              {t('profile.portfolio.title')}\n              <Badge variant=\"outline\">{portfolio.length}</Badge>\n            </CardTitle>\n\n            <div className=\"flex items-center gap-2\">\n              {/* View Mode Toggle */}\n              <div className=\"flex border rounded-md\">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                  className=\"rounded-r-none\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                  className=\"rounded-l-none\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <Dialog open={isAddingItem} onOpenChange={setIsAddingItem}>\n                <DialogTrigger asChild>\n                  <Button\n                    disabled={portfolio.length >= maxItems}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    {t('profile.portfolio.addItem')}\n                  </Button>\n                </DialogTrigger>\n\n                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>{t('profile.portfolio.addNewItem')}</DialogTitle>\n                  </DialogHeader>\n\n                  <div className=\"space-y-6\">\n                    {/* Basic Information */}\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"title\">{t('profile.portfolio.title')} *</Label>\n                        <Input\n                          id=\"title\"\n                          value={newItem.title || ''}\n                          onChange={(e) => setNewItem({ ...newItem, title: e.target.value })}\n                          placeholder={t('profile.portfolio.title.placeholder')}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"description\">{t('profile.portfolio.description')}</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={newItem.description || ''}\n                          onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}\n                          placeholder={t('profile.portfolio.description.placeholder')}\n                          rows={4}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"projectUrl\">{t('profile.portfolio.projectUrl')}</Label>\n                          <Input\n                            id=\"projectUrl\"\n                            type=\"url\"\n                            value={newItem.projectUrl || ''}\n                            onChange={(e) => setNewItem({ ...newItem, projectUrl: e.target.value })}\n                            placeholder=\"https://example.com\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"completedAt\">{t('profile.portfolio.completedAt')}</Label>\n                          <Input\n                            id=\"completedAt\"\n                            type=\"date\"\n                            value={newItem.completedAt || ''}\n                            onChange={(e) => setNewItem({ ...newItem, completedAt: e.target.value })}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Media Upload */}\n                    <div className=\"space-y-4\">\n                      <Label>{t('profile.portfolio.media')}</Label>\n                      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6\">\n                        <div className=\"text-center\">\n                          <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <div className=\"space-y-2\">\n                            <p className=\"text-lg font-medium\">{t('profile.portfolio.uploadMedia')}</p>\n                            <p className=\"text-sm text-gray-600\">\n                              {t('profile.portfolio.uploadDescription')}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {t('profile.portfolio.supportedFormats')} • {t('profile.portfolio.maxSize', { size: '10MB' })}\n                            </p>\n                          </div>\n                          <input\n                            ref={fileInputRef}\n                            type=\"file\"\n                            multiple\n                            accept={[...SUPPORTED_IMAGE_TYPES, ...(enableVideo ? SUPPORTED_VIDEO_TYPES : [])].join(',')}\n                            onChange={(e) => handleFileUpload(e.target.files, newItem)}\n                            className=\"hidden\"\n                          />\n                          <Button\n                            onClick={() => fileInputRef.current?.click()}\n                            className=\"mt-4\"\n                          >\n                            {t('profile.portfolio.selectFiles')}\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Upload Progress */}\n                      {Object.entries(uploadProgress).map(([fileId, progress]) => (\n                        <div key={fileId} className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>{t('profile.portfolio.uploading')}</span>\n                            <span>{progress}%</span>\n                          </div>\n                          <Progress value={progress} />\n                        </div>\n                      ))}\n\n                      {/* Preview Uploaded Images */}\n                      {newItem.images && newItem.images.length > 0 && (\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                          {newItem.images.map((image, index) => (\n                            <div key={index} className=\"relative group\">\n                              <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-100\">\n                                {getMediaType(image) === 'image' ? (\n                                  <img\n                                    src={image}\n                                    alt={`Upload ${index + 1}`}\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                ) : getMediaType(image) === 'video' ? (\n                                  <div className=\"w-full h-full flex items-center justify-center\">\n                                    <Video className=\"h-8 w-8 text-gray-400\" />\n                                  </div>\n                                ) : (\n                                  <div className=\"w-full h-full flex items-center justify-center\">\n                                    <FileText className=\"h-8 w-8 text-gray-400\" />\n                                  </div>\n                                )}\n                              </div>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                className=\"absolute top-2 right-2 h-6 w-6 rounded-full p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                onClick={() => {\n                                  const updatedImages = newItem.images?.filter((_, i) => i !== index) || [];\n                                  setNewItem({ ...newItem, images: updatedImages });\n                                }}\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Technologies */}\n                    <div className=\"space-y-4\">\n                      <Label>{t('profile.portfolio.technologies')}</Label>\n                      <div className=\"flex flex-wrap gap-2 mb-3\">\n                        {newItem.technologies?.map((tech, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                            {tech}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-auto p-0 ml-1\"\n                              onClick={() => handleRemoveTag(tech, newItem)}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </Badge>\n                        ))}\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {COMMON_TAGS.filter(tag => !newItem.technologies?.includes(tag)).slice(0, 8).map(tag => (\n                          <Button\n                            key={tag}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleAddTag(tag, newItem)}\n                          >\n                            {tag}\n                          </Button>\n                        ))}\n                      </div>\n                      <Input\n                        placeholder={t('profile.portfolio.addCustomTag')}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            const target = e.target as HTMLInputElement;\n                            handleAddTag(target.value, newItem);\n                            target.value = '';\n                          }\n                        }}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end gap-2\">\n                      <Button variant=\"outline\" onClick={() => setIsAddingItem(false)}>\n                        {t('common.cancel')}\n                      </Button>\n                      <Button onClick={handleAddItem}>\n                        {t('profile.portfolio.addItem')}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {portfolio.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <ImageIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">{t('profile.portfolio.noItems')}</h3>\n              <p className=\"text-sm mb-4\">{t('profile.portfolio.noItems.description')}</p>\n              <Button onClick={() => setIsAddingItem(true)}>\n                {t('profile.portfolio.addFirstItem')}\n              </Button>\n            </div>\n          ) : (\n            <div className={\n              viewMode === 'grid'\n                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n                : 'space-y-4'\n            }>\n              {sortedPortfolio.map(item => (\n                <Card key={item.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-0\">\n                    {viewMode === 'grid' ? (\n                      // Grid View\n                      <div className=\"group\">\n                        {/* Media Preview */}\n                        <div className=\"aspect-video rounded-t-lg overflow-hidden bg-gray-100 relative\">\n                          {item.images.length > 0 ? (\n                            getMediaType(item.images[0]) === 'image' ? (\n                              <img\n                                src={item.images[0]}\n                                alt={item.title}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center\">\n                                <Video className=\"h-12 w-12 text-gray-400\" />\n                              </div>\n                            )\n                          ) : (\n                            <div className=\"w-full h-full flex items-center justify-center\">\n                              <ImageIcon className=\"h-12 w-12 text-gray-300\" />\n                            </div>\n                          )}\n\n                          {/* Hover Actions */}\n                          <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2\">\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={() => handlePreviewItem(item)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={() => setEditingItem(item)}\n                            >\n                              <Edit2 className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteItem(item.id)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n\n                          {/* Multiple Images Indicator */}\n                          {item.images.length > 1 && (\n                            <div className=\"absolute top-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded\">\n                              +{item.images.length - 1} {t('profile.portfolio.moreImages')}\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Content */}\n                        <div className=\"p-4\">\n                          <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-1\">\n                            {item.title}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                            {item.description}\n                          </p>\n\n                          {/* Technologies */}\n                          {item.technologies.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mb-3\">\n                              {item.technologies.slice(0, 3).map((tech, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {tech}\n                                </Badge>\n                              ))}\n                              {item.technologies.length > 3 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{item.technologies.length - 3}\n                                </Badge>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <span>{formatDate(item.completedAt)}</span>\n                            {item.projectUrl && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-6 px-2\"\n                                onClick={() => window.open(item.projectUrl, '_blank')}\n                              >\n                                <ExternalLink className=\"h-3 w-3\" />\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      // List View\n                      <div className=\"p-6\">\n                        <div className=\"flex gap-4\">\n                          {/* Thumbnail */}\n                          <div className=\"w-24 h-24 rounded-lg overflow-hidden bg-gray-100 flex-shrink-0\">\n                            {item.images.length > 0 ? (\n                              getMediaType(item.images[0]) === 'image' ? (\n                                <img\n                                  src={item.images[0]}\n                                  alt={item.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              ) : (\n                                <div className=\"w-full h-full flex items-center justify-center\">\n                                  <Video className=\"h-8 w-8 text-gray-400\" />\n                                </div>\n                              )\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center\">\n                                <ImageIcon className=\"h-8 w-8 text-gray-300\" />\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Content */}\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <h3 className=\"font-semibold text-gray-900 mb-1\">\n                                  {item.title}\n                                </h3>\n                                <p className=\"text-sm text-gray-600 line-clamp-2\">\n                                  {item.description}\n                                </p>\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handlePreviewItem(item)}\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setEditingItem(item)}\n                                >\n                                  <Edit2 className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteItem(item.id)}\n                                  className=\"text-red-600\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n\n                            {/* Technologies */}\n                            {item.technologies.length > 0 && (\n                              <div className=\"flex flex-wrap gap-1 mb-2\">\n                                {item.technologies.slice(0, 5).map((tech, index) => (\n                                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                    {tech}\n                                  </Badge>\n                                ))}\n                                {item.technologies.length > 5 && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    +{item.technologies.length - 5}\n                                  </Badge>\n                                )}\n                              </div>\n                            )}\n\n                            {/* Footer */}\n                            <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                              <span>{formatDate(item.completedAt)}</span>\n                              <div className=\"flex items-center gap-2\">\n                                {item.images.length > 0 && (\n                                  <span>{item.images.length} {t('profile.portfolio.images')}</span>\n                                )}\n                                {item.projectUrl && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-6 px-2\"\n                                    onClick={() => window.open(item.projectUrl, '_blank')}\n                                  >\n                                    <ExternalLink className=\"h-3 w-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Preview Dialog */}\n      {previewItem && (\n        <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{previewItem.title}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              {/* Media Gallery */}\n              {previewItem.images.length > 0 && (\n                <div className=\"space-y-4\">\n                  <div className=\"aspect-video rounded-lg overflow-hidden bg-gray-100\">\n                    {getMediaType(previewItem.images[0]) === 'image' ? (\n                      <img\n                        src={previewItem.images[0]}\n                        alt={previewItem.title}\n                        className=\"w-full h-full object-contain\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center\">\n                        <video\n                          src={previewItem.images[0]}\n                          controls\n                          className=\"max-w-full max-h-full\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {previewItem.images.length > 1 && (\n                    <div className=\"grid grid-cols-4 md:grid-cols-6 gap-2\">\n                      {previewItem.images.slice(1).map((image, index) => (\n                        <div key={index} className=\"aspect-square rounded-lg overflow-hidden bg-gray-100 cursor-pointer hover:ring-2 hover:ring-blue-500\">\n                          {getMediaType(image) === 'image' ? (\n                            <img\n                              src={image}\n                              alt={`${previewItem.title} ${index + 2}`}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full flex items-center justify-center\">\n                              <Video className=\"h-6 w-6 text-gray-400\" />\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Details */}\n              <div className=\"space-y-4\">\n                {previewItem.description && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">{t('profile.portfolio.description')}</h3>\n                    <p className=\"text-gray-600 whitespace-pre-wrap\">{previewItem.description}</p>\n                  </div>\n                )}\n\n                {previewItem.technologies.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">{t('profile.portfolio.technologies')}</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {previewItem.technologies.map((tech, index) => (\n                        <Badge key={index} variant=\"secondary\">\n                          {tech}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-4 border-t\">\n                  <span className=\"text-sm text-gray-500\">\n                    {t('profile.portfolio.completedOn')}: {formatDate(previewItem.completedAt)}\n                  </span>\n                  {previewItem.projectUrl && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => window.open(previewItem.projectUrl, '_blank')}\n                    >\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      {t('profile.portfolio.visitProject')}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Upload Errors */}\n      {uploadErrors.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <div className=\"space-y-1\">\n              {uploadErrors.map((error, index) => (\n                <div key={index} className=\"text-sm\">{error}</div>\n              ))}\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Tips */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.portfolio.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.portfolio.tips.highQuality')}</li>\n              <li>• {t('profile.portfolio.tips.showVariety')}</li>\n              <li>• {t('profile.portfolio.tips.describeWork')}</li>\n              <li>• {t('profile.portfolio.tips.useTags')}</li>\n              <li>• {t('profile.portfolio.tips.keepUpdated')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/PrivacySettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2109,2112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2109,2112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getVisibilityIcon' is assigned a value but never used.","line":88,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getVisibilityColor' is assigned a value but never used.","line":93,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":27}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Shield,\n  Eye,\n  EyeOff,\n  Users,\n  Lock,\n  Globe,\n  Search,\n  Bell,\n  MessageSquare,\n  Check,\n  AlertTriangle,\n  Info,\n  UserCheck,\n  UserX,\n  Settings,\n  Smartphone\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from 'sonner';\n\nimport type { PrivacySettings as PrivacySettingsType } from '@/types/profile';\n\ninterface PrivacySettingsProps {\n  settings: PrivacySettingsType;\n  onChange: (settings: PrivacySettingsType) => void;\n  showAdvanced?: boolean;\n}\n\nconst VISIBILITY_OPTIONS = [\n  {\n    value: 'public',\n    label: '公开',\n    description: '所有人都可以查看您的个人资料',\n    icon: Globe,\n    color: 'text-green-600'\n  },\n  {\n    value: 'clients_only',\n    label: '仅客户',\n    description: '只有与您有业务往来的用户可以查看',\n    icon: Users,\n    color: 'text-blue-600'\n  },\n  {\n    value: 'private',\n    label: '私密',\n    description: '只有您可以查看个人资料',\n    icon: Lock,\n    color: 'text-red-600'\n  }\n];\n\nexport const PrivacySettings: React.FC<PrivacySettingsProps> = ({\n  settings,\n  onChange,\n  showAdvanced = true\n}) => {\n  const { t } = useTranslation();\n  const [hasChanges, setHasChanges] = useState(false);\n  const [showDataExportDialog, setShowDataExportDialog] = useState(false);\n  const [showBlockedListDialog, setShowBlockedListDialog] = useState(false);\n\n  const handleSettingChange = useCallback((key: keyof PrivacySettingsType, value: any) => {\n    const newSettings = { ...settings, [key]: value };\n    onChange(newSettings);\n    setHasChanges(true);\n  }, [settings, onChange]);\n\n  const handleSaveSettings = useCallback(() => {\n    // TODO: Save settings to API\n    setHasChanges(false);\n    toast.success(t('profile.privacy.settingsSaved'));\n  }, [t]);\n\n  const getVisibilityIcon = (visibility: string) => {\n    const option = VISIBILITY_OPTIONS.find(opt => opt.value === visibility);\n    return option ? option.icon : Globe;\n  };\n\n  const getVisibilityColor = (visibility: string) => {\n    const option = VISIBILITY_OPTIONS.find(opt => opt.value === visibility);\n    return option ? option.color : 'text-gray-600';\n  };\n\n  const privacyLevel = settings.profileVisibility === 'private' ? 'high' :\n                      settings.profileVisibility === 'clients_only' ? 'medium' : 'low';\n\n  const getPrivacyLevelColor = (level: string) => {\n    switch (level) {\n      case 'high': return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPrivacyLevelText = (level: string) => {\n    switch (level) {\n      case 'high': return t('profile.privacy.levels.high');\n      case 'medium': return t('profile.privacy.levels.medium');\n      case 'low': return t('profile.privacy.levels.low');\n      default: return '';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              {t('profile.privacy.title')}\n            </CardTitle>\n\n            <div className=\"flex items-center gap-3\">\n              {/* Privacy Level Indicator */}\n              <Badge variant=\"outline\" className={getPrivacyLevelColor(privacyLevel)}>\n                {getPrivacyIcon(settings.profileVisibility)}\n                <span className=\"ml-1\">{getPrivacyLevelText(privacyLevel)}</span>\n              </Badge>\n\n              {hasChanges && (\n                <Button onClick={handleSaveSettings}>\n                  <Check className=\"h-4 w-4 mr-2\" />\n                  {t('common.save')}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <p className=\"text-sm text-gray-600\">\n            {t('profile.privacy.description')}\n          </p>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"visibility\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"visibility\">{t('profile.privacy.tabs.visibility')}</TabsTrigger>\n          <TabsTrigger value=\"profile\">{t('profile.privacy.tabs.profile')}</TabsTrigger>\n          <TabsTrigger value=\"communication\">{t('profile.privacy.tabs.communication')}</TabsTrigger>\n          {showAdvanced && <TabsTrigger value=\"advanced\">{t('profile.privacy.tabs.advanced')}</TabsTrigger>}\n        </TabsList>\n\n        {/* Visibility Settings */}\n        <TabsContent value=\"visibility\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"h-5 w-5\" />\n                {t('profile.privacy.profileVisibility')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                {VISIBILITY_OPTIONS.map(option => {\n                  const Icon = option.icon;\n                  return (\n                    <div\n                      key={option.value}\n                      className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                        settings.profileVisibility === option.value\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => handleSettingChange('profileVisibility', option.value)}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Icon className={`h-5 w-5 ${option.color}`} />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{option.label}</div>\n                          <div className=\"text-sm text-gray-600\">{option.description}</div>\n                        </div>\n                        <div className=\"w-4 h-4 rounded-full border-2 border-gray-300\">\n                          {settings.profileVisibility === option.value && (\n                            <div className=\"w-full h-full rounded-full bg-blue-600\"></div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t('profile.privacy.visibilityNote')}\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Search and Discovery */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                {t('profile.privacy.searchDiscovery')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.privacy.allowSearch')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.privacy.allowSearch.description')}</p>\n                </div>\n                <Switch\n                  checked={settings.allowSearch}\n                  onCheckedChange={(checked) => handleSettingChange('allowSearch', checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.privacy.allowRecommendations')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.privacy.allowRecommendations.description')}</p>\n                </div>\n                <Switch\n                  checked={settings.allowRecommendations}\n                  onCheckedChange={(checked) => handleSettingChange('allowRecommendations', checked)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Profile Information */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UserCheck className=\"h-5 w-5\" />\n                {t('profile.privacy.profileInformation')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4\">\n                {/* Email Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showEmail')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showEmail.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showEmail}\n                    onCheckedChange={(checked) => handleSettingChange('showEmail', checked)}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Phone Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showPhone')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showPhone.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showPhone}\n                    onCheckedChange={(checked) => handleSettingChange('showPhone', checked)}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Location Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showLocation')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showLocation.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showLocation}\n                    onCheckedChange={(checked) => handleSettingChange('showLocation', checked)}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Website Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showWebsite')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showWebsite.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showWebsite}\n                    onCheckedChange={(checked) => handleSettingChange('showWebsite', checked)}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Social Media Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showSocialMedia')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showSocialMedia.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showSocialMedia}\n                    onCheckedChange={(checked) => handleSettingChange('showSocialMedia', checked)}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Portfolio Visibility */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showPortfolio')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showPortfolio.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showPortfolio}\n                    onCheckedChange={(checked) => handleSettingChange('showPortfolio', checked)}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Communication Settings */}\n        <TabsContent value=\"communication\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                {t('profile.privacy.communication')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">{t('profile.privacy.allowMessages')}</Label>\n                  <p className=\"text-sm text-gray-600\">{t('profile.privacy.allowMessages.description')}</p>\n                </div>\n                <Switch\n                  checked={settings.allowMessages}\n                  onCheckedChange={(checked) => handleSettingChange('allowMessages', checked)}\n                />\n              </div>\n\n              {settings.allowMessages && (\n                <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                  <Label className=\"font-medium mb-2 block\">\n                    {t('profile.privacy.whoCanMessage')}\n                  </Label>\n                  <Select defaultValue=\"all\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">{t('profile.privacy.everyone')}</SelectItem>\n                      <SelectItem value=\"clients\">{t('profile.privacy.clientsOnly')}</SelectItem>\n                      <SelectItem value=\"verified\">{t('profile.privacy.verifiedOnly')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"font-medium\">{t('profile.privacy.showContactInfo')}</Label>\n                    <p className=\"text-sm text-gray-600\">{t('profile.privacy.showContactInfo.description')}</p>\n                  </div>\n                  <Switch\n                    checked={settings.showContactInfo}\n                    onCheckedChange={(checked) => handleSettingChange('showContactInfo', checked)}\n                  />\n                </div>\n\n                {settings.showContactInfo && (\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {t('profile.privacy.contactInfoWarning')}\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Advanced Settings */}\n        {showAdvanced && (\n          <TabsContent value=\"advanced\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  {t('profile.privacy.advanced')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Data Export */}\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">{t('profile.privacy.dataExport')}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    {t('profile.privacy.dataExport.description')}\n                  </p>\n                  <Dialog open={showDataExportDialog} onOpenChange={setShowDataExportDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\">\n                        <Smartphone className=\"h-4 w-4 mr-2\" />\n                        {t('profile.privacy.exportData')}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>{t('profile.privacy.exportData')}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <p className=\"text-sm text-gray-600\">\n                          {t('profile.privacy.exportData.confirmation')}\n                        </p>\n                        <div className=\"space-y-2\">\n                          <Label className=\"flex items-center gap-2\">\n                            <input type=\"checkbox\" defaultChecked />\n                            {t('profile.privacy.exportData.profile')}\n                          </Label>\n                          <Label className=\"flex items-center gap-2\">\n                            <input type=\"checkbox\" defaultChecked />\n                            {t('profile.privacy.exportData.portfolio')}\n                          </Label>\n                          <Label className=\"flex items-center gap-2\">\n                            <input type=\"checkbox\" defaultChecked />\n                            {t('profile.privacy.exportData.transactions')}\n                          </Label>\n                          <Label className=\"flex items-center gap-2\">\n                            <input type=\"checkbox\" />\n                            {t('profile.privacy.exportData.messages')}\n                          </Label>\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowDataExportDialog(false)}>\n                            {t('common.cancel')}\n                          </Button>\n                          <Button onClick={() => {\n                            // TODO: Implement data export\n                            toast.success(t('profile.privacy.exportData.started'));\n                            setShowDataExportDialog(false);\n                          }}>\n                            {t('profile.privacy.exportData.start')}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                <Separator />\n\n                {/* Blocked Users */}\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">{t('profile.privacy.blockedUsers')}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    {t('profile.privacy.blockedUsers.description')}\n                  </p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowBlockedListDialog(true)}\n                  >\n                    <UserX className=\"h-4 w-4 mr-2\" />\n                    {t('profile.privacy.viewBlocked')}\n                  </Button>\n                </div>\n\n                <Separator />\n\n                {/* Privacy Checklist */}\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium mb-3\">{t('profile.privacy.checklist')}</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      settings.profileVisibility !== 'public',\n                      !settings.showEmail,\n                      !settings.showPhone,\n                      settings.allowSearch,\n                      settings.showPortfolio\n                    ].map((checked, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <div className={`w-4 h-4 rounded-full border-2 ${\n                          checked ? 'bg-green-600 border-green-600' : 'bg-gray-300 border-gray-300'\n                        }`}>\n                          {checked && (\n                            <Check className=\"h-3 w-3 text-white\" />\n                          )}\n                        </div>\n                        <span className=\"text-sm\">\n                          {t(`profile.privacy.checklist.items.${index}`)}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n\n      {/* Blocked Users Dialog */}\n      <Dialog open={showBlockedListDialog} onOpenChange={setShowBlockedListDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{t('profile.privacy.blockedUsers')}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              {t('profile.privacy.noBlockedUsers')}\n            </p>\n            <div className=\"flex justify-end\">\n              <Button variant=\"outline\" onClick={() => setShowBlockedListDialog(false)}>\n                {t('common.close')}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Privacy Tips */}\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.privacy.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.privacy.tips.reviewRegularly')}</li>\n              <li>• {t('profile.privacy.tips.limitPersonalInfo')}</li>\n              <li>• {t('profile.privacy.tips.useStrongPasswords')}</li>\n              <li>• {t('profile.privacy.tips.monitorActivity')}</li>\n              <li>• {t('profile.privacy.tips.understandSettings')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/ProfileAvatarUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Crop' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RotateCw' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cropAspectRatio' is assigned a value but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showPreview' is assigned a value but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":14}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Upload,\n  Camera,\n  X,\n  Check,\n  AlertCircle,\n  Loader2,\n  Image as ImageIcon,\n  Crop,\n  RotateCw\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { toast } from 'sonner';\n\nimport type { ProfileImage, ImageUploadOptions } from '@/types/profile';\n\ninterface ProfileAvatarUploadProps {\n  value?: string;\n  onChange: (avatar: string) => void;\n  maxSize?: number; // in bytes\n  acceptedTypes?: string[];\n  cropAspectRatio?: number;\n  showPreview?: boolean;\n  className?: string;\n}\n\nconst DEFAULT_UPLOAD_OPTIONS: ImageUploadOptions = {\n  maxSize: 5 * 1024 * 1024, // 5MB\n  allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\n  cropRatio: 1, // Square for avatars\n  compressQuality: 0.8,\n  multiple: false\n};\n\nexport const ProfileAvatarUpload: React.FC<ProfileAvatarUploadProps> = ({\n  value,\n  onChange,\n  maxSize = DEFAULT_UPLOAD_OPTIONS.maxSize,\n  acceptedTypes = DEFAULT_UPLOAD_OPTIONS.allowedTypes,\n  cropAspectRatio = DEFAULT_UPLOAD_OPTIONS.cropRatio,\n  showPreview = true,\n  className = ''\n}) => {\n  const { t } = useTranslation();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [showCropDialog, setShowCropDialog] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [uploadedImage, setUploadedImage] = useState<ProfileImage | null>(null);\n\n  const handleFileSelect = useCallback((file: File) => {\n    setError(null);\n\n    // Validate file type\n    if (!acceptedTypes.includes(file.type)) {\n      setError(t('profile.avatar.invalidType'));\n      return;\n    }\n\n    // Validate file size\n    if (file.size > maxSize) {\n      setError(t('profile.avatar.fileTooLarge', {\n        maxSize: (maxSize / 1024 / 1024).toFixed(1)\n      }));\n      return;\n    }\n\n    setSelectedFile(file);\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n    setShowCropDialog(true);\n  }, [acceptedTypes, maxSize, t]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [handleFileSelect]);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [handleFileSelect]);\n\n  const compressImage = async (file: File, quality: number = 0.8): Promise<Blob> => {\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate new dimensions\n        let { width, height } = img;\n        const maxDimension = 1200; // Max dimension for compression\n\n        if (width > height) {\n          if (width > maxDimension) {\n            height = (height * maxDimension) / width;\n            width = maxDimension;\n          }\n        } else {\n          if (height > maxDimension) {\n            width = (width * maxDimension) / height;\n            height = maxDimension;\n          }\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        if (ctx) {\n          ctx.drawImage(img, 0, 0, width, height);\n          canvas.toBlob(resolve, 'image/jpeg', quality);\n        }\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  const handleUpload = async (croppedBlob: Blob) => {\n    if (!selectedFile) return;\n\n    try {\n      setIsUploading(true);\n      setUploadProgress(0);\n\n      // Compress image\n      const compressedBlob = await compressImage(croppedBlob, DEFAULT_UPLOAD_OPTIONS.compressQuality);\n\n      // Create form data\n      const formData = new FormData();\n      const uploadFile = new File([compressedBlob], selectedFile.name, {\n        type: 'image/jpeg'\n      });\n      formData.append('avatar', uploadFile);\n      formData.append('type', 'avatar');\n\n      // Simulate upload progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + Math.random() * 10;\n        });\n      }, 100);\n\n      // TODO: Replace with actual API call\n      const response = await new Promise<{ url: string }>((resolve) => {\n        setTimeout(() => {\n          clearInterval(progressInterval);\n          setUploadProgress(100);\n          resolve({\n            url: URL.createObjectURL(uploadFile)\n          });\n        }, 2000);\n      });\n\n      // Update state\n      onChange(response.url);\n      setUploadedImage({\n        id: Date.now().toString(),\n        url: response.url,\n        type: 'avatar',\n        name: selectedFile.name,\n        size: uploadFile.size,\n        uploadedAt: new Date().toISOString()\n      });\n\n      toast.success(t('profile.avatar.uploadSuccess'));\n      setShowCropDialog(false);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      setError(t('profile.avatar.uploadError'));\n      toast.error(t('profile.avatar.uploadError'));\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const handleRemoveAvatar = () => {\n    onChange('');\n    setUploadedImage(null);\n    toast.success(t('profile.avatar.removeSuccess'));\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Current Avatar Display */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative\">\n          <Avatar className=\"h-24 w-24\">\n            <AvatarImage src={value} alt=\"Profile avatar\" />\n            <AvatarFallback className=\"text-lg\">\n              {t('profile.avatar.placeholder')}\n            </AvatarFallback>\n          </Avatar>\n\n          {value && (\n            <Button\n              size=\"sm\"\n              variant=\"destructive\"\n              className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n              onClick={handleRemoveAvatar}\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-medium\">{t('profile.avatar.title')}</h3>\n          <p className=\"text-sm text-gray-600 mb-2\">\n            {t('profile.avatar.description')}\n          </p>\n          <p className=\"text-xs text-gray-500\">\n            {t('profile.avatar.requirements', {\n              types: acceptedTypes.join(', '),\n              maxSize: formatFileSize(maxSize)\n            })}\n          </p>\n        </div>\n      </div>\n\n      {/* Upload Area */}\n      <Card\n        className={`border-2 border-dashed transition-colors cursor-pointer ${\n          isDragging\n            ? 'border-blue-500 bg-blue-50'\n            : 'border-gray-300 hover:border-gray-400'\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={openFileDialog}\n      >\n        <CardContent className=\"flex flex-col items-center justify-center py-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-gray-100 mb-4\">\n              <Upload className=\"h-6 w-6 text-gray-600\" />\n            </div>\n            <p className=\"text-lg font-medium text-gray-900 mb-1\">\n              {t('profile.avatar.uploadTitle')}\n            </p>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              {t('profile.avatar.uploadDescription')}\n            </p>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Camera className=\"h-4 w-4\" />\n              {t('profile.avatar.selectFile')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={acceptedTypes.join(',')}\n        onChange={handleFileInputChange}\n        className=\"hidden\"\n      />\n\n      {/* Error Display */}\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Upload Progress */}\n      {isUploading && (\n        <Card>\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center gap-3\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium mb-1\">\n                  {t('profile.avatar.uploading')}\n                </p>\n                <Progress value={uploadProgress} className=\"h-2\" />\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {Math.round(uploadProgress)}%\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Crop Dialog */}\n      <Dialog open={showCropDialog} onOpenChange={setShowCropDialog}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>{t('profile.avatar.cropTitle')}</DialogTitle>\n          </DialogHeader>\n\n          {previewUrl && (\n            <div className=\"space-y-4\">\n              {/* Simple crop preview (in production, use a proper cropping library) */}\n              <div className=\"flex justify-center\">\n                <div className=\"relative\">\n                  <img\n                    src={previewUrl}\n                    alt=\"Crop preview\"\n                    className=\"max-w-full max-h-96 object-contain\"\n                  />\n                  <div\n                    className=\"absolute border-2 border-blue-500 border-dashed\"\n                    style={{\n                      width: '200px',\n                      height: '200px',\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)'\n                    }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-center gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowCropDialog(false)}\n                >\n                  {t('common.cancel')}\n                </Button>\n                <Button\n                  onClick={() => {\n                    // In production, get cropped blob from cropping library\n                    fetch(previewUrl)\n                      .then(res => res.blob())\n                      .then(blob => handleUpload(blob));\n                  }}\n                  disabled={isUploading}\n                >\n                  {isUploading ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Check className=\"h-4 w-4\" />\n                  )}\n                  {t('profile.avatar.confirmCrop')}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Uploaded Image Info */}\n      {uploadedImage && (\n        <Card>\n          <CardContent className=\"py-3\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">{uploadedImage.name}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {formatFileSize(uploadedImage.size)} •\n                  {new Date(uploadedImage.uploadedAt).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/ProfileCompletion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipContent' is defined but never used.","line":24,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipTrigger' is defined but never used.","line":24,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":315,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":57}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CheckCircle2,\n  Circle,\n  AlertCircle,\n  Trophy,\n  Star,\n  Target,\n  TrendingUp,\n  Zap,\n  Award,\n  ChevronRight,\n  ExternalLink\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\nimport type { ProfileCompletion as ProfileCompletionType } from '@/types/profile';\n\ninterface ProfileCompletionProps {\n  completion: ProfileCompletionType;\n  onNavigateToSection?: (section: string) => void;\n  showTips?: boolean;\n  compact?: boolean;\n}\n\nconst COMPLETION_LEVELS = [\n  { threshold: 0, level: 'beginner', color: 'text-gray-600', bgColor: 'bg-gray-100', icon: Circle, title: '初级' },\n  { threshold: 25, level: 'starter', color: 'text-blue-600', bgColor: 'bg-blue-100', icon: Star, title: '入门' },\n  { threshold: 50, level: 'intermediate', color: 'text-purple-600', bgColor: 'bg-purple-100', icon: TrendingUp, title: '进阶' },\n  { threshold: 75, level: 'advanced', color: 'text-orange-600', bgColor: 'bg-orange-100', icon: Target, title: '高级' },\n  { threshold: 90, level: 'expert', color: 'text-green-600', bgColor: 'bg-green-100', icon: Trophy, title: '专家' },\n  { threshold: 100, level: 'master', color: 'text-yellow-600', bgColor: 'bg-yellow-100', icon: Award, title: '大师' }\n];\n\nconst SECTION_INFO = {\n  basicInfo: {\n    title: '基本信息',\n    description: '完善个人基本资料',\n    icon: '👤',\n    weight: 20,\n    tips: [\n      '上传清晰的头像照片',\n      '填写完整的个人简介',\n      '设置专业的职位头衔',\n      '添加地理位置信息'\n    ]\n  },\n  professionalInfo: {\n    title: '职业信息',\n    description: '展示您的专业背景',\n    icon: '💼',\n    weight: 15,\n    tips: [\n      '设置专业职位头衔',\n      '填写时薪或项目报价',\n      '说明您的可用状态',\n      '添加行业经验年限'\n    ]\n  },\n  contactInfo: {\n    title: '联系信息',\n    description: '方便客户联系您',\n    icon: '📞',\n    weight: 10,\n    tips: [\n      '验证邮箱地址',\n      '添加联系电话',\n      '设置时区信息',\n      '完善网站链接'\n    ]\n  },\n  skills: {\n    title: '技能专长',\n    description: '展示您的专业能力',\n    icon: '⚡',\n    weight: 15,\n    tips: [\n      '添加核心技能标签',\n      '设置技能熟练程度',\n      '说明技能使用年限',\n      '上传技能认证证书'\n    ]\n  },\n  experience: {\n    title: '工作经历',\n    description: '分享您的职业历程',\n    icon: '📋',\n    weight: 15,\n    tips: [\n      '添加相关工作经历',\n      '详细描述工作职责',\n      '说明工作成就',\n      '按时间倒序排列'\n    ]\n  },\n  education: {\n    title: '教育背景',\n    description: '展示您的学历信息',\n    icon: '🎓',\n    weight: 10,\n    tips: [\n      '添加最高学历',\n      '说明专业领域',\n      '上传学历证书',\n      '包含在校时间'\n    ]\n  },\n  portfolio: {\n    title: '作品集',\n    description: '展示您的最佳作品',\n    icon: '🎨',\n    weight: 10,\n    tips: [\n      '上传高质量作品',\n      '详细描述项目内容',\n          '添加使用技术标签',\n          '提供项目链接'\n    ]\n  },\n  socialMedia: {\n    title: '社交媒体',\n    description: '链接您的社交账号',\n    icon: '🔗',\n    weight: 5,\n    tips: [\n      '添加专业社交账号',\n      '链接作品集平台',\n      '验证社交媒体账号',\n      '保持账号活跃度'\n    ]\n  }\n};\n\nexport const ProfileCompletion: React.FC<ProfileCompletionProps> = ({\n  completion,\n  onNavigateToSection,\n  showTips = true,\n  compact = false\n}) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const getCurrentLevel = useCallback(() => {\n    return COMPLETION_LEVELS.reduce((prev, current) =>\n      completion.percentage >= current.threshold ? current : prev\n    );\n  }, [completion.percentage]);\n\n  const getRemainingPercentage = useCallback(() => {\n    const remainingSections = completion.incompleteSections.length;\n    if (remainingSections === 0) return 0;\n\n    const totalRemainingWeight = completion.incompleteSections.reduce((sum, section) => {\n      return sum + (SECTION_INFO[section as keyof typeof SECTION_INFO]?.weight || 0);\n    }, 0);\n\n    return Math.min(totalRemainingWeight, 100 - completion.percentage);\n  }, [completion]);\n\n  const getPrioritySuggestions = useCallback(() => {\n    return completion.suggestions\n      .filter(suggestion => suggestion.priority === 'high')\n      .slice(0, 3);\n  }, [completion.suggestions]);\n\n  const currentLevel = getCurrentLevel();\n  const remainingPercentage = getRemainingPercentage();\n  const prioritySuggestions = getPrioritySuggestions();\n\n  if (compact) {\n    return (\n      <Card className=\"border-blue-200\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              {React.createElement(currentLevel.icon, {\n                className: `h-8 w-8 ${currentLevel.color}`\n              })}\n              <div>\n                <div className=\"text-2xl font-bold\">{completion.percentage}%</div>\n                <div className=\"text-xs text-gray-600\">{currentLevel.title}</div>\n              </div>\n            </div>\n\n            <div className=\"flex-1\">\n              <Progress value={completion.percentage} className=\"h-2\" />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>完成度</span>\n                <span>{completion.completedSections.length}/{completion.completedSections.length + completion.incompleteSections.length}</span>\n              </div>\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\">\n              {t('profile.completion.improve')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        {/* Overview Card */}\n        <Card className=\"border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5 text-blue-600\" />\n              {t('profile.completion.title')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Main Progress */}\n            <div className=\"text-center space-y-4\">\n              <div className=\"relative inline-flex items-center justify-center\">\n                <div className=\"w-32 h-32 rounded-full border-8 border-gray-200\">\n                  <div\n                    className=\"w-32 h-32 rounded-full border-8 border-blue-600 border-t-transparent border-r-transparent transform -rotate-45\"\n                    style={{\n                      borderRightColor: 'transparent',\n                      borderTopColor: 'transparent',\n                      borderBottomColor: completion.percentage > 50 ? '#2563eb' : 'transparent',\n                      borderLeftColor: completion.percentage > 75 ? '#2563eb' : 'transparent',\n                      transform: `rotate(${(completion.percentage / 100) * 360 - 45}deg)`\n                    }}\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-gray-900\">\n                        {completion.percentage}%\n                      </div>\n                      <div className=\"text-sm text-gray-600\">{currentLevel.title}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold\">\n                  {t('profile.completion.currentLevel', { level: currentLevel.title })}\n                </h3>\n                <p className=\"text-gray-600\">\n                  {t('profile.completion.sectionsCompleted', {\n                    completed: completion.completedSections.length,\n                    total: completion.completedSections.length + completion.incompleteSections.length\n                  })}\n                </p>\n              </div>\n\n              <div className=\"w-full max-w-md mx-auto\">\n                <Progress value={completion.percentage} className=\"h-3\" />\n                <div className=\"flex justify-between text-sm text-gray-500 mt-2\">\n                  <span>{t('profile.completion.started')}</span>\n                  <span>{t('profile.completion.almostDone')}</span>\n                  <span>{t('profile.completion.completed')}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div className=\"p-3 bg-green-50 rounded-lg\">\n                <CheckCircle2 className=\"h-6 w-6 text-green-600 mx-auto mb-1\" />\n                <div className=\"text-xl font-bold text-green-600\">\n                  {completion.completedSections.length}\n                </div>\n                <div className=\"text-xs text-gray-600\">{t('profile.completion.completed')}</div>\n              </div>\n              <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                <AlertCircle className=\"h-6 w-6 text-yellow-600 mx-auto mb-1\" />\n                <div className=\"text-xl font-bold text-yellow-600\">\n                  {completion.incompleteSections.length}\n                </div>\n                <div className=\"text-xs text-gray-600\">{t('profile.completion.remaining')}</div>\n              </div>\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <Zap className=\"h-6 w-6 text-blue-600 mx-auto mb-1\" />\n                <div className=\"text-xl font-bold text-blue-600\">\n                  {remainingPercentage}%\n                </div>\n                <div className=\"text-xs text-gray-600\">{t('profile.completion.potential')}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Detailed Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">{t('profile.completion.tabs.overview')}</TabsTrigger>\n            <TabsTrigger value=\"suggestions\">{t('profile.completion.tabs.suggestions')}</TabsTrigger>\n            <TabsTrigger value=\"sections\">{t('profile.completion.tabs.sections')}</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid gap-4\">\n              {/* Level Progress */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{t('profile.completion.levelProgress')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {COMPLETION_LEVELS.map((level, index) => {\n                      const Icon = level.icon;\n                      const isUnlocked = completion.percentage >= level.threshold;\n                      const isCurrent = currentLevel.threshold === level.threshold;\n\n                      return (\n                        <div\n                          key={level.level}\n                          className={`flex items-center gap-3 p-3 rounded-lg ${\n                            isCurrent ? 'bg-blue-50 border border-blue-200' :\n                            isUnlocked ? 'bg-green-50' : 'bg-gray-50'\n                          }`}\n                        >\n                          <Icon\n                            className={`h-6 w-6 ${\n                              isUnlocked ? 'text-green-600' : 'text-gray-400'\n                            }`}\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{level.title}</div>\n                            <div className=\"text-sm text-gray-600\">\n                              {t('profile.completion.levelRequirements', { threshold: level.threshold })}\n                            </div>\n                          </div>\n                          {isUnlocked && (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                          )}\n                          {isCurrent && (\n                            <Badge variant=\"default\">{t('profile.completion.current')}</Badge>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Priority Suggestions */}\n              {prioritySuggestions.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n                      {t('profile.completion.priorityActions')}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {prioritySuggestions.map((suggestion, index) => (\n                        <Alert key={index} className=\"border-yellow-200 bg-yellow-50\">\n                          <AlertCircle className=\"h-4 w-4\" />\n                          <AlertDescription className=\"flex items-center justify-between\">\n                            <span>{suggestion.message}</span>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => onNavigateToSection?.(suggestion.section)}\n                            >\n                              {t('profile.completion.improve')}\n                              <ChevronRight className=\"h-4 w-4 ml-1\" />\n                            </Button>\n                          </AlertDescription>\n                        </Alert>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Suggestions Tab */}\n          <TabsContent value=\"suggestions\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">{t('profile.completion.suggestions.title')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {completion.suggestions.length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Trophy className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                      <h3 className=\"text-lg font-medium mb-1\">\n                        {t('profile.completion.suggestions.noSuggestions')}\n                      </h3>\n                      <p className=\"text-sm\">{t('profile.completion.suggestions.profileComplete')}</p>\n                    </div>\n                  ) : (\n                    completion.suggestions.map((suggestion, index) => (\n                      <div\n                        key={index}\n                        className=\"p-4 border rounded-lg hover:shadow-md transition-shadow\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <Badge\n                                variant={\n                                  suggestion.priority === 'high' ? 'destructive' :\n                                  suggestion.priority === 'medium' ? 'default' : 'secondary'\n                                }\n                              >\n                                {t(`profile.completion.suggestions.priority.${suggestion.priority}`)}\n                              </Badge>\n                              <span className=\"text-sm text-gray-600\">\n                                {SECTION_INFO[suggestion.section as keyof typeof SECTION_INFO]?.title}\n                              </span>\n                            </div>\n                            <p className=\"text-gray-700 mb-2\">{suggestion.message}</p>\n                            {showTips && (\n                              <div className=\"text-xs text-gray-500\">\n                                {t('profile.completion.suggestions.impact')} +{SECTION_INFO[suggestion.section as keyof typeof SECTION_INFO]?.weight}%\n                              </div>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => onNavigateToSection?.(suggestion.section)}\n                          >\n                            {t('profile.completion.improve')}\n                          </Button>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sections Tab */}\n          <TabsContent value=\"sections\" className=\"space-y-6\">\n            <div className=\"grid gap-4\">\n              {Object.entries(SECTION_INFO).map(([sectionKey, info]) => {\n                const isCompleted = completion.completedSections.includes(sectionKey);\n                const isIncomplete = completion.incompleteSections.includes(sectionKey);\n\n                return (\n                  <Card key={sectionKey} className={`${\n                      isCompleted ? 'border-green-200 bg-green-50' :\n                      isIncomplete ? 'border-yellow-200 bg-yellow-50' :\n                      'border-gray-200'\n                    }`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-2xl\">{info.icon}</div>\n                          <div>\n                            <h3 className=\"font-semibold\">{info.title}</h3>\n                            <p className=\"text-sm text-gray-600\">{info.description}</p>\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              {t('profile.completion.sections.weight')}: +{info.weight}%\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-2\">\n                          {isCompleted && (\n                            <Badge variant=\"default\" className=\"bg-green-600\">\n                              <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                              {t('profile.completion.sections.completed')}\n                            </Badge>\n                          )}\n                          {isIncomplete && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => onNavigateToSection?.(sectionKey)}\n                            >\n                              {t('profile.completion.sections.complete')}\n                              <ChevronRight className=\"h-4 w-4 ml-1\" />\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Tips */}\n                      {showTips && isIncomplete && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                          <div className=\"text-sm font-medium mb-2\">\n                            {t('profile.completion.sections.tips')}:\n                          </div>\n                          <ul className=\"text-xs text-gray-600 space-y-1\">\n                            {info.tips.slice(0, 3).map((tip, tipIndex) => (\n                              <li key={tipIndex} className=\"flex items-start gap-1\">\n                                <span className=\"text-blue-600 mt-0.5\">•</span>\n                                <span>{tip}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Tips Section */}\n        {showTips && completion.percentage < 100 && (\n          <Alert>\n            <Trophy className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"space-y-2\">\n                <p className=\"font-medium\">{t('profile.completion.tips.title')}:</p>\n                <ul className=\"space-y-1 text-sm\">\n                  <li>• {t('profile.completion.tips.beSpecific')}</li>\n                  <li>• {t('profile.completion.tips.showcaseBest')}</li>\n                  <li>• {t('profile.completion.tips.keepUpdated')}</li>\n                  <li>• {t('profile.completion.tips.addMedia')}</li>\n                </ul>\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/SkillsManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronUp' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":30,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":30,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":30,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showVerification' is assigned a value but never used.","line":94,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAddingSkill' is assigned a value but never used.","line":98,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsAddingSkill' is assigned a value but never used.","line":98,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":41},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":133,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":133,"endColumn":87,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4292,4428],"text":"{ const levelOrder = { beginner: 1, intermediate: 2, advanced: 3, expert: 4 };\n          return levelOrder[b.level] - levelOrder[a.level]; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5723,5726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5723,5726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleReorderSkills' is assigned a value but never used.","line":216,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":306,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10444,10447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10444,10447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":409,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15251,15254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15251,15254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":433,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":433,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21486,21489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21486,21489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Plus,\n  X,\n  Star,\n  Clock,\n  Award,\n  Search,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  GripVertical,\n  Edit2,\n  Trash2,\n  Check,\n  AlertCircle,\n  Zap\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from 'sonner';\n\nimport type { SkillItem, SkillCategory } from '@/types/profile';\n\ninterface SkillsManagerProps {\n  skills: SkillItem[];\n  onChange: (skills: SkillItem[]) => void;\n  maxSkills?: number;\n  showVerification?: boolean;\n  enableReordering?: boolean;\n}\n\nconst SKILL_CATEGORIES: SkillCategory[] = [\n  {\n    id: 'programming',\n    name: 'Programming',\n    skills: ['JavaScript', 'Python', 'Java', 'TypeScript', 'React', 'Node.js', 'Vue.js', 'Angular', 'Go', 'Rust'],\n    icon: '💻'\n  },\n  {\n    id: 'design',\n    name: 'Design',\n    skills: ['UI/UX', 'Photoshop', 'Figma', 'Sketch', 'Illustrator', 'Adobe XD', 'InDesign', 'After Effects'],\n    icon: '🎨'\n  },\n  {\n    id: 'marketing',\n    name: 'Marketing',\n    skills: ['SEO', 'SEM', 'Content Marketing', 'Social Media', 'Email Marketing', 'Google Analytics', 'Facebook Ads'],\n    icon: '📈'\n  },\n  {\n    id: 'writing',\n    name: 'Writing',\n    skills: ['Technical Writing', 'Copywriting', 'Content Writing', 'Blog Writing', 'Grant Writing', 'Resume Writing'],\n    icon: '✍️'\n  },\n  {\n    id: 'business',\n    name: 'Business',\n    skills: ['Project Management', 'Business Analysis', 'Data Analysis', 'Market Research', 'Strategic Planning', 'Consulting'],\n    icon: '💼'\n  },\n  {\n    id: 'language',\n    name: 'Languages',\n    skills: ['English', 'Mandarin', 'Spanish', 'French', 'German', 'Japanese', 'Korean', 'Arabic'],\n    icon: '🌍'\n  }\n];\n\nconst PROFICIENCY_LEVELS = [\n  { value: 'beginner', label: 'Beginner', color: 'bg-gray-500', description: 'Just starting out' },\n  { value: 'intermediate', label: 'Intermediate', color: 'bg-blue-500', description: 'Comfortable with basic tasks' },\n  { value: 'advanced', label: 'Advanced', color: 'bg-purple-500', description: 'Can handle complex projects' },\n  { value: 'expert', label: 'Expert', color: 'bg-yellow-500', description: 'Mastery level' }\n] as const;\n\nexport const SkillsManager: React.FC<SkillsManagerProps> = ({\n  skills,\n  onChange,\n  maxSkills = 20,\n  showVerification = true,\n  enableReordering = true\n}) => {\n  const { t } = useTranslation();\n  const [isAddingSkill, setIsAddingSkill] = useState(false);\n  const [editingSkill, setEditingSkill] = useState<SkillItem | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'level' | 'experience'>('name');\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [newSkill, setNewSkill] = useState<Partial<SkillItem>>({\n    name: '',\n    category: 'programming',\n    level: 'intermediate',\n    yearsExperience: 1,\n    isVerified: false\n  });\n\n  const filteredAndSortedSkills = useMemo(() => {\n    let filtered = skills;\n\n    // Filter by search term\n    if (searchTerm) {\n      filtered = filtered.filter(skill =>\n        skill.name.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(skill => skill.category === selectedCategory);\n    }\n\n    // Sort\n    return [...filtered].sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'level':\n          const levelOrder = { beginner: 1, intermediate: 2, advanced: 3, expert: 4 };\n          return levelOrder[b.level] - levelOrder[a.level];\n        case 'experience':\n          return b.yearsExperience - a.yearsExperience;\n        default:\n          return 0;\n      }\n    });\n  }, [skills, searchTerm, selectedCategory, sortBy]);\n\n  const skillStats = useMemo(() => {\n    const stats = {\n      total: skills.length,\n      verified: skills.filter(s => s.isVerified).length,\n      expert: skills.filter(s => s.level === 'expert').length,\n      advanced: skills.filter(s => s.level === 'advanced').length,\n      categories: {} as Record<string, number>\n    };\n\n    skills.forEach(skill => {\n      stats.categories[skill.category] = (stats.categories[skill.category] || 0) + 1;\n    });\n\n    return stats;\n  }, [skills]);\n\n  const handleAddSkill = useCallback(() => {\n    if (!newSkill.name?.trim()) {\n      toast.error(t('profile.skills.nameRequired'));\n      return;\n    }\n\n    if (skills.some(s => s.name.toLowerCase() === newSkill.name!.toLowerCase())) {\n      toast.error(t('profile.skills.alreadyExists'));\n      return;\n    }\n\n    if (skills.length >= maxSkills) {\n      toast.error(t('profile.skills.maxReached', { max: maxSkills }));\n      return;\n    }\n\n    const skill: SkillItem = {\n      id: Date.now().toString(),\n      name: newSkill.name!,\n      category: newSkill.category || 'programming',\n      level: newSkill.level as any,\n      yearsExperience: newSkill.yearsExperience || 1,\n      isVerified: false\n    };\n\n    onChange([...skills, skill]);\n    setNewSkill({\n      name: '',\n      category: 'programming',\n      level: 'intermediate',\n      yearsExperience: 1,\n      isVerified: false\n    });\n    setShowAddDialog(false);\n    toast.success(t('profile.skills.added'));\n  }, [newSkill, skills, onChange, maxSkills, t]);\n\n  const handleUpdateSkill = useCallback(() => {\n    if (!editingSkill || !editingSkill.name?.trim()) {\n      toast.error(t('profile.skills.nameRequired'));\n      return;\n    }\n\n    const updatedSkills = skills.map(skill =>\n      skill.id === editingSkill.id ? editingSkill : skill\n    );\n    onChange(updatedSkills);\n    setEditingSkill(null);\n    toast.success(t('profile.skills.updated'));\n  }, [editingSkill, skills, onChange, t]);\n\n  const handleDeleteSkill = useCallback((skillId: string) => {\n    const updatedSkills = skills.filter(skill => skill.id !== skillId);\n    onChange(updatedSkills);\n    toast.success(t('profile.skills.deleted'));\n  }, [skills, onChange, t]);\n\n  const handleReorderSkills = useCallback((dragIndex: number, dropIndex: number) => {\n    if (!enableReordering) return;\n\n    const reorderedSkills = [...filteredAndSortedSkills];\n    const [removed] = reorderedSkills.splice(dragIndex, 1);\n    reorderedSkills.splice(dropIndex, 0, removed);\n    onChange(reorderedSkills);\n  }, [filteredAndSortedSkills, onChange, enableReordering]);\n\n  const getProficiencyBadge = (level: string) => {\n    const proficiency = PROFICIENCY_LEVELS.find(p => p.value === level);\n    return proficiency ? (\n      <Badge variant=\"secondary\" className={`${proficiency.color} text-white`}>\n        {proficiency.label}\n      </Badge>\n    ) : null;\n  };\n\n  const getExperienceColor = (years: number) => {\n    if (years >= 10) return 'text-purple-600';\n    if (years >= 5) return 'text-blue-600';\n    if (years >= 2) return 'text-green-600';\n    return 'text-gray-600';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              {t('profile.skills.title')}\n              <Badge variant=\"outline\">{skillStats.total}</Badge>\n            </CardTitle>\n\n            <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n              <DialogTrigger asChild>\n                <Button\n                  disabled={skills.length >= maxSkills}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  {t('profile.skills.add')}\n                </Button>\n              </DialogTrigger>\n\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>{t('profile.skills.addNew')}</DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"skillName\">{t('profile.skills.name')}</Label>\n                    <Input\n                      id=\"skillName\"\n                      value={newSkill.name || ''}\n                      onChange={(e) => setNewSkill({ ...newSkill, name: e.target.value })}\n                      placeholder={t('profile.skills.name.placeholder')}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>{t('profile.skills.category')}</Label>\n                    <Select\n                      value={newSkill.category}\n                      onValueChange={(value) => setNewSkill({ ...newSkill, category: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {SKILL_CATEGORIES.map(category => (\n                          <SelectItem key={category.id} value={category.id}>\n                            <span className=\"flex items-center gap-2\">\n                              <span>{category.icon}</span>\n                              {category.name}\n                            </span>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>{t('profile.skills.level')}</Label>\n                    <Select\n                      value={newSkill.level}\n                      onValueChange={(value) => setNewSkill({ ...newSkill, level: value as any })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {PROFICIENCY_LEVELS.map(level => (\n                          <SelectItem key={level.value} value={level.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <Star className=\"h-4 w-4\" />\n                              <div>\n                                <div className=\"font-medium\">{level.label}</div>\n                                <div className=\"text-xs text-gray-500\">{level.description}</div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"yearsExperience\">{t('profile.skills.experience')}</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <Input\n                        id=\"yearsExperience\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"50\"\n                        value={newSkill.yearsExperience || 1}\n                        onChange={(e) => setNewSkill({ ...newSkill, yearsExperience: parseInt(e.target.value) || 1 })}\n                        className=\"w-20\"\n                      />\n                      <span className=\"text-sm text-gray-600\">{t('profile.skills.years')}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                      {t('common.cancel')}\n                    </Button>\n                    <Button onClick={handleAddSkill}>\n                      {t('common.add')}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-gray-900\">{skillStats.total}</div>\n              <div className=\"text-sm text-gray-600\">{t('profile.skills.stats.total')}</div>\n            </div>\n            <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">{skillStats.verified}</div>\n              <div className=\"text-sm text-gray-600\">{t('profile.skills.stats.verified')}</div>\n            </div>\n            <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">{skillStats.expert}</div>\n              <div className=\"text-sm text-gray-600\">{t('profile.skills.stats.expert')}</div>\n            </div>\n            <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">{skillStats.advanced}</div>\n              <div className=\"text-sm text-gray-600\">{t('profile.skills.stats.advanced')}</div>\n            </div>\n          </div>\n\n          {/* Filters and Search */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder={t('profile.skills.search')}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder={t('profile.skills.filterCategory')} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">{t('profile.skills.allCategories')}</SelectItem>\n                {SKILL_CATEGORIES.map(category => (\n                  <SelectItem key={category.id} value={category.id}>\n                    <span className=\"flex items-center gap-2\">\n                      <span>{category.icon}</span>\n                      {category.name}\n                    </span>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"name\">{t('profile.skills.sortByName')}</SelectItem>\n                <SelectItem value=\"level\">{t('profile.skills.sortByLevel')}</SelectItem>\n                <SelectItem value=\"experience\">{t('profile.skills.sortByExperience')}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Skills List */}\n          {filteredAndSortedSkills.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Zap className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">{t('profile.skills.noSkills')}</h3>\n              <p className=\"text-sm mb-4\">{t('profile.skills.noSkills.description')}</p>\n              <Button onClick={() => setShowAddDialog(true)}>\n                {t('profile.skills.addFirst')}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredAndSortedSkills.map((skill, index) => (\n                <Card key={skill.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-4\">\n                      {enableReordering && (\n                        <div className=\"cursor-grab active:cursor-grabbing\">\n                          <GripVertical className=\"h-5 w-5 text-gray-400\" />\n                        </div>\n                      )}\n\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-medium text-gray-900\">{skill.name}</h3>\n                          {getProficiencyBadge(skill.level)}\n                          {skill.isVerified && (\n                            <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                              <Award className=\"h-3 w-3 mr-1\" />\n                              {t('profile.skills.verified')}\n                            </Badge>\n                          )}\n                        </div>\n\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span className={getExperienceColor(skill.yearsExperience)}>\n                              {skill.yearsExperience} {t('profile.skills.years')}\n                            </span>\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <span>{SKILL_CATEGORIES.find(c => c.id === skill.category)?.icon}</span>\n                            <span>{SKILL_CATEGORIES.find(c => c.id === skill.category)?.name}</span>\n                          </span>\n                        </div>\n\n                        {/* Experience Progress Bar */}\n                        <div className=\"mt-2\">\n                          <Progress\n                            value={Math.min((skill.yearsExperience / 10) * 100, 100)}\n                            className=\"h-1\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setEditingSkill(skill)}\n                        >\n                          <Edit2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteSkill(skill.id)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Skill Dialog */}\n      {editingSkill && (\n        <Dialog open={!!editingSkill} onOpenChange={() => setEditingSkill(null)}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{t('profile.skills.editSkill')}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editSkillName\">{t('profile.skills.name')}</Label>\n                <Input\n                  id=\"editSkillName\"\n                  value={editingSkill.name}\n                  onChange={(e) => setEditingSkill({ ...editingSkill, name: e.target.value })}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>{t('profile.skills.category')}</Label>\n                <Select\n                  value={editingSkill.category}\n                  onValueChange={(value) => setEditingSkill({ ...editingSkill, category: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {SKILL_CATEGORIES.map(category => (\n                      <SelectItem key={category.id} value={category.id}>\n                        <span className=\"flex items-center gap-2\">\n                          <span>{category.icon}</span>\n                          {category.name}\n                        </span>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>{t('profile.skills.level')}</Label>\n                <Select\n                  value={editingSkill.level}\n                  onValueChange={(value) => setEditingSkill({ ...editingSkill, level: value as any })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {PROFICIENCY_LEVELS.map(level => (\n                      <SelectItem key={level.value} value={level.value}>\n                        {level.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editYearsExperience\">{t('profile.skills.experience')}</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"editYearsExperience\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    value={editingSkill.yearsExperience}\n                    onChange={(e) => setEditingSkill({ ...editingSkill, yearsExperience: parseInt(e.target.value) || 1 })}\n                    className=\"w-20\"\n                  />\n                  <span className=\"text-sm text-gray-600\">{t('profile.skills.years')}</span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setEditingSkill(null)}>\n                  {t('common.cancel')}\n                </Button>\n                <Button onClick={handleUpdateSkill}>\n                  {t('common.save')}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Tips */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.skills.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.skills.tips.beSpecific')}</li>\n              <li>• {t('profile.skills.tips.showProgression')}</li>\n              <li>• {t('profile.skills.tips.relevantSkills')}</li>\n              <li>• {t('profile.skills.tips.verifySkills')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/SocialMediaLinks.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Music' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showVerification' is assigned a value but never used.","line":151,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":202,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":202,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5554,5665],"text":"{ const linkedinMatch = pathname.match(/\\/in\\/([\\w-]+)/);\n          return linkedinMatch ? linkedinMatch[1] : ''; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":206,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":206,"endColumn":60,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5700,5801],"text":"{ const githubMatch = pathname.match(/\\/([\\w-]+)/);\n          return githubMatch ? githubMatch[1] : ''; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":213,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":213,"endColumn":60,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5912,6013],"text":"{ const socialMatch = pathname.match(/\\/([\\w-]+)/);\n          return socialMatch ? socialMatch[1] : ''; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":217,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":217,"endColumn":79,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6049,6171],"text":"{ const youtubeMatch = pathname.match(/\\/(channel\\/|c\\/|@)?([\\w-]+)/);\n          return youtubeMatch ? youtubeMatch[2] : ''; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":221,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":221,"endColumn":59,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6205,6303],"text":"{ const weiboMatch = pathname.match(/\\/([\\w-]+)/);\n          return weiboMatch ? weiboMatch[1] : ''; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7113,7116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7113,7116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Share2,\n  Plus,\n  X,\n  Edit2,\n  Trash2,\n  ExternalLink,\n  Check,\n  AlertCircle,\n  Globe,\n  Github,\n  Linkedin,\n  Twitter,\n  Instagram,\n  Youtube,\n  MessageCircle,\n  Camera,\n  Music,\n  Gamepad2\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { toast } from 'sonner';\n\nimport type { SocialMediaLink } from '@/types/profile';\n\ninterface SocialMediaLinksProps {\n  socialLinks: SocialMediaLink[];\n  onChange: (socialLinks: SocialMediaLink[]) => void;\n  maxLinks?: number;\n  showVerification?: boolean;\n  enableVisibilityControl?: boolean;\n}\n\nconst SOCIAL_PLATFORMS = [\n  {\n    id: 'linkedin',\n    name: 'LinkedIn',\n    icon: Linkedin,\n    color: 'bg-blue-600',\n    placeholder: 'https://linkedin.com/in/username',\n    pattern: /^https?:\\/\\/(www\\.)?linkedin\\.com\\/in\\/[\\w-]+\\/?$/,\n    description: 'Professional networking platform'\n  },\n  {\n    id: 'github',\n    name: 'GitHub',\n    icon: Github,\n    color: 'bg-gray-800',\n    placeholder: 'https://github.com/username',\n    pattern: /^https?:\\/\\/(www\\.)?github\\.com\\/[\\w-]+\\/?$/,\n    description: 'Code repository platform'\n  },\n  {\n    id: 'twitter',\n    name: 'Twitter',\n    icon: Twitter,\n    color: 'bg-sky-500',\n    placeholder: 'https://twitter.com/username',\n    pattern: /^https?:\\/\\/(www\\.)?twitter\\.com\\/[\\w-]+\\/?$/,\n    description: 'Microblogging platform'\n  },\n  {\n    id: 'instagram',\n    name: 'Instagram',\n    icon: Instagram,\n    color: 'bg-pink-600',\n    placeholder: 'https://instagram.com/username',\n    pattern: /^https?:\\/\\/(www\\.)?instagram\\.com\\/[\\w-]+\\/?$/,\n    description: 'Photo and video sharing'\n  },\n  {\n    id: 'youtube',\n    name: 'YouTube',\n    icon: Youtube,\n    color: 'bg-red-600',\n    placeholder: 'https://youtube.com/channel/username',\n    pattern: /^https?:\\/\\/(www\\.)?youtube\\.com\\/(channel\\/|c\\/|@)?[\\w-]+\\/?$/,\n    description: 'Video sharing platform'\n  },\n  {\n    id: 'behance',\n    name: 'Behance',\n    icon: Camera,\n    color: 'bg-blue-500',\n    placeholder: 'https://behance.net/username',\n    pattern: /^https?:\\/\\/(www\\.)?behance\\.net\\/[\\w-]+\\/?$/,\n    description: 'Creative portfolio platform'\n  },\n  {\n    id: 'dribbble',\n    name: 'Dribbble',\n    icon: Gamepad2,\n    color: 'bg-pink-500',\n    placeholder: 'https://dribbble.com/username',\n    pattern: /^https?:\\/\\/(www\\.)?dribbble\\.com\\/[\\w-]+\\/?$/,\n    description: 'Design showcase platform'\n  },\n  {\n    id: 'wechat',\n    name: '微信',\n    icon: MessageCircle,\n    color: 'bg-green-600',\n    placeholder: 'WeChat ID or QR code image',\n    pattern: null, // Custom validation for WeChat\n    description: 'Chinese messaging app'\n  },\n  {\n    id: 'weibo',\n    name: '微博',\n    icon: Camera,\n    color: 'bg-red-500',\n    placeholder: 'https://weibo.com/username',\n    pattern: /^https?:\\/\\/(www\\.)?weibo\\.com\\/[\\w-]+\\/?$/,\n    description: 'Chinese microblogging platform'\n  },\n  {\n    id: 'qq',\n    name: 'QQ',\n    icon: MessageCircle,\n    color: 'bg-blue-500',\n    placeholder: 'QQ number',\n    pattern: /^\\d{5,11}$/,\n    description: 'Chinese messaging app'\n  },\n  {\n    id: 'website',\n    name: 'Personal Website',\n    icon: Globe,\n    color: 'bg-purple-600',\n    placeholder: 'https://yourwebsite.com',\n    pattern: /^https?:\\/\\/.+\\..+/,\n    description: 'Personal portfolio or website'\n  }\n];\n\nexport const SocialMediaLinks: React.FC<SocialMediaLinksProps> = ({\n  socialLinks,\n  onChange,\n  maxLinks = 10,\n  showVerification = false,\n  enableVisibilityControl = true\n}) => {\n  const { t } = useTranslation();\n  const [isAddingLink, setIsAddingLink] = useState(false);\n  const [editingLink, setEditingLink] = useState<SocialMediaLink | null>(null);\n  const [newLink, setNewLink] = useState<Partial<SocialMediaLink>>({\n    platform: 'github',\n    url: '',\n    username: '',\n    followers: 0,\n    isVerified: false\n  });\n\n  const validateSocialLink = useCallback((platform: string, url: string): boolean => {\n    const platformConfig = SOCIAL_PLATFORMS.find(p => p.id === platform);\n    if (!platformConfig) return false;\n\n    if (platform === 'wechat' || platform === 'qq') {\n      // Custom validation for WeChat and QQ\n      return url.trim().length > 0;\n    }\n\n    if (platformConfig.pattern) {\n      return platformConfig.pattern.test(url);\n    }\n\n    // Basic URL validation for other platforms\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }, []);\n\n  const extractUsername = useCallback((platform: string, url: string): string => {\n    const platformConfig = SOCIAL_PLATFORMS.find(p => p.id === platform);\n    if (!platformConfig) return '';\n\n    if (platform === 'wechat' || platform === 'qq') {\n      return url.trim(); // For WeChat ID or QQ number\n    }\n\n    try {\n      const urlObj = new URL(url);\n      const pathname = urlObj.pathname;\n\n      // Extract username from different URL patterns\n      switch (platform) {\n        case 'linkedin':\n          const linkedinMatch = pathname.match(/\\/in\\/([\\w-]+)/);\n          return linkedinMatch ? linkedinMatch[1] : '';\n\n        case 'github':\n          const githubMatch = pathname.match(/\\/([\\w-]+)/);\n          return githubMatch ? githubMatch[1] : '';\n\n        case 'twitter':\n        case 'instagram':\n        case 'behance':\n        case 'dribbble':\n          const socialMatch = pathname.match(/\\/([\\w-]+)/);\n          return socialMatch ? socialMatch[1] : '';\n\n        case 'youtube':\n          const youtubeMatch = pathname.match(/\\/(channel\\/|c\\/|@)?([\\w-]+)/);\n          return youtubeMatch ? youtubeMatch[2] : '';\n\n        case 'weibo':\n          const weiboMatch = pathname.match(/\\/([\\w-]+)/);\n          return weiboMatch ? weiboMatch[1] : '';\n\n        default:\n          return '';\n      }\n    } catch {\n      return '';\n    }\n  }, []);\n\n  const handleAddLink = useCallback(() => {\n    if (!newLink.url?.trim()) {\n      toast.error(t('profile.social.urlRequired'));\n      return;\n    }\n\n    if (!validateSocialLink(newLink.platform!, newLink.url)) {\n      toast.error(t('profile.social.invalidUrl'));\n      return;\n    }\n\n    if (socialLinks.some(link => link.platform === newLink.platform)) {\n      toast.error(t('profile.social.platformExists'));\n      return;\n    }\n\n    if (socialLinks.length >= maxLinks) {\n      toast.error(t('profile.social.maxReached', { max: maxLinks }));\n      return;\n    }\n\n    const username = extractUsername(newLink.platform!, newLink.url);\n\n    const socialLink: SocialMediaLink = {\n      platform: newLink.platform as any,\n      url: newLink.url!,\n      username: username || newLink.username || '',\n      followers: newLink.followers || 0,\n      isVerified: newLink.isVerified || false\n    };\n\n    onChange([...socialLinks, socialLink]);\n    setNewLink({\n      platform: 'github',\n      url: '',\n      username: '',\n      followers: 0,\n      isVerified: false\n    });\n    setIsAddingLink(false);\n    toast.success(t('profile.social.linkAdded'));\n  }, [newLink, socialLinks, onChange, maxLinks, validateSocialLink, extractUsername, t]);\n\n  const handleUpdateLink = useCallback(() => {\n    if (!editingLink || !editingLink.url?.trim()) {\n      toast.error(t('profile.social.urlRequired'));\n      return;\n    }\n\n    if (!validateSocialLink(editingLink.platform, editingLink.url)) {\n      toast.error(t('profile.social.invalidUrl'));\n      return;\n    }\n\n    const username = extractUsername(editingLink.platform, editingLink.url);\n    const updatedLink = {\n      ...editingLink,\n      username: username || editingLink.username\n    };\n\n    const updatedLinks = socialLinks.map(link =>\n      link.platform === editingLink.platform ? updatedLink : link\n    );\n    onChange(updatedLinks);\n    setEditingLink(null);\n    toast.success(t('profile.social.linkUpdated'));\n  }, [editingLink, socialLinks, onChange, validateSocialLink, extractUsername, t]);\n\n  const handleDeleteLink = useCallback((platform: string) => {\n    const updatedLinks = socialLinks.filter(link => link.platform !== platform);\n    onChange(updatedLinks);\n    toast.success(t('profile.social.linkDeleted'));\n  }, [socialLinks, onChange, t]);\n\n  const getPlatformIcon = (platform: string) => {\n    const platformConfig = SOCIAL_PLATFORMS.find(p => p.id === platform);\n    return platformConfig ? platformConfig.icon : Globe;\n  };\n\n  const getPlatformInfo = (platform: string) => {\n    return SOCIAL_PLATFORMS.find(p => p.id === platform) || {\n      name: platform,\n      icon: Globe,\n      color: 'bg-gray-600',\n      placeholder: '',\n      pattern: null,\n      description: ''\n    };\n  };\n\n  const getDisplayUrl = (url: string, platform: string) => {\n    if (platform === 'wechat' || platform === 'qq') {\n      return url;\n    }\n\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname + urlObj.pathname;\n    } catch {\n      return url;\n    }\n  };\n\n  const availablePlatforms = SOCIAL_PLATFORMS.filter(\n    platform => !socialLinks.some(link => link.platform === platform.id)\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Share2 className=\"h-5 w-5\" />\n              {t('profile.social.title')}\n              <Badge variant=\"outline\">{socialLinks.length}</Badge>\n            </CardTitle>\n\n            <Dialog open={isAddingLink} onOpenChange={setIsAddingLink}>\n              <DialogTrigger asChild>\n                <Button\n                  disabled={socialLinks.length >= maxLinks || availablePlatforms.length === 0}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  {t('profile.social.addLink')}\n                </Button>\n              </DialogTrigger>\n\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>{t('profile.social.addNewLink')}</DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>{t('profile.social.platform')}</Label>\n                    <Select\n                      value={newLink.platform}\n                      onValueChange={(value) => setNewLink({ ...newLink, platform: value, url: '' })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availablePlatforms.map(platform => {\n                          const Icon = platform.icon;\n                          return (\n                            <SelectItem key={platform.id} value={platform.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <Icon className=\"h-4 w-4\" />\n                                <span>{platform.name}</span>\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                    {newLink.platform && (\n                      <p className=\"text-xs text-gray-500\">\n                        {getPlatformInfo(newLink.platform).description}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"url\">{t('profile.social.url')}</Label>\n                    <Input\n                      id=\"url\"\n                      value={newLink.url || ''}\n                      onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}\n                      placeholder={getPlatformInfo(newLink.platform || '').placeholder}\n                    />\n                    <p className=\"text-xs text-gray-500\">\n                      {t('profile.social.urlHelp')}\n                    </p>\n                  </div>\n\n                  {enableVisibilityControl && (\n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        id=\"showFollowers\"\n                        checked={newLink.followers !== undefined}\n                        onCheckedChange={(checked) =>\n                          setNewLink({ ...newLink, followers: checked ? 0 : undefined })\n                        }\n                      />\n                      <Label htmlFor=\"showFollowers\" className=\"text-sm\">\n                        {t('profile.social.showFollowers')}\n                      </Label>\n                    </div>\n                  )}\n\n                  {newLink.followers !== undefined && (\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"followers\">{t('profile.social.followers')}</Label>\n                      <Input\n                        id=\"followers\"\n                        type=\"number\"\n                        min=\"0\"\n                        value={newLink.followers}\n                        onChange={(e) => setNewLink({ ...newLink, followers: parseInt(e.target.value) || 0 })}\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsAddingLink(false)}>\n                      {t('common.cancel')}\n                    </Button>\n                    <Button onClick={handleAddLink}>\n                      {t('common.add')}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {socialLinks.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Share2 className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">{t('profile.social.noLinks')}</h3>\n              <p className=\"text-sm mb-4\">{t('profile.social.noLinks.description')}</p>\n              <Button onClick={() => setIsAddingLink(true)}>\n                {t('profile.social.addFirstLink')}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {socialLinks.map(link => {\n                const platformInfo = getPlatformInfo(link.platform);\n                const Icon = platformInfo.icon;\n\n                return (\n                  <Card key={link.platform} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-4\">\n                        {/* Platform Icon */}\n                        <div className={`w-12 h-12 ${platformInfo.color} rounded-lg flex items-center justify-center`}>\n                          <Icon className=\"h-6 w-6 text-white\" />\n                        </div>\n\n                        {/* Link Info */}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h3 className=\"font-semibold text-gray-900\">\n                              {platformInfo.name}\n                            </h3>\n                            {link.isVerified && (\n                              <Badge variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n                                <Check className=\"h-3 w-3 mr-1\" />\n                                {t('profile.social.verified')}\n                              </Badge>\n                            )}\n                          </div>\n\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600 mb-1\">\n                            <span className=\"font-medium\">@{link.username}</span>\n                            {link.followers !== undefined && link.followers > 0 && (\n                              <>\n                                <span>•</span>\n                                <span>{link.followers.toLocaleString()} {t('profile.social.followers')}</span>\n                              </>\n                            )}\n                          </div>\n\n                          <div className=\"flex items-center gap-2\">\n                            <a\n                              href={link.url}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-sm text-blue-600 hover:underline flex items-center gap-1\"\n                            >\n                              {getDisplayUrl(link.url, link.platform)}\n                              <ExternalLink className=\"h-3 w-3\" />\n                            </a>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setEditingLink(link)}\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteLink(link.platform)}\n                            className=\"text-red-600 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Available Platforms */}\n          {availablePlatforms.length > 0 && socialLinks.length < maxLinks && (\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-3\">\n                {t('profile.social.availablePlatforms')}\n              </h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {availablePlatforms.slice(0, 6).map(platform => {\n                  const Icon = platform.icon;\n                  return (\n                    <Button\n                      key={platform.id}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setNewLink({ ...newLink, platform: platform.id, url: '' });\n                        setIsAddingLink(true);\n                      }}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {platform.name}\n                    </Button>\n                  );\n                })}\n                {availablePlatforms.length > 6 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setIsAddingLink(true)}\n                  >\n                    +{availablePlatforms.length - 6} {t('common.more')}\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Link Dialog */}\n      {editingLink && (\n        <Dialog open={!!editingLink} onOpenChange={() => setEditingLink(null)}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{t('profile.social.editLink')}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>{t('profile.social.platform')}</Label>\n                <div className=\"flex items-center gap-2 p-2 bg-gray-50 rounded\">\n                  {React.createElement(getPlatformIcon(editingLink.platform), {\n                    className: 'h-4 w-4'\n                  })}\n                  <span>{getPlatformInfo(editingLink.platform).name}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editUrl\">{t('profile.social.url')}</Label>\n                <Input\n                  id=\"editUrl\"\n                  value={editingLink.url}\n                  onChange={(e) => setEditingLink({ ...editingLink, url: e.target.value })}\n                  placeholder={getPlatformInfo(editingLink.platform).placeholder}\n                />\n              </div>\n\n              {enableVisibilityControl && (\n                <div className=\"flex items-center gap-2\">\n                  <Switch\n                    id=\"editShowFollowers\"\n                    checked={editingLink.followers !== undefined}\n                    onCheckedChange={(checked) =>\n                      setEditingLink({ ...editingLink, followers: checked ? 0 : undefined })\n                    }\n                  />\n                  <Label htmlFor=\"editShowFollowers\" className=\"text-sm\">\n                    {t('profile.social.showFollowers')}\n                  </Label>\n                </div>\n              )}\n\n              {editingLink.followers !== undefined && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"editFollowers\">{t('profile.social.followers')}</Label>\n                  <Input\n                    id=\"editFollowers\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={editingLink.followers}\n                    onChange={(e) => setEditingLink({ ...editingLink, followers: parseInt(e.target.value) || 0 })}\n                  />\n                </div>\n              )}\n\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setEditingLink(null)}>\n                  {t('common.cancel')}\n                </Button>\n                <Button onClick={handleUpdateLink}>\n                  {t('common.save')}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Tips */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.social.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.social.tips.useRealUrls')}</li>\n              <li>• {t('profile.social.tips.keepUpdated')}</li>\n              <li>• {t('profile.social.tips.beProfessional')}</li>\n              <li>• {t('profile.social.tips.showcaseWork')}</li>\n              <li>• {t('profile.social.tips.privacyAware')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/ContactCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/PortfolioGallery.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showFilters' is assigned a value but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPortfolioClick' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentImageIndex' is assigned a value but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Eye, Heart, ExternalLink, Maximize2, X, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface PortfolioItem {\n  id: string;\n  title: string;\n  description: string;\n  imageUrl: string;\n  category: string;\n  tags: string[];\n  projectUrl?: string;\n  client?: string;\n  completionDate: Date;\n  featured?: boolean;\n  likes?: number;\n  views?: number;\n}\n\nexport interface PortfolioGalleryProps {\n  portfolios: PortfolioItem[];\n  title?: string;\n  showFilters?: boolean;\n  showCategories?: boolean;\n  showStats?: boolean;\n  maxItems?: number;\n  columns?: number;\n  className?: string;\n  onPortfolioClick?: (portfolio: PortfolioItem) => void;\n  onLikeClick?: (portfolioId: string) => void;\n  loading?: boolean;\n}\n\nconst PortfolioGallery: React.FC<PortfolioGalleryProps> = ({\n  portfolios,\n  title = '作品集',\n  showFilters = true,\n  showCategories = true,\n  showStats = true,\n  maxItems,\n  columns = 3,\n  className = '',\n  onPortfolioClick,\n  onLikeClick,\n  loading = false,\n}) => {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedPortfolio, setSelectedPortfolio] = useState<PortfolioItem | null>(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const categories = Array.from(new Set(portfolios.map(p => p.category)));\n  const filteredPortfolios = selectedCategory === 'all'\n    ? portfolios\n    : portfolios.filter(p => p.category === selectedCategory);\n\n  const displayPortfolios = maxItems ? filteredPortfolios.slice(0, maxItems) : filteredPortfolios;\n\n  const getGridCols = () => {\n    switch (columns) {\n      case 1:\n        return 'grid-cols-1';\n      case 2:\n        return 'grid-cols-1 md:grid-cols-2';\n      case 4:\n        return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4';\n      default:\n        return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3';\n    }\n  };\n\n  const openLightbox = (portfolio: PortfolioItem) => {\n    setSelectedPortfolio(portfolio);\n    setCurrentImageIndex(0);\n  };\n\n  const closeLightbox = () => {\n    setSelectedPortfolio(null);\n    setCurrentImageIndex(0);\n  };\n\n  const navigateImage = (direction: 'prev' | 'next') => {\n    if (!selectedPortfolio) return;\n\n    const filteredList = filteredPortfolios;\n    const currentIndex = filteredList.findIndex(p => p.id === selectedPortfolio.id);\n\n    if (direction === 'prev') {\n      const prevIndex = currentIndex > 0 ? currentIndex - 1 : filteredList.length - 1;\n      setSelectedPortfolio(filteredList[prevIndex]);\n    } else {\n      const nextIndex = currentIndex < filteredList.length - 1 ? currentIndex + 1 : 0;\n      setSelectedPortfolio(filteredList[nextIndex]);\n    }\n  };\n\n  const PortfolioCard = ({ portfolio }: { portfolio: PortfolioItem }) => (\n    <div\n      className=\"group relative bg-white rounded-lg border border-gray-200 overflow-hidden cursor-pointer transition-all duration-300 hover:shadow-xl hover:border-gray-300\"\n      onClick={() => openLightbox(portfolio)}\n    >\n      {/* Image */}\n      <div className=\"relative aspect-[4/3] overflow-hidden bg-gray-100\">\n        <img\n          src={portfolio.imageUrl}\n          alt={portfolio.title}\n          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-500\"\n        />\n\n        {/* Overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n          <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n            <h3 className=\"text-white font-semibold text-lg mb-1 leading-chinese\">\n              {portfolio.title}\n            </h3>\n            <p className=\"text-white/90 text-sm line-clamp-2 leading-chinese\">\n              {portfolio.description}\n            </p>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"absolute top-2 right-2 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              openLightbox(portfolio);\n            }}\n            className=\"p-2 bg-white/90 rounded-full hover:bg-white transition-colors duration-200\"\n          >\n            <Maximize2 className=\"w-4 h-4 text-gray-700\" />\n          </button>\n          {portfolio.projectUrl && (\n            <a\n              href={portfolio.projectUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              onClick={(e) => e.stopPropagation()}\n              className=\"p-2 bg-white/90 rounded-full hover:bg-white transition-colors duration-200\"\n            >\n              <ExternalLink className=\"w-4 h-4 text-gray-700\" />\n            </a>\n          )}\n        </div>\n\n        {/* Featured Badge */}\n        {portfolio.featured && (\n          <div className=\"absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium\">\n            精选\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4\">\n        {/* Title and Category */}\n        <div className=\"mb-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <h3 className=\"font-semibold text-gray-900 leading-chinese line-clamp-1\">\n              {portfolio.title}\n            </h3>\n            <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n              {portfolio.category}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600 line-clamp-2 leading-chinese\">\n            {portfolio.description}\n          </p>\n        </div>\n\n        {/* Tags */}\n        <div className=\"flex flex-wrap gap-1 mb-3\">\n          {portfolio.tags.slice(0, 3).map((tag, index) => (\n            <span\n              key={index}\n              className=\"text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded\"\n            >\n              {tag}\n            </span>\n          ))}\n          {portfolio.tags.length > 3 && (\n            <span className=\"text-xs text-gray-500\">\n              +{portfolio.tags.length - 3}\n            </span>\n          )}\n        </div>\n\n        {/* Meta Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <div className=\"flex items-center gap-2\">\n            {portfolio.client && (\n              <span>客户: {portfolio.client}</span>\n            )}\n            <span>\n              {portfolio.completionDate.toLocaleDateString('zh-CN')}\n            </span>\n          </div>\n          {showStats && (\n            <div className=\"flex items-center gap-3\">\n              {portfolio.views && (\n                <div className=\"flex items-center gap-1\">\n                  <Eye className=\"w-3 h-3\" />\n                  <span>{portfolio.views}</span>\n                </div>\n              )}\n              {portfolio.likes !== undefined && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onLikeClick?.(portfolio.id);\n                  }}\n                  className=\"flex items-center gap-1 hover:text-red-500 transition-colors\"\n                >\n                  <Heart className={cn(\n                    'w-3 h-3',\n                    portfolio.likes > 0 ? 'text-red-500 fill-current' : ''\n                  )} />\n                  <span>{portfolio.likes}</span>\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-6\"></div>\n          <div className={cn('grid gap-6', getGridCols())}>\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"bg-gray-100 rounded-lg aspect-[4/3]\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 leading-chinese\">\n            {title} ({portfolios.length})\n          </h2>\n        </div>\n\n        {/* Category Filters */}\n        {showCategories && categories.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"flex flex-wrap gap-2\">\n              <button\n                onClick={() => setSelectedCategory('all')}\n                className={cn(\n                  'px-4 py-2 text-sm rounded-lg transition-colors duration-200',\n                  selectedCategory === 'all'\n                    ? 'bg-red-500 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                )}\n              >\n                全部\n              </button>\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => setSelectedCategory(category)}\n                  className={cn(\n                    'px-4 py-2 text-sm rounded-lg transition-colors duration-200',\n                    selectedCategory === category\n                      ? 'bg-red-500 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  )}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Portfolio Grid */}\n        {displayPortfolios.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-lg flex items-center justify-center\">\n              <Eye className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无作品</h3>\n            <p className=\"text-gray-600\">\n              {selectedCategory !== 'all' ? '该分类下暂无作品' : '还没有发布任何作品'}\n            </p>\n          </div>\n        ) : (\n          <div className={cn('grid gap-6', getGridCols())}>\n            {displayPortfolios.map((portfolio) => (\n              <PortfolioCard key={portfolio.id} portfolio={portfolio} />\n            ))}\n          </div>\n        )}\n\n        {/* Show More */}\n        {maxItems && filteredPortfolios.length > maxItems && (\n          <div className=\"mt-8 text-center\">\n            <button\n              onClick={() => {}}\n              className=\"px-6 py-2 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors duration-200\"\n            >\n              查看全部 {filteredPortfolios.length} 个作品\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Lightbox */}\n      {selectedPortfolio && (\n        <div className=\"fixed inset-0 z-50 bg-black/90 flex items-center justify-center p-4\">\n          <button\n            onClick={closeLightbox}\n            className=\"absolute top-4 right-4 p-2 text-white/80 hover:text-white transition-colors z-10\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          <button\n            onClick={() => navigateImage('prev')}\n            className=\"absolute left-4 top-1/2 transform -translate-y-1/2 p-2 text-white/80 hover:text-white transition-colors z-10\"\n          >\n            <ChevronLeft className=\"w-8 h-8\" />\n          </button>\n\n          <button\n            onClick={() => navigateImage('next')}\n            className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-2 text-white/80 hover:text-white transition-colors z-10\"\n          >\n            <ChevronRight className=\"w-8 h-8\" />\n          </button>\n\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-white rounded-lg overflow-hidden\">\n              <img\n                src={selectedPortfolio.imageUrl}\n                alt={selectedPortfolio.title}\n                className=\"w-full h-auto max-h-[70vh] object-contain\"\n              />\n              <div className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2 leading-chinese\">\n                      {selectedPortfolio.title}\n                    </h3>\n                    <p className=\"text-gray-600 leading-chinese\">\n                      {selectedPortfolio.description}\n                    </p>\n                  </div>\n                  <span className=\"bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm\">\n                    {selectedPortfolio.category}\n                  </span>\n                </div>\n\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {selectedPortfolio.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-red-50 text-red-700 px-3 py-1 rounded-full text-sm\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center justify-between text-sm text-gray-500 border-t pt-4\">\n                  <div className=\"flex items-center gap-4\">\n                    {selectedPortfolio.client && (\n                      <span>客户: {selectedPortfolio.client}</span>\n                    )}\n                    <span>\n                      完成时间: {selectedPortfolio.completionDate.toLocaleDateString('zh-CN')}\n                    </span>\n                  </div>\n                  {selectedPortfolio.projectUrl && (\n                    <a\n                      href={selectedPortfolio.projectUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center gap-1 text-red-600 hover:text-red-700\"\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                      访问项目\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PortfolioGallery;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/ProfileHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/ReviewSummary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":2,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":68}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Star, MessageSquare, ThumbsUp, Filter, Search, ChevronDown } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface Review {\n  id: string;\n  rating: number;\n  title: string;\n  content: string;\n  reviewer: {\n    name: string;\n    avatar?: string;\n    level: string;\n  };\n  serviceTitle: string;\n  date: Date;\n  helpful: number;\n  verified: boolean;\n  response?: {\n    content: string;\n    date: Date;\n  };\n  images?: string[];\n}\n\nexport interface ReviewSummaryProps {\n  reviews: Review[];\n  title?: string;\n  showFilters?: boolean;\n  showSearch?: boolean;\n  showServiceInfo?: boolean;\n  maxItems?: number;\n  className?: string;\n  onReviewClick?: (review: Review) => void;\n  onHelpfulClick?: (reviewId: string) => void;\n  loading?: boolean;\n}\n\nconst ReviewSummary: React.FC<ReviewSummaryProps> = ({\n  reviews,\n  title = '客户评价',\n  showFilters = true,\n  showSearch = true,\n  showServiceInfo = true,\n  maxItems = 10,\n  className = '',\n  onReviewClick,\n  onHelpfulClick,\n  loading = false,\n}) => {\n  const [selectedRating, setSelectedRating] = useState<number | null>(null);\n  const [sortBy, setSortBy] = useState<string>('recent');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Calculate rating distribution\n  const ratingDistribution = [5, 4, 3, 2, 1].map(rating => ({\n    rating,\n    count: reviews.filter(r => r.rating === rating).length,\n    percentage: (reviews.filter(r => r.rating === rating).length / reviews.length) * 100\n  }));\n\n  const averageRating = reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length;\n\n  const filteredAndSortedReviews = reviews\n    .filter(review => {\n      const matchesRating = selectedRating === null || review.rating === selectedRating;\n      const matchesSearch = review.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           review.content.toLowerCase().includes(searchTerm.toLowerCase());\n      return matchesRating && matchesSearch;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'rating_high':\n          return b.rating - a.rating;\n        case 'rating_low':\n          return a.rating - b.rating;\n        case 'helpful':\n          return b.helpful - a.helpful;\n        case 'recent':\n        default:\n          return new Date(b.date).getTime() - new Date(a.date).getTime();\n      }\n    });\n\n  const displayReviews = maxItems ? filteredAndSortedReviews.slice(0, maxItems) : filteredAndSortedReviews;\n\n  const renderStars = (rating: number, size: 'sm' | 'md' | 'lg' = 'md') => {\n    const sizes = {\n      sm: 'w-3 h-3',\n      md: 'w-4 h-4',\n      lg: 'w-5 h-5'\n    };\n\n    return (\n      <div className=\"flex items-center gap-0.5\">\n        {[...Array(5)].map((_, i) => (\n          <Star\n            key={i}\n            className={cn(\n              sizes[size],\n              i < rating ? 'text-yellow-400 fill-current' : 'text-gray-300'\n            )}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n            <div className=\"lg:col-span-1 h-32 bg-gray-200 rounded\"></div>\n            <div className=\"lg:col-span-2 h-32 bg-gray-200 rounded\"></div>\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-bold text-gray-900 mb-2 leading-chinese\">\n          {title} ({reviews.length})\n        </h2>\n      </div>\n\n      {/* Rating Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {/* Overall Rating */}\n        <div className=\"text-center lg:text-left\">\n          <div className=\"flex items-center justify-center lg:justify-start gap-2 mb-2\">\n            <span className=\"text-4xl font-bold text-gray-900\">\n              {averageRating.toFixed(1)}\n            </span>\n            <div className=\"flex flex-col\">\n              {renderStars(Math.round(averageRating), 'lg')}\n              <span className=\"text-sm text-gray-600 mt-1\">\n                {reviews.length} 条评价\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Rating Distribution */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"space-y-2\">\n            {ratingDistribution.map(({ rating, count, percentage }) => (\n              <div key={rating} className=\"flex items-center gap-3\">\n                <div className=\"flex items-center gap-1 w-16\">\n                  <span className=\"text-sm text-gray-600\">{rating}</span>\n                  <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-yellow-400 h-2 rounded-full transition-all duration-500\"\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                </div>\n                <div className=\"w-12 text-right\">\n                  <span className=\"text-sm text-gray-600\">{count}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      {(showSearch || showFilters) && (\n        <div className=\"mb-6 space-y-4\">\n          {showSearch && (\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"搜索评价...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500\"\n              />\n            </div>\n          )}\n\n          {showFilters && (\n            <div className=\"flex flex-wrap gap-3\">\n              {/* Rating Filter */}\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-600\">评分:</span>\n                <div className=\"flex gap-1\">\n                  {[null, 5, 4, 3, 2, 1].map((rating) => (\n                    <button\n                      key={rating || 'all'}\n                      onClick={() => setSelectedRating(rating)}\n                      className={cn(\n                        'px-3 py-1 text-sm rounded-lg transition-colors duration-200',\n                        selectedRating === rating\n                          ? 'bg-red-500 text-white'\n                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                      )}\n                    >\n                      {rating || '全部'}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Sort */}\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-600\">排序:</span>\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500\"\n                >\n                  <option value=\"recent\">最新</option>\n                  <option value=\"rating_high\">评分最高</option>\n                  <option value=\"rating_low\">评分最低</option>\n                  <option value=\"helpful\">最有帮助</option>\n                </select>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Reviews List */}\n      {displayReviews.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <MessageSquare className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无评价</h3>\n          <p className=\"text-gray-600\">\n            {searchTerm || selectedRating ? '没有找到匹配的评价' : '还没有客户留下评价'}\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {displayReviews.map((review) => (\n            <div\n              key={review.id}\n              className=\"border-b border-gray-100 last:border-b-0 pb-6 last:pb-0 cursor-pointer hover:bg-gray-50 -mx-4 px-4 py-2 rounded-lg transition-colors duration-200\"\n              onClick={() => onReviewClick?.(review)}\n            >\n              <div className=\"flex items-start gap-4\">\n                {/* Reviewer Avatar */}\n                <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0\">\n                  {review.reviewer.avatar ? (\n                    <img\n                      src={review.reviewer.avatar}\n                      alt={review.reviewer.name}\n                      className=\"w-full h-full rounded-full object-cover\"\n                    />\n                  ) : (\n                    <span className=\"text-sm font-medium text-gray-600\">\n                      {review.reviewer.name.charAt(0).toUpperCase()}\n                    </span>\n                  )}\n                </div>\n\n                {/* Review Content */}\n                <div className=\"flex-1 min-w-0\">\n                  {/* Review Header */}\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-gray-900\">\n                            {review.reviewer.name}\n                          </span>\n                          {review.verified && (\n                            <div className=\"bg-green-100 text-green-700 text-xs px-2 py-0.5 rounded-full\">\n                              已验证购买\n                            </div>\n                          )}\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {review.reviewer.level} • {review.date.toLocaleDateString('zh-CN')}\n                        </span>\n                      </div>\n                    </div>\n                    {renderStars(review.rating)}\n                  </div>\n\n                  {/* Review Title and Content */}\n                  <div className=\"mb-3\">\n                    <h4 className=\"font-semibold text-gray-900 mb-1 leading-chinese\">\n                      {review.title}\n                    </h4>\n                    <p className=\"text-gray-700 leading-chinese\">\n                      {review.content}\n                    </p>\n                  </div>\n\n                  {/* Service Info */}\n                  {showServiceInfo && (\n                    <div className=\"text-sm text-gray-600 mb-3\">\n                      <span className=\"font-medium\">服务:</span> {review.serviceTitle}\n                    </div>\n                  )}\n\n                  {/* Review Images */}\n                  {review.images && review.images.length > 0 && (\n                    <div className=\"flex gap-2 mb-3\">\n                      {review.images.slice(0, 3).map((image, index) => (\n                        <img\n                          key={index}\n                          src={image}\n                          alt={`Review image ${index + 1}`}\n                          className=\"w-16 h-16 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity\"\n                        />\n                      ))}\n                      {review.images.length > 3 && (\n                        <div className=\"w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center text-sm text-gray-600\">\n                          +{review.images.length - 3}\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Response */}\n                  {review.response && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3\">\n                      <div className=\"text-sm font-medium text-blue-900 mb-1\">\n                        卖家回复\n                      </div>\n                      <p className=\"text-sm text-blue-800 leading-chinese\">\n                        {review.response.content}\n                      </p>\n                      <div className=\"text-xs text-blue-600 mt-1\">\n                        {review.response.date.toLocaleDateString('zh-CN')}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Actions */}\n                  <div className=\"flex items-center gap-4\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onHelpfulClick?.(review.id);\n                      }}\n                      className=\"flex items-center gap-1 text-sm text-gray-600 hover:text-red-600 transition-colors\"\n                    >\n                      <ThumbsUp className=\"w-4 h-4\" />\n                      <span>有帮助 ({review.helpful})</span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Show More */}\n      {maxItems && filteredAndSortedReviews.length > maxItems && (\n        <div className=\"mt-6 text-center\">\n          <button\n            onClick={() => {}}\n            className=\"px-6 py-2 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors duration-200\"\n          >\n            查看全部 {filteredAndSortedReviews.length} 条评价\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReviewSummary;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/ServiceShowcase.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":2,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":2,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":65}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Star, Heart, Eye, MessageCircle, Package, Clock, Filter, Search, Grid, List } from 'lucide-react';\nimport { cn } from '@/utils';\nimport Button from '@/components/ui/Button';\n\nexport interface Service {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  originalPrice?: number;\n  imageUrl: string;\n  category: string;\n  rating: number;\n  reviews: number;\n  orders: number;\n  deliveryTime: string;\n  features: string[];\n  tags: string[];\n  isFeatured?: boolean;\n  isFavorite?: boolean;\n  seller: {\n    name: string;\n    avatar: string;\n    level: string;\n  };\n}\n\nexport interface ServiceShowcaseProps {\n  services: Service[];\n  title?: string;\n  showSearch?: boolean;\n  showFilters?: boolean;\n  showFavorites?: boolean;\n  viewMode?: 'grid' | 'list';\n  maxItems?: number;\n  className?: string;\n  onServiceClick?: (service: Service) => void;\n  onFavoriteClick?: (serviceId: string) => void;\n  onContactClick?: (sellerId: string) => void;\n  loading?: boolean;\n}\n\nconst ServiceShowcase: React.FC<ServiceShowcaseProps> = ({\n  services,\n  title = '提供服务',\n  showSearch = true,\n  showFilters = true,\n  showFavorites = true,\n  viewMode = 'grid',\n  maxItems,\n  className = '',\n  onServiceClick,\n  onFavoriteClick,\n  onContactClick,\n  loading = false,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<string>('rating');\n  const [currentViewMode, setCurrentViewMode] = useState<'grid' | 'list'>(viewMode);\n\n  const categories = Array.from(new Set(services.map(service => service.category)));\n\n  const filteredAndSortedServices = services\n    .filter(service => {\n      const matchesSearch = service.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           service.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = selectedCategory === 'all' || service.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'price_low':\n          return a.price - b.price;\n        case 'price_high':\n          return b.price - a.price;\n        case 'rating':\n          return b.rating - a.rating;\n        case 'reviews':\n          return b.reviews - a.reviews;\n        case 'orders':\n          return b.orders - a.orders;\n        default:\n          return 0;\n      }\n    });\n\n  const displayServices = maxItems ? filteredAndSortedServices.slice(0, maxItems) : filteredAndSortedServices;\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    const emptyStars = 5 - Math.ceil(rating);\n\n    return (\n      <div className=\"flex items-center gap-0.5\">\n        {[...Array(fullStars)].map((_, i) => (\n          <Star key={`full-${i}`} className=\"w-3 h-3 text-yellow-400 fill-current\" />\n        ))}\n        {hasHalfStar && (\n          <Star className=\"w-3 h-3 text-yellow-400 fill-current opacity-50\" />\n        )}\n        {[...Array(emptyStars)].map((_, i) => (\n          <Star key={`empty-${i}`} className=\"w-3 h-3 text-gray-300\" />\n        ))}\n      </div>\n    );\n  };\n\n  const ServiceCard = ({ service }: { service: Service }) => (\n    <div\n      className={cn(\n        'bg-white rounded-lg border border-gray-200 overflow-hidden cursor-pointer transition-all duration-200 hover:shadow-lg hover:border-gray-300 group',\n        currentViewMode === 'list' ? 'flex' : 'flex flex-col'\n      )}\n      onClick={() => onServiceClick?.(service)}\n    >\n      {/* Service Image */}\n      <div className={cn(\n        'relative overflow-hidden bg-gray-100',\n        currentViewMode === 'list' ? 'w-48 h-32 flex-shrink-0' : 'h-48'\n      )}>\n        <img\n          src={service.imageUrl}\n          alt={service.title}\n          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n        />\n        {service.isFeatured && (\n          <div className=\"absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium\">\n            精选\n          </div>\n        )}\n        {showFavorites && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onFavoriteClick?.(service.id);\n            }}\n            className=\"absolute top-2 right-2 p-2 bg-white/90 rounded-full hover:bg-white transition-colors duration-200\"\n          >\n            <Heart className={cn(\n              'w-4 h-4',\n              service.isFavorite ? 'text-red-500 fill-current' : 'text-gray-600'\n            )} />\n          </button>\n        )}\n      </div>\n\n      {/* Service Content */}\n      <div className={cn(\n        'flex-1 p-4',\n        currentViewMode === 'list' && 'flex flex-col justify-between'\n      )}>\n        <div>\n          {/* Category and Title */}\n          <div className=\"flex items-center gap-2 mb-2\">\n            <span className=\"text-xs text-gray-500 uppercase tracking-wide\">\n              {service.category}\n            </span>\n          </div>\n          <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-2 leading-chinese group-hover:text-red-600 transition-colors\">\n            {service.title}\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2 leading-chinese\">\n            {service.description}\n          </p>\n\n          {/* Features */}\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {service.features.slice(0, 3).map((feature, index) => (\n              <span\n                key={index}\n                className=\"text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded\"\n              >\n                {feature}\n              </span>\n            ))}\n            {service.features.length > 3 && (\n              <span className=\"text-xs text-gray-500\">\n                +{service.features.length - 3}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"space-y-3\">\n          {/* Rating and Reviews */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {renderStars(service.rating)}\n              <span className=\"text-sm text-gray-600\">\n                {service.rating.toFixed(1)} ({service.reviews})\n              </span>\n            </div>\n            <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n              <Package className=\"w-3 h-3\" />\n              <span>{service.orders}</span>\n            </div>\n          </div>\n\n          {/* Delivery Time */}\n          <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n            <Clock className=\"w-3 h-3\" />\n            <span>{service.deliveryTime}</span>\n          </div>\n\n          {/* Price and Action */}\n          <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xl font-bold text-red-500\">\n                  ¥{service.price}\n                </span>\n                {service.originalPrice && service.originalPrice > service.price && (\n                  <span className=\"text-sm text-gray-400 line-through\">\n                    ¥{service.originalPrice}\n                  </span>\n                )}\n              </div>\n            </div>\n            <Button\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onContactClick?.(service.seller.name);\n              }}\n            >\n              联系\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-6\"></div>\n          <div className={cn(\n            'grid gap-6',\n            currentViewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'\n          )}>\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"bg-gray-100 rounded-lg h-80\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n      {/* Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-6\">\n        <h2 className=\"text-xl font-bold text-gray-900 leading-chinese\">\n          {title} ({services.length})\n        </h2>\n\n        {/* Controls */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center border border-gray-300 rounded-lg p-1\">\n            <button\n              onClick={() => setCurrentViewMode('grid')}\n              className={cn(\n                'p-2 rounded transition-colors duration-200',\n                currentViewMode === 'grid' ? 'bg-gray-200 text-gray-900' : 'text-gray-600 hover:text-gray-900'\n              )}\n            >\n              <Grid className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => setCurrentViewMode('list')}\n              className={cn(\n                'p-2 rounded transition-colors duration-200',\n                currentViewMode === 'list' ? 'bg-gray-200 text-gray-900' : 'text-gray-600 hover:text-gray-900'\n              )}\n            >\n              <List className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          {/* Sort */}\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500\"\n          >\n            <option value=\"rating\">评分最高</option>\n            <option value=\"reviews\">评价最多</option>\n            <option value=\"orders\">订单最多</option>\n            <option value=\"price_low\">价格最低</option>\n            <option value=\"price_high\">价格最高</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      {(showSearch || showFilters) && (\n        <div className=\"mb-6 space-y-4\">\n          {showSearch && (\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"搜索服务...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500\"\n              />\n            </div>\n          )}\n\n          {showFilters && (\n            <div className=\"flex flex-wrap gap-2\">\n              <button\n                onClick={() => setSelectedCategory('all')}\n                className={cn(\n                  'px-4 py-2 text-sm rounded-lg transition-colors duration-200',\n                  selectedCategory === 'all'\n                    ? 'bg-red-500 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                )}\n              >\n                全部\n              </button>\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => setSelectedCategory(category)}\n                  className={cn(\n                    'px-4 py-2 text-sm rounded-lg transition-colors duration-200',\n                    selectedCategory === category\n                      ? 'bg-red-500 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  )}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Services Grid/List */}\n      {displayServices.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Package className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无服务</h3>\n          <p className=\"text-gray-600\">\n            {searchTerm || selectedCategory !== 'all' ? '没有找到匹配的服务' : '该卖家还没有发布任何服务'}\n          </p>\n        </div>\n      ) : (\n        <div className={cn(\n          'grid gap-6',\n          currentViewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'\n        )}>\n          {displayServices.map((service) => (\n            <ServiceCard key={service.id} service={service} />\n          ))}\n        </div>\n      )}\n\n      {/* Show More */}\n      {maxItems && filteredAndSortedServices.length > maxItems && (\n        <div className=\"mt-8 text-center\">\n          <Button variant=\"outline\" onClick={() => {}}>\n            查看全部 {filteredAndSortedServices.length} 个服务\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ServiceShowcase;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/SkillsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/SocialProof.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/VerificationBadges.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":2,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getBadgeIcon' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Shield, CheckCircle, Award, Star, Users, Zap, Globe, School, Briefcase } from 'lucide-react';\nimport { cn } from '@/utils';\n\nexport interface VerificationBadge {\n  type: 'identity' | 'email' | 'phone' | 'professional' | 'top_rated' | 'rising_talent' | 'expert_vetted' | 'language' | 'education' | 'work_experience';\n  label: string;\n  description: string;\n  verified: boolean;\n  verifiedDate?: Date;\n  icon?: React.ReactNode;\n  color?: string;\n  bgColor?: string;\n}\n\nexport interface VerificationBadgesProps {\n  badges: VerificationBadge[];\n  title?: string;\n  layout?: 'grid' | 'list' | 'compact';\n  showUnverified?: boolean;\n  className?: string;\n  onBadgeClick?: (badge: VerificationBadge) => void;\n}\n\nconst VerificationBadges: React.FC<VerificationBadgesProps> = ({\n  badges,\n  title = '认证与徽章',\n  layout = 'grid',\n  showUnverified = true,\n  className = '',\n  onBadgeClick,\n}) => {\n  const getBadgeIcon = (type: string) => {\n    switch (type) {\n      case 'identity':\n        return <Shield className=\"w-5 h-5\" />;\n      case 'email':\n      case 'phone':\n        return <CheckCircle className=\"w-5 h-5\" />;\n      case 'professional':\n        return <Briefcase className=\"w-5 h-5\" />;\n      case 'top_rated':\n        return <Star className=\"w-5 h-5\" />;\n      case 'rising_talent':\n        return <Zap className=\"w-5 h-5\" />;\n      case 'expert_vetted':\n        return <Award className=\"w-5 h-5\" />;\n      case 'language':\n        return <Globe className=\"w-5 h-5\" />;\n      case 'education':\n        return <School className=\"w-5 h-5\" />;\n      case 'work_experience':\n        return <Briefcase className=\"w-5 h-5\" />;\n      default:\n        return <CheckCircle className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getBadgeStyle = (type: string, verified: boolean) => {\n    if (!verified) {\n      return {\n        color: 'text-gray-400',\n        bgColor: 'bg-gray-50',\n        borderColor: 'border-gray-200',\n        icon: <CheckCircle className=\"w-5 h-5\" />\n      };\n    }\n\n    switch (type) {\n      case 'identity':\n        return {\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-50',\n          borderColor: 'border-blue-200',\n          icon: <Shield className=\"w-5 h-5\" />\n        };\n      case 'email':\n        return {\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          borderColor: 'border-green-200',\n          icon: <CheckCircle className=\"w-5 h-5\" />\n        };\n      case 'phone':\n        return {\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          borderColor: 'border-green-200',\n          icon: <CheckCircle className=\"w-5 h-5\" />\n        };\n      case 'professional':\n        return {\n          color: 'text-purple-600',\n          bgColor: 'bg-purple-50',\n          borderColor: 'border-purple-200',\n          icon: <Briefcase className=\"w-5 h-5\" />\n        };\n      case 'top_rated':\n        return {\n          color: 'text-yellow-600',\n          bgColor: 'bg-yellow-50',\n          borderColor: 'border-yellow-200',\n          icon: <Star className=\"w-5 h-5\" />\n        };\n      case 'rising_talent':\n        return {\n          color: 'text-orange-600',\n          bgColor: 'bg-orange-50',\n          borderColor: 'border-orange-200',\n          icon: <Zap className=\"w-5 h-5\" />\n        };\n      case 'expert_vetted':\n        return {\n          color: 'text-red-600',\n          bgColor: 'bg-red-50',\n          borderColor: 'border-red-200',\n          icon: <Award className=\"w-5 h-5\" />\n        };\n      case 'language':\n        return {\n          color: 'text-cyan-600',\n          bgColor: 'bg-cyan-50',\n          borderColor: 'border-cyan-200',\n          icon: <Globe className=\"w-5 h-5\" />\n        };\n      case 'education':\n        return {\n          color: 'text-indigo-600',\n          bgColor: 'bg-indigo-50',\n          borderColor: 'border-indigo-200',\n          icon: <School className=\"w-5 h-5\" />\n        };\n      case 'work_experience':\n        return {\n          color: 'text-emerald-600',\n          bgColor: 'bg-emerald-50',\n          borderColor: 'border-emerald-200',\n          icon: <Briefcase className=\"w-5 h-5\" />\n        };\n      default:\n        return {\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-200',\n          icon: <CheckCircle className=\"w-5 h-5\" />\n        };\n    }\n  };\n\n  const visibleBadges = showUnverified\n    ? badges\n    : badges.filter(badge => badge.verified);\n\n  const renderBadge = (badge: VerificationBadge) => {\n    const style = getBadgeStyle(badge.type, badge.verified);\n    const Icon = badge.icon || style.icon;\n\n    if (layout === 'compact') {\n      return (\n        <div\n          key={badge.type}\n          className={cn(\n            'inline-flex items-center gap-2 px-3 py-1.5 rounded-full border-2 text-sm font-medium cursor-pointer transition-all duration-200',\n            style.bgColor,\n            style.color,\n            style.borderColor,\n            'hover:shadow-sm'\n          )}\n          onClick={() => onBadgeClick?.(badge)}\n          title={badge.description}\n        >\n          <Icon className=\"w-4 h-4\" />\n          <span>{badge.label}</span>\n          {badge.verified && (\n            <CheckCircle className=\"w-3 h-3\" />\n          )}\n        </div>\n      );\n    }\n\n    if (layout === 'list') {\n      return (\n        <div\n          key={badge.type}\n          className={cn(\n            'flex items-center gap-4 p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md',\n            style.bgColor,\n            style.borderColor\n          )}\n          onClick={() => onBadgeClick?.(badge)}\n        >\n          <div className={cn('p-2 rounded-lg', style.bgColor)}>\n            <Icon className={cn('w-6 h-6', style.color)} />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h4 className={cn('font-semibold', badge.verified ? 'text-gray-900' : 'text-gray-500')}>\n                {badge.label}\n              </h4>\n              {badge.verified && (\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              )}\n            </div>\n            <p className=\"text-sm text-gray-600\">{badge.description}</p>\n            {badge.verifiedDate && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                认证时间: {badge.verifiedDate.toLocaleDateString('zh-CN')}\n              </p>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    // Default grid layout\n    return (\n      <div\n        key={badge.type}\n        className={cn(\n          'flex flex-col items-center text-center p-6 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md',\n          style.bgColor,\n          style.borderColor\n        )}\n        onClick={() => onBadgeClick?.(badge)}\n      >\n        <div className={cn('p-3 rounded-full mb-3', style.bgColor)}>\n          <Icon className={cn('w-8 h-8', style.color)} />\n        </div>\n        <h4 className={cn(\n          'font-semibold text-sm mb-2 leading-chinese',\n          badge.verified ? 'text-gray-900' : 'text-gray-500'\n        )}>\n          {badge.label}\n        </h4>\n        <p className=\"text-xs text-gray-600 leading-chinese line-clamp-2\">\n          {badge.description}\n        </p>\n        {badge.verified && (\n          <CheckCircle className=\"w-4 h-4 text-green-600 mt-2\" />\n        )}\n        {badge.verifiedDate && (\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {badge.verifiedDate.toLocaleDateString('zh-CN')}\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  if (visibleBadges.length === 0) {\n    return (\n      <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{title}</h3>\n        <div className=\"text-center py-8 text-gray-500\">\n          <Shield className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n          <p>暂无认证徽章</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('bg-white rounded-lg shadow-sm border border-gray-200 p-6', className)}>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">{title}</h3>\n\n      <div className={cn(\n        layout === 'grid' ? 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4' :\n        layout === 'list' ? 'space-y-3' :\n        'flex flex-wrap gap-2'\n      )}>\n        {visibleBadges.map(renderBadge)}\n      </div>\n\n      {!showUnverified && badges.some(b => !b.verified) && (\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <button className=\"text-sm text-gray-600 hover:text-gray-900\">\n            显示未完成的认证 ({badges.filter(b => !b.verified).length})\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VerificationBadges;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/profile/public/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/providers/NotificationProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect } from 'react';\nimport { useUIStore } from '@/store';\n\ninterface NotificationContextType {\n  addNotification: (notification: {\n    type: 'success' | 'error' | 'warning' | 'info';\n    title: string;\n    message: string;\n    duration?: number;\n  }) => void;\n  removeNotification: (id: string) => void;\n  clearNotifications: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\ninterface NotificationProps {\n  notification: {\n    id: string;\n    type: 'success' | 'error' | 'warning' | 'info';\n    title: string;\n    message: string;\n  };\n  onClose: () => void;\n}\n\nconst Notification: React.FC<NotificationProps> = ({ notification, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 5000); // Auto close after 5 seconds\n\n    return () => clearTimeout(timer);\n  }, [onClose]);\n\n  const getIcon = () => {\n    switch (notification.type) {\n      case 'success':\n        return (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        );\n      case 'error':\n        return (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        );\n      case 'warning':\n        return (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        );\n      case 'info':\n        return (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getColors = () => {\n    switch (notification.type) {\n      case 'success':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'error':\n        return 'bg-red-50 border-red-200 text-red-800';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'info':\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n      default:\n        return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  return (\n    <div\n      className={`\n        max-w-sm w-full border rounded-lg shadow-lg p-4 pointer-events-auto ring-1 ring-black ring-opacity-5\n        transform transition-all duration-300 ease-in-out\n        ${getColors()}\n      `}\n    >\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        <div className=\"ml-3 w-0 flex-1\">\n          <p className=\"text-sm font-medium\">\n            {notification.title}\n          </p>\n          <p className=\"mt-1 text-sm\">\n            {notification.message}\n          </p>\n        </div>\n        <div className=\"ml-4 flex-shrink-0 flex\">\n          <button\n            className=\"inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            onClick={onClose}\n          >\n            <span className=\"sr-only\">关闭</span>\n            <svg className=\"w-5 h-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path\n                fillRule=\"evenodd\"\n                d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { notifications, addNotification, removeNotification, clearNotifications } = useUIStore();\n\n  const contextValue = {\n    addNotification,\n    removeNotification,\n    clearNotifications,\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n\n      {/* Notification container */}\n      <div className=\"fixed top-4 right-4 z-50 space-y-4\">\n        {notifications.map((notification) => (\n          <Notification\n            key={notification.id}\n            notification={notification}\n            onClose={() => removeNotification(notification.id)}\n          />\n        ))}\n      </div>\n    </NotificationContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/reviews/ReviewCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/reviews/ReviewFilter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useI18n' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Star, Filter, ChevronDown, Search } from 'lucide-react';\nimport { useI18n } from '@/i18n';\n\ninterface ReviewFilterProps {\n  onFilterChange: (filters: ReviewFilters) => void;\n  totalReviews: number;\n  className?: string;\n}\n\nexport interface ReviewFilters {\n  rating?: number;\n  hasResponse?: boolean;\n  sortBy: 'rating' | 'date' | 'helpful';\n  sortOrder: 'asc' | 'desc';\n  search?: string;\n}\n\ninterface RatingFilterProps {\n  selectedRating?: number;\n  onRatingChange: (rating?: number) => void;\n  totalReviews: number;\n  ratingCounts: { [key: number]: number };\n}\n\nconst RatingFilter: React.FC<RatingFilterProps> = ({\n  selectedRating,\n  onRatingChange,\n  totalReviews,\n  ratingCounts\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const ratings = [5, 4, 3, 2, 1];\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n      >\n        <Star className=\"w-4 h-4 text-yellow-500\" />\n        <span className=\"text-sm\">\n          {selectedRating ? `${selectedRating}星` : '所有评分'}\n        </span>\n        <ChevronDown className={`w-4 h-4 text-gray-500 transition-transform duration-200 ${\n          isOpen ? 'rotate-180' : ''\n        }`} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute top-full left-0 mt-1 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n          <div className=\"p-2\">\n            <button\n              onClick={() => {\n                onRatingChange(undefined);\n                setIsOpen(false);\n              }}\n              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200 ${\n                !selectedRating ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'\n              }`}\n            >\n              所有评分 ({totalReviews})\n            </button>\n            {ratings.map((rating) => {\n              const count = ratingCounts[rating] || 0;\n              return (\n                <button\n                  key={rating}\n                  onClick={() => {\n                    onRatingChange(rating);\n                    setIsOpen(false);\n                  }}\n                  className={`w-full flex items-center justify-between text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200 ${\n                    selectedRating === rating ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex items-center\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <Star\n                          key={star}\n                          className={`w-3 h-3 ${\n                            star <= rating\n                              ? 'text-yellow-500 fill-current'\n                              : 'text-gray-300'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <span>{rating}星</span>\n                  </div>\n                  <span className=\"text-gray-500\">({count})</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface SortDropdownProps {\n  sortBy: ReviewFilters['sortBy'];\n  sortOrder: ReviewFilters['sortOrder'];\n  onSortChange: (sortBy: ReviewFilters['sortBy'], sortOrder: ReviewFilters['sortOrder']) => void;\n}\n\nconst SortDropdown: React.FC<SortDropdownProps> = ({\n  sortBy,\n  sortOrder,\n  onSortChange\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const sortOptions = [\n    { value: 'date' as const, label: '最新评价', defaultOrder: 'desc' as const },\n    { value: 'rating' as const, label: '评分最高', defaultOrder: 'desc' as const },\n    { value: 'rating' as const, label: '评分最低', defaultOrder: 'asc' as const },\n    { value: 'helpful' as const, label: '最有帮助', defaultOrder: 'desc' as const },\n  ];\n\n  const currentOption = sortOptions.find(\n    option => option.value === sortBy && option.defaultOrder === sortOrder\n  );\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n      >\n        <Filter className=\"w-4 h-4 text-gray-500\" />\n        <span className=\"text-sm\">{currentOption?.label || '排序方式'}</span>\n        <ChevronDown className={`w-4 h-4 text-gray-500 transition-transform duration-200 ${\n          isOpen ? 'rotate-180' : ''\n        }`} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute top-full right-0 mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n          <div className=\"p-2\">\n            {sortOptions.map((option, index) => (\n              <button\n                key={index}\n                onClick={() => {\n                  onSortChange(option.value, option.defaultOrder);\n                  setIsOpen(false);\n                }}\n                className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200 ${\n                  sortBy === option.value && sortOrder === option.defaultOrder\n                    ? 'bg-blue-50 text-blue-600'\n                    : 'hover:bg-gray-50'\n                }`}\n              >\n                {option.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const ReviewFilter: React.FC<ReviewFilterProps> = ({\n  onFilterChange,\n  totalReviews,\n  className = ''\n}) => {\n  const [filters, setFilters] = useState<ReviewFilters>({\n    sortBy: 'date',\n    sortOrder: 'desc'\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Mock rating counts - in real app, this would come from API\n  const ratingCounts = {\n    5: Math.floor(totalReviews * 0.6),\n    4: Math.floor(totalReviews * 0.25),\n    3: Math.floor(totalReviews * 0.1),\n    2: Math.floor(totalReviews * 0.03),\n    1: Math.floor(totalReviews * 0.02)\n  };\n\n  const handleRatingChange = (rating?: number) => {\n    const newFilters = { ...filters, rating };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  const handleSortChange = (sortBy: ReviewFilters['sortBy'], sortOrder: ReviewFilters['sortOrder']) => {\n    const newFilters = { ...filters, sortBy, sortOrder };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n    const newFilters = { ...filters, search: value || undefined };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  const clearFilters = () => {\n    const newFilters = {\n      sortBy: 'date' as const,\n      sortOrder: 'desc' as const\n    };\n    setFilters(newFilters);\n    setSearchTerm('');\n    onFilterChange(newFilters);\n  };\n\n  const hasActiveFilters = filters.rating || filters.hasResponse || filters.search;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Search and Filter Bar */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Search */}\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"搜索评价内容...\"\n            value={searchTerm}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center space-x-3\">\n          <RatingFilter\n            selectedRating={filters.rating}\n            onRatingChange={handleRatingChange}\n            totalReviews={totalReviews}\n            ratingCounts={ratingCounts}\n          />\n\n          <SortDropdown\n            sortBy={filters.sortBy}\n            sortOrder={filters.sortOrder}\n            onSortChange={handleSortChange}\n          />\n        </div>\n      </div>\n\n      {/* Active Filters and Clear */}\n      {hasActiveFilters && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600\">筛选条件:</span>\n            {filters.rating && (\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\">\n                {filters.rating}星评价\n              </span>\n            )}\n            {filters.hasResponse !== undefined && (\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\">\n                {filters.hasResponse ? '有回复' : '无回复'}\n              </span>\n            )}\n            {filters.search && (\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\">\n                搜索: {filters.search}\n              </span>\n            )}\n          </div>\n\n          <button\n            onClick={clearFilters}\n            className=\"text-sm text-blue-600 hover:text-blue-700 transition-colors duration-200\"\n          >\n            清除筛选\n          </button>\n        </div>\n      )}\n\n      {/* Filter Summary */}\n      <div className=\"text-sm text-gray-600\">\n        {totalReviews > 0 ? (\n          <span>\n            显示 {totalReviews} 条评价\n            {filters.rating && ` · ${filters.rating}星`}\n            {filters.hasResponse !== undefined && (\n              ` · ${filters.hasResponse ? '有回复' : '无回复'}`\n            )}\n          </span>\n        ) : (\n          <span>暂无评价</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewFilter;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/reviews/ReviewPagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/reviews/ReviewSummary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getRatingLabel' is assigned a value but never used.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Star } from 'lucide-react';\nimport { useI18n } from '@/i18n';\n\ninterface ReviewSummaryProps {\n  averageRating: number;\n  totalReviews: number;\n  ratingDistribution: {\n    5: number;\n    4: number;\n    3: number;\n    2: number;\n    1: number;\n  };\n  className?: string;\n}\n\ninterface RatingBarProps {\n  rating: number;\n  count: number;\n  percentage: number;\n}\n\nconst RatingBar: React.FC<RatingBarProps> = ({ rating, count, percentage }) => {\n  return (\n    <div className=\"flex items-center space-x-3\">\n      <div className=\"flex items-center space-x-1 text-sm text-gray-600 w-12\">\n        <span>{rating}</span>\n        <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n      </div>\n      <div className=\"flex-1 bg-gray-200 rounded-full h-2 overflow-hidden\">\n        <div\n          className=\"bg-yellow-500 h-full transition-all duration-500 ease-out\"\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      <span className=\"text-sm text-gray-600 w-12 text-right\">\n        {count}\n      </span>\n    </div>\n  );\n};\n\nexport const ReviewSummary: React.FC<ReviewSummaryProps> = ({\n  averageRating,\n  totalReviews,\n  ratingDistribution,\n  className = ''\n}) => {\n  const { formatNumber } = useI18n();\n\n  const getRatingLabel = (rating: number) => {\n    switch (rating) {\n      case 5: return '非常满意';\n      case 4: return '满意';\n      case 3: return '一般';\n      case 2: return '不满意';\n      case 1: return '非常不满意';\n      default: return '';\n    }\n  };\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 4.5) return 'text-green-600';\n    if (rating >= 3.5) return 'text-blue-600';\n    if (rating >= 2.5) return 'text-yellow-600';\n    if (rating >= 1.5) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg p-6 ${className}`}>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">评价统计</h3>\n\n      {/* Overall Rating */}\n      <div className=\"flex items-center justify-center mb-8\">\n        <div className=\"text-center\">\n          <div className={`text-5xl font-bold ${getRatingColor(averageRating)} mb-2`}>\n            {averageRating.toFixed(1)}\n          </div>\n          <div className=\"flex items-center justify-center space-x-1 mb-2\">\n            {[1, 2, 3, 4, 5].map((star) => (\n              <Star\n                key={star}\n                className={`w-6 h-6 ${\n                  star <= averageRating\n                    ? 'text-yellow-500 fill-current'\n                    : 'text-gray-300'\n                }`}\n              />\n            ))}\n          </div>\n          <div className=\"text-gray-600\">\n            基于 {formatNumber(totalReviews)} 条评价\n          </div>\n        </div>\n      </div>\n\n      {/* Rating Distribution */}\n      <div className=\"space-y-3\">\n        {[5, 4, 3, 2, 1].map((rating) => {\n          const count = ratingDistribution[rating as keyof typeof ratingDistribution];\n          const percentage = totalReviews > 0 ? (count / totalReviews) * 100 : 0;\n\n          return (\n            <RatingBar\n              key={rating}\n              rating={rating}\n              count={count}\n              percentage={percentage}\n            />\n          );\n        })}\n      </div>\n\n      {/* Rating Labels */}\n      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 bg-green-100 rounded\"></div>\n            <span className=\"text-gray-600\">4-5星 满意</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 bg-yellow-100 rounded\"></div>\n            <span className=\"text-gray-600\">3星 一般</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 bg-orange-100 rounded\"></div>\n            <span className=\"text-gray-600\">1-2星 不满意</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Trust Indicators */}\n      {totalReviews >= 10 && (\n        <div className=\"mt-6 pt-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-600\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n              <span>可信评价</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n              <span>已验证买家</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReviewSummary;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/reviews/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/BreadcrumbNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'location' is assigned a value but never used.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":98,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":98,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { ChevronRight, Home } from 'lucide-react';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  isActive?: boolean;\n}\n\ninterface BreadcrumbNavigationProps {\n  items: BreadcrumbItem[];\n  className?: string;\n}\n\nexport const BreadcrumbNavigation: React.FC<BreadcrumbNavigationProps> = ({\n  items,\n  className = ''\n}) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  const generateSchemaData = () => {\n    const itemList = [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: t('home'),\n        item: window.location.origin\n      },\n      ...items.map((item, index) => ({\n        '@type': 'ListItem',\n        position: index + 2,\n        name: item.label,\n        item: item.href ? `${window.location.origin}${item.href}` : undefined\n      }))\n    ];\n\n    return {\n      '@context': 'https://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: itemList\n    };\n  };\n\n  return (\n    <>\n      {/* Structured Data for SEO */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(generateSchemaData())}\n      </script>\n\n      <nav\n        className={`flex items-center space-x-2 text-sm text-gray-600 ${className}`}\n        aria-label={t('breadcrumb')}\n      >\n        {/* Home Link */}\n        <Link\n          to=\"/\"\n          className=\"flex items-center hover:text-gray-900 transition-colors duration-200\"\n          aria-label={t('goToHome')}\n        >\n          <Home className=\"w-4 h-4\" />\n        </Link>\n\n        {/* Breadcrumb Items */}\n        {items.map((item, index) => (\n          <React.Fragment key={index}>\n            <ChevronRight className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n\n            {item.href && !item.isActive ? (\n              <Link\n                to={item.href}\n                className=\"hover:text-gray-900 transition-colors duration-200 truncate max-w-xs\"\n                title={item.label}\n              >\n                {item.label}\n              </Link>\n            ) : (\n              <span\n                className={`font-medium truncate max-w-xs ${\n                  item.isActive ? 'text-gray-900' : 'text-gray-700'\n                }`}\n                title={item.label}\n              >\n                {item.label}\n              </span>\n            )}\n          </React.Fragment>\n        ))}\n      </nav>\n    </>\n  );\n};\n\n// Hook to generate breadcrumb items for service pages\nexport const useServiceBreadcrumbs = (\n  categoryName?: string,\n  subcategoryName?: string,\n  serviceTitle?: string\n): BreadcrumbItem[] => {\n  const { t } = useTranslation();\n\n  const items: BreadcrumbItem[] = [];\n\n  // Services\n  items.push({\n    label: t('services'),\n    href: '/services'\n  });\n\n  // Category\n  if (categoryName) {\n    items.push({\n      label: categoryName,\n      href: `/services?category=${encodeURIComponent(categoryName.toLowerCase())}`\n    });\n  }\n\n  // Subcategory\n  if (subcategoryName) {\n    items.push({\n      label: subcategoryName,\n      href: `/services?subcategory=${encodeURIComponent(subcategoryName.toLowerCase())}`\n    });\n  }\n\n  // Service Title\n  if (serviceTitle) {\n    items.push({\n      label: serviceTitle,\n      isActive: true\n    });\n  }\n\n  return items;\n};\n\nexport default BreadcrumbNavigation;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/CategoryCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":19,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Category } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { cn } from '@/utils';\n\ninterface CategoryCardProps {\n  category: Category;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({\n  category,\n  size = 'medium',\n  className = '',\n}) => {\n  const navigate = useNavigate();\n  const { t } = useI18n();\n\n  const handleClick = () => {\n    navigate(`/categories/${category.slug}`);\n  };\n\n  const sizeClasses = {\n    small: 'p-3 text-center',\n    medium: 'p-4 text-center',\n    large: 'p-6 text-center',\n  };\n\n  const iconSizes = {\n    small: 'w-8 h-8',\n    medium: 'w-12 h-12',\n    large: 'w-16 h-16',\n  };\n\n  const titleSizes = {\n    small: 'text-sm',\n    medium: 'text-base',\n    large: 'text-lg',\n  };\n\n  // Category icons mapping\n  const getCategoryIcon = (slug: string) => {\n    const iconMap: Record<string, string> = {\n      'design-creative': 'M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z',\n      'programming-development': 'M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4',\n      'writing-translation': 'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253',\n      'digital-marketing': 'M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z',\n      'video-audio': 'M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z',\n      'business-consulting': 'M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z',\n    };\n\n    return iconMap[slug] || 'M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z';\n  };\n\n  return (\n    <div\n      className={cn(\n        'bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer border border-gray-200 hover:border-blue-300 group',\n        sizeClasses[size],\n        className\n      )}\n      onClick={handleClick}\n    >\n      {/* Icon */}\n      <div className=\"flex justify-center mb-3\">\n        <div className={cn(\n          'flex items-center justify-center rounded-full bg-gradient-to-br from-blue-50 to-indigo-100 group-hover:from-blue-100 group-hover:to-indigo-200 transition-all duration-300',\n          iconSizes[size]\n        )}>\n          <svg\n            className={cn(\n              'text-blue-600',\n              size === 'small' ? 'w-5 h-5' : size === 'medium' ? 'w-7 h-7' : 'w-10 h-10'\n            )}\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={getCategoryIcon(category.slug)}\n            />\n          </svg>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div>\n        <h3 className={cn(\n          'font-semibold text-gray-900 mb-1 group-hover:text-blue-600 transition-colors duration-200',\n          titleSizes[size]\n        )}>\n          {category.name}\n        </h3>\n\n        {category.description && (\n          <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n            {category.description}\n          </p>\n        )}\n\n        {/* Service Count */}\n        <div className=\"text-xs text-gray-500\">\n          {category.serviceCount} 个服务\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryCard;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ContactSeller.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sellerId' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":41,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":156,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { MessageCircle, X, Upload, Paperclip, Clock, DollarSign } from 'lucide-react';\nimport { serviceService, ContactSellerData } from '@/services/services';\nimport { useI18n } from '@/i18n';\n\ninterface ContactSellerProps {\n  serviceId: string;\n  serviceTitle: string;\n  sellerId: string;\n  sellerName: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (conversationId: number) => void;\n}\n\ninterface QuickQuestionProps {\n  question: string;\n  onSelect: (question: string) => void;\n}\n\nconst QuickQuestion: React.FC<QuickQuestionProps> = ({ question, onSelect }) => {\n  return (\n    <button\n      onClick={() => onSelect(question)}\n      className=\"p-3 text-left bg-gray-50 rounded-lg hover:bg-blue-50 hover:text-blue-700 transition-colors duration-200\"\n    >\n      {question}\n    </button>\n  );\n};\n\nexport const ContactSeller: React.FC<ContactSellerProps> = ({\n  serviceId,\n  serviceTitle,\n  sellerId,\n  sellerName,\n  isOpen,\n  onClose,\n  onSuccess\n}) => {\n  const { t, formatCurrency } = useI18n();\n  const [formData, setFormData] = useState({\n    message: '',\n    budget: '',\n    timeline: ''\n  });\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [dragActive, setDragActive] = useState(false);\n\n  const quickQuestions = [\n    '您好，这个服务包含哪些具体内容？',\n    '可以提供一些之前的案例参考吗？',\n    '交付时间是否可以调整？',\n    '支持分期付款吗？',\n    '如果需要额外功能，如何计费？'\n  ];\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    setError('');\n  };\n\n  const handleQuickQuestionSelect = (question: string) => {\n    setFormData(prev => ({ ...prev, message: question }));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles = files.filter(file => {\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      const validTypes = ['image/', 'application/pdf', 'text/', 'application/msword', 'application/vnd.openxmlformats-officedocument.'];\n\n      if (file.size > maxSize) {\n        alert('文件大小不能超过10MB');\n        return false;\n      }\n\n      if (!validTypes.some(type => file.type.startsWith(type))) {\n        alert('仅支持图片、PDF、Word和文本文件');\n        return false;\n      }\n\n      return true;\n    });\n\n    setAttachments(prev => [...prev, ...validFiles].slice(0, 5)); // Max 5 files\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFileChange({ target: { files: e.dataTransfer.files } } as React.ChangeEvent<HTMLInputElement>);\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const validateForm = () => {\n    if (!formData.message.trim()) {\n      setError('请输入消息内容');\n      return false;\n    }\n    if (formData.message.trim().length < 10) {\n      setError('消息内容至少需要10个字符');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n    setError('');\n\n    try {\n      const contactData: ContactSellerData = {\n        serviceId: parseInt(serviceId),\n        message: formData.message,\n        budget: formData.budget ? parseFloat(formData.budget) : undefined,\n        timeline: formData.timeline || undefined,\n        attachments: attachments.length > 0 ? attachments : undefined\n      };\n\n      const response = await serviceService.contactSeller(contactData);\n\n      if (response.success && response.data) {\n        onSuccess?.(response.data.conversationId);\n        onClose();\n        // Reset form\n        setFormData({ message: '', budget: '', timeline: '' });\n        setAttachments([]);\n      } else {\n        setError(response.error || '发送失败，请重试');\n      }\n    } catch (error) {\n      setError('网络错误，请稍后重试');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4\">\n        {/* Backdrop */}\n        <div\n          className=\"fixed inset-0 bg-black opacity-50\"\n          onClick={onClose}\n        />\n\n        {/* Modal */}\n        <div className=\"relative bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <MessageCircle className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    联系卖家\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    向 {sellerName} 咨询服务: {serviceTitle}\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n              >\n                <X className=\"w-5 h-5 text-gray-500\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"p-6 space-y-6 max-h-[60vh] overflow-y-auto\">\n            {/* Quick Questions */}\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                常见问题\n              </h4>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                {quickQuestions.map((question, index) => (\n                  <QuickQuestion\n                    key={index}\n                    question={question}\n                    onSelect={handleQuickQuestionSelect}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Message */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                您的消息 <span className=\"text-red-500\">*</span>\n              </label>\n              <textarea\n                name=\"message\"\n                value={formData.message}\n                onChange={handleInputChange}\n                placeholder=\"请详细描述您的需求，以便卖家更好地为您服务...\"\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none\"\n                rows={5}\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {formData.message.length}/500 字符\n              </p>\n            </div>\n\n            {/* Budget and Timeline */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  预算范围\n                </label>\n                <div className=\"relative\">\n                  <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <input\n                    type=\"number\"\n                    name=\"budget\"\n                    value={formData.budget}\n                    onChange={handleInputChange}\n                    placeholder=\"您的预算\"\n                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  期望时间\n                </label>\n                <div className=\"relative\">\n                  <Clock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    name=\"timeline\"\n                    value={formData.timeline}\n                    onChange={handleInputChange}\n                    placeholder=\"例如: 2周内\"\n                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Attachments */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                附件 (可选)\n              </label>\n              <div\n                className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors duration-200 ${\n                  dragActive\n                    ? 'border-blue-400 bg-blue-50'\n                    : 'border-gray-300 hover:border-gray-400'\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*,.pdf,.doc,.docx,.txt\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"cursor-pointer\"\n                >\n                  <Paperclip className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600\">\n                    拖拽文件到此处或\n                    <span className=\"text-blue-600 hover:text-blue-700\"> 点击上传</span>\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    支持图片、PDF、Word文档，最大10MB，最多5个文件\n                  </p>\n                </label>\n              </div>\n\n              {/* Attached Files */}\n              {attachments.length > 0 && (\n                <div className=\"mt-3 space-y-2\">\n                  {attachments.map((file, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <Paperclip className=\"w-4 h-4 text-gray-500\" />\n                        <span className=\"text-sm text-gray-700 truncate max-w-xs\">\n                          {file.name}\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          ({(file.size / 1024 / 1024).toFixed(2)}MB)\n                        </span>\n                      </div>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeAttachment(index)}\n                        className=\"p-1 text-red-500 hover:bg-red-50 rounded transition-colors duration-200\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Error Message */}\n            {error && (\n              <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-sm text-red-600\">{error}</p>\n              </div>\n            )}\n\n            {/* Tips */}\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-blue-900 mb-2\">\n                温馨提示\n              </h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• 请详细描述您的需求，以便卖家准确报价</li>\n                <li>• 如有参考文件，建议一并提供</li>\n                <li>• 卖家通常会在24小时内回复</li>\n                <li>• 请勿在此处发送付款或个人敏感信息</li>\n              </ul>\n            </div>\n          </form>\n\n          {/* Footer */}\n          <div className=\"p-6 border-t border-gray-200\">\n            <div className=\"flex items-center justify-end space-x-3\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n              >\n                取消\n              </button>\n              <button\n                type=\"submit\"\n                onClick={handleSubmit}\n                disabled={isSubmitting}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? '发送中...' : '发送消息'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactSeller;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/FeaturedServices.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Service } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport ServiceCard from './ServiceCard';\nimport { cn } from '@/utils';\n\ninterface FeaturedServicesProps {\n  className?: string;\n  limit?: number;\n  title?: string;\n  showViewAll?: boolean;\n}\n\nexport const FeaturedServices: React.FC<FeaturedServicesProps> = ({\n  className = '',\n  limit = 8,\n  title = '推荐服务',\n  showViewAll = true,\n}) => {\n  const navigate = useNavigate();\n  const { t } = useI18n();\n  const { featuredServices, fetchFeaturedServices } = useServicesStore();\n\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  useEffect(() => {\n    const loadFeaturedServices = async () => {\n      setIsLoading(true);\n      try {\n        await fetchFeaturedServices();\n      } catch (error) {\n        console.error('Failed to load featured services:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadFeaturedServices();\n  }, [fetchFeaturedServices]);\n\n  const handleViewAll = () => {\n    navigate('/services?featured=true');\n  };\n\n  const handleQuickView = (service: Service) => {\n    // This would typically open a quick view modal\n    // For now, navigate to service detail\n    navigate(`/services/${service.id}`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={cn('space-y-4', className)}>\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          {showViewAll && (\n            <button className=\"text-blue-600 hover:text-blue-700 font-medium\">\n              查看全部\n            </button>\n          )}\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(limit)].map((_, index) => (\n            <div key={index} className=\"animate-pulse\">\n              <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n                <div className=\"h-48 bg-gray-200\"></div>\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const servicesToShow = featuredServices.slice(0, limit);\n\n  if (servicesToShow.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          <p className=\"text-gray-600 mt-1\">\n            精选的优质服务，满足您的各种需求\n          </p>\n        </div>\n        {showViewAll && (\n          <button\n            onClick={handleViewAll}\n            className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700 font-medium transition-colors duration-200\"\n          >\n            <span>查看全部</span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {/* Services Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {servicesToShow.map((service) => (\n          <ServiceCard\n            key={service.id}\n            service={service}\n            viewMode=\"grid\"\n            onQuickView={handleQuickView}\n          />\n        ))}\n      </div>\n\n      {/* View All Button (Mobile) */}\n      {showViewAll && (\n        <div className=\"flex justify-center md:hidden\">\n          <button\n            onClick={handleViewAll}\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium\"\n          >\n            查看所有推荐服务\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FeaturedServices;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/FilterSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Subcategory' is defined but never used.","line":4,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":20,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2076,2079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2076,2079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setFilters'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":116,"suggestions":[{"desc":"Update the dependencies array to be: [selectedCategory, selectedSubcategory, priceRange, selectedRating, selectedDeliveryTime, selectedSellerLevel, setFilters]","fix":{"range":[2615,2725],"text":"[selectedCategory, selectedSubcategory, priceRange, selectedRating, selectedDeliveryTime, selectedSellerLevel, setFilters]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSelectedCategory' is assigned a value but never used.","line":103,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { Category, Subcategory } from '@/types';\nimport { cn } from '@/utils';\n\ninterface FilterSidebarProps {\n  categories: Category[];\n  isOpen: boolean;\n  onClose: () => void;\n  className?: string;\n}\n\nexport const FilterSidebar: React.FC<FilterSidebarProps> = ({\n  categories,\n  isOpen,\n  onClose,\n  className = '',\n}) => {\n  const { t } = useI18n();\n  const { filters, setFilters, clearFilters } = useServicesStore();\n\n  const [selectedCategory, setSelectedCategory] = useState<number | undefined>(filters.category);\n  const [selectedSubcategory, setSelectedSubcategory] = useState<number | undefined>(filters.subcategory);\n  const [priceRange, setPriceRange] = useState({\n    min: filters.priceMin || '',\n    max: filters.priceMax || '',\n  });\n  const [selectedRating, setSelectedRating] = useState<number | undefined>(filters.rating);\n  const [selectedDeliveryTime, setSelectedDeliveryTime] = useState<number | undefined>(filters.deliveryTime);\n  const [selectedSellerLevel, setSelectedSellerLevel] = useState<string | undefined>(filters.sellerLevel);\n\n  // Price range options\n  const priceRanges = [\n    { label: '¥100以下', min: 0, max: 100 },\n    { label: '¥100-500', min: 100, max: 500 },\n    { label: '¥500-1000', min: 500, max: 1000 },\n    { label: '¥1000-5000', min: 1000, max: 5000 },\n    { label: '¥5000以上', min: 5000, max: undefined },\n  ];\n\n  // Delivery time options\n  const deliveryTimes = [\n    { label: '24小时内', value: 1 },\n    { label: '3天内', value: 3 },\n    { label: '7天内', value: 7 },\n    { label: '14天内', value: 14 },\n    { label: '30天内', value: 30 },\n  ];\n\n  // Seller level options\n  const sellerLevels = [\n    { label: '新卖家', value: 'new' },\n    { label: '一级卖家', value: 'level1' },\n    { label: '二级卖家', value: 'level2' },\n    { label: '顶级卖家', value: 'top' },\n  ];\n\n  // Rating options\n  const ratingOptions = [4, 3, 2, 1];\n\n  // Update filters when values change\n  useEffect(() => {\n    const newFilters: any = {};\n\n    if (selectedCategory) newFilters.category = selectedCategory;\n    if (selectedSubcategory) newFilters.subcategory = selectedSubcategory;\n    if (priceRange.min) newFilters.priceMin = Number(priceRange.min);\n    if (priceRange.max) newFilters.priceMax = Number(priceRange.max);\n    if (selectedRating) newFilters.rating = selectedRating;\n    if (selectedDeliveryTime) newFilters.deliveryTime = selectedDeliveryTime;\n    if (selectedSellerLevel) newFilters.sellerLevel = selectedSellerLevel;\n\n    setFilters(newFilters);\n  }, [selectedCategory, selectedSubcategory, priceRange, selectedRating, selectedDeliveryTime, selectedSellerLevel]);\n\n  const handleCategoryChange = (categoryId: number) => {\n    setSelectedCategory(categoryId === selectedCategory ? undefined : categoryId);\n    setSelectedSubcategory(undefined); // Reset subcategory when category changes\n  };\n\n  const handleSubcategoryChange = (subcategoryId: number) => {\n    setSelectedSubcategory(subcategoryId === selectedSubcategory ? undefined : subcategoryId);\n  };\n\n  const handlePriceRangeClick = (range: typeof priceRanges[0]) => {\n    setPriceRange({\n      min: range.min.toString(),\n      max: range.max?.toString() || '',\n    });\n  };\n\n  const handleClearAll = () => {\n    setSelectedCategory(undefined);\n    setSelectedSubcategory(undefined);\n    setPriceRange({ min: '', max: '' });\n    setSelectedRating(undefined);\n    setSelectedDeliveryTime(undefined);\n    setSelectedSellerLevel(undefined);\n    clearFilters();\n  };\n\n  const getSelectedCategory = () => {\n    return categories.find(cat => cat.id === selectedCategory);\n  };\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex items-center space-x-1\">\n        {[...Array(5)].map((_, i) => (\n          <svg\n            key={i}\n            className={cn(\n              'w-4 h-4',\n              i < rating ? 'text-yellow-400 fill-current' : 'text-gray-300 fill-current'\n            )}\n            viewBox=\"0 0 20 20\"\n          >\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n          </svg>\n        ))}\n        <span className=\"text-sm text-gray-600 ml-1\">& up</span>\n      </div>\n    );\n  };\n\n  const hasActiveFilters = selectedCategory || selectedSubcategory || priceRange.min || priceRange.max ||\n                          selectedRating || selectedDeliveryTime || selectedSellerLevel;\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          'fixed top-0 right-0 h-full w-80 bg-white shadow-xl z-50 transform transition-transform duration-300 overflow-y-auto',\n          isOpen ? 'translate-x-0' : 'translate-x-full',\n          'lg:relative lg:transform-none lg:translate-x-0 lg:shadow-md lg:z-auto lg:w-64 lg:h-auto lg:max-h-[calc(100vh-200px)]',\n          className\n        )}\n      >\n        <div className=\"p-4 lg:p-0\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-4 lg:hidden\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">筛选条件</h2>\n            <button\n              onClick={onClose}\n              className=\"p-2 text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Clear All Button */}\n          {hasActiveFilters && (\n            <button\n              onClick={handleClearAll}\n              className=\"w-full mb-4 px-4 py-2 text-sm text-red-600 hover:text-red-700 font-medium border border-red-200 rounded-lg hover:bg-red-50 transition-colors duration-200\"\n            >\n              清除所有筛选\n            </button>\n          )}\n\n          {/* Categories */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">服务分类</h3>\n            <div className=\"space-y-2\">\n              {categories.map((category) => (\n                <div key={category.id}>\n                  <button\n                    onClick={() => handleCategoryChange(category.id)}\n                    className={cn(\n                      'w-full text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200',\n                      selectedCategory === category.id\n                        ? 'bg-blue-50 text-blue-600 border border-blue-200'\n                        : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-transparent'\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <span>{category.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({category.serviceCount})\n                      </span>\n                    </div>\n                  </button>\n\n                  {/* Subcategories */}\n                  {selectedCategory === category.id && category.subcategories?.length > 0 && (\n                    <div className=\"ml-4 mt-2 space-y-1\">\n                      {category.subcategories.map((subcategory) => (\n                        <button\n                          key={subcategory.id}\n                          onClick={() => handleSubcategoryChange(subcategory.id)}\n                          className={cn(\n                            'w-full text-left px-3 py-1.5 rounded text-sm transition-colors duration-200',\n                            selectedSubcategory === subcategory.id\n                              ? 'bg-blue-100 text-blue-700'\n                              : 'text-gray-600 hover:bg-gray-100'\n                          )}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <span>{subcategory.name}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              ({subcategory.serviceCount})\n                            </span>\n                          </div>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Price Range */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">价格范围</h3>\n\n            {/* Quick Price Ranges */}\n            <div className=\"grid grid-cols-1 gap-2 mb-3\">\n              {priceRanges.map((range, index) => (\n                <button\n                  key={index}\n                  onClick={() => handlePriceRangeClick(range)}\n                  className={cn(\n                    'px-3 py-2 text-left text-sm rounded-lg border transition-colors duration-200',\n                    priceRange.min === range.min.toString() &&\n                    priceRange.max === (range.max?.toString() || '')\n                      ? 'bg-blue-50 text-blue-600 border-blue-200'\n                      : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border-gray-200'\n                  )}\n                >\n                  {range.label}\n                </button>\n              ))}\n            </div>\n\n            {/* Custom Price Range */}\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"number\"\n                placeholder=\"最低价\"\n                value={priceRange.min}\n                onChange={(e) => setPriceRange(prev => ({ ...prev, min: e.target.value }))}\n                className=\"flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n              <span className=\"text-gray-500\">-</span>\n              <input\n                type=\"number\"\n                placeholder=\"最高价\"\n                value={priceRange.max}\n                onChange={(e) => setPriceRange(prev => ({ ...prev, max: e.target.value }))}\n                className=\"flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n\n          {/* Delivery Time */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">交付时间</h3>\n            <div className=\"space-y-2\">\n              {deliveryTimes.map((time) => (\n                <button\n                  key={time.value}\n                  onClick={() => setSelectedDeliveryTime(\n                    selectedDeliveryTime === time.value ? undefined : time.value\n                  )}\n                  className={cn(\n                    'w-full text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200',\n                    selectedDeliveryTime === time.value\n                      ? 'bg-blue-50 text-blue-600 border border-blue-200'\n                      : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-transparent'\n                  )}\n                >\n                  {time.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Rating */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">评分</h3>\n            <div className=\"space-y-2\">\n              {ratingOptions.map((rating) => (\n                <button\n                  key={rating}\n                  onClick={() => setSelectedRating(\n                    selectedRating === rating ? undefined : rating\n                  )}\n                  className={cn(\n                    'w-full text-left px-3 py-2 rounded-lg transition-colors duration-200',\n                    selectedRating === rating\n                      ? 'bg-blue-50 border border-blue-200'\n                      : 'bg-gray-50 hover:bg-gray-100 border border-transparent'\n                  )}\n                >\n                  {renderStars(rating)}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Seller Level */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">卖家等级</h3>\n            <div className=\"space-y-2\">\n              {sellerLevels.map((level) => (\n                <button\n                  key={level.value}\n                  onClick={() => setSelectedSellerLevel(\n                    selectedSellerLevel === level.value ? undefined : level.value\n                  )}\n                  className={cn(\n                    'w-full text-left px-3 py-2 rounded-lg text-sm transition-colors duration-200',\n                    selectedSellerLevel === level.value\n                      ? 'bg-blue-50 text-blue-600 border border-blue-200'\n                      : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-transparent'\n                  )}\n                >\n                  {level.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FilterSidebar;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/OrderNow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":2,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[591,594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[591,594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":190,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5809,5812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5809,5812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handlePackageSelect' is assigned a value but never used.","line":204,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6465,6468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6465,6468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":293,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":19}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { ShoppingCart, X, Upload, Calendar, Info, Check } from 'lucide-react';\nimport { ServicePackage, ServiceRequirement } from '@/types';\nimport { serviceService, CreateOrderData } from '@/services/services';\nimport { useI18n } from '@/i18n';\n\ninterface OrderNowProps {\n  serviceId: string;\n  serviceTitle: string;\n  packages: ServicePackage[];\n  requirements: ServiceRequirement[];\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (orderId: number) => void;\n}\n\ninterface RequirementInputProps {\n  requirement: ServiceRequirement;\n  value: any;\n  onChange: (value: any) => void;\n}\n\nconst RequirementInput: React.FC<RequirementInputProps> = ({\n  requirement,\n  value,\n  onChange\n}) => {\n  const renderInput = () => {\n    switch (requirement.type) {\n      case 'text':\n        return (\n          <textarea\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={requirement.placeholder || `请输入${requirement.title}`}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none\"\n            rows={4}\n            maxLength={requirement.maxCharacters}\n          />\n        );\n\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={requirement.placeholder || `请输入${requirement.title}`}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        );\n\n      case 'date':\n        return (\n          <input\n            type=\"date\"\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        );\n\n      case 'boolean':\n        return (\n          <label className=\"flex items-center space-x-3 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={value || false}\n              onChange={(e) => onChange(e.target.checked)}\n              className=\"w-5 h-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n            />\n            <span className=\"text-gray-700\">{requirement.title}</span>\n          </label>\n        );\n\n      case 'file':\n        return (\n          <FileUpload\n            value={value}\n            onChange={onChange}\n            allowedTypes={requirement.allowedFileTypes}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-900\">\n        {requirement.title}\n        {requirement.required && <span className=\"text-red-500 ml-1\">*</span>}\n      </label>\n      {renderInput()}\n      {requirement.type === 'text' && requirement.maxCharacters && (\n        <p className=\"text-xs text-gray-500 text-right\">\n          {value?.length || 0}/{requirement.maxCharacters} 字符\n        </p>\n      )}\n    </div>\n  );\n};\n\ninterface FileUploadProps {\n  value: File | null;\n  onChange: (file: File | null) => void;\n  allowedTypes?: string[];\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({\n  value,\n  onChange,\n  allowedTypes = ['image/*', '.pdf', '.doc', '.docx']\n}) => {\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const maxSize = 50 * 1024 * 1024; // 50MB\n      if (file.size > maxSize) {\n        alert('文件大小不能超过50MB');\n        return;\n      }\n      onChange(file);\n    }\n  };\n\n  const removeFile = () => {\n    onChange(null);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n        <input\n          type=\"file\"\n          onChange={handleFileChange}\n          accept={allowedTypes.join(',')}\n          className=\"hidden\"\n          id={`file-upload-${Math.random()}`}\n        />\n        {!value ? (\n          <label\n            htmlFor={`file-upload-${Math.random()}`}\n            className=\"cursor-pointer flex flex-col items-center\"\n          >\n            <Upload className=\"w-8 h-8 text-gray-400 mb-2\" />\n            <span className=\"text-sm text-gray-600\">点击上传文件</span>\n            <span className=\"text-xs text-gray-500 mt-1\">\n              支持图片、PDF、Word文档，最大50MB\n            </span>\n          </label>\n        ) : (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"p-2 bg-blue-100 rounded\">\n                <Info className=\"w-4 h-4 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">{value.name}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {(value.size / 1024 / 1024).toFixed(2)}MB\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              onClick={removeFile}\n              className=\"p-1 text-red-500 hover:bg-red-50 rounded transition-colors duration-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const OrderNow: React.FC<OrderNowProps> = ({\n  serviceId,\n  serviceTitle,\n  packages,\n  requirements,\n  isOpen,\n  onClose,\n  onSuccess\n}) => {\n  const { t, formatCurrency, formatDate } = useI18n();\n  const [selectedPackage, setSelectedPackage] = useState<number | null>(\n    packages.length === 1 ? packages[0].id : null\n  );\n  const [requirementValues, setRequirementValues] = useState<Record<string, any>>({});\n  const [customRequirements, setCustomRequirements] = useState('');\n  const [deliveryDate, setDeliveryDate] = useState('');\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [step, setStep] = useState<'package' | 'requirements' | 'review'>('package');\n\n  const selectedPackageData = packages.find(pkg => pkg.id === selectedPackage);\n\n  const handlePackageSelect = (packageId: number) => {\n    setSelectedPackage(packageId);\n    setStep('requirements');\n  };\n\n  const handleRequirementChange = (requirementId: string, value: any) => {\n    setRequirementValues(prev => ({\n      ...prev,\n      [requirementId]: value\n    }));\n  };\n\n  const handleAttachmentChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles = files.filter(file => {\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      if (file.size > maxSize) {\n        alert(`文件 ${file.name} 大小超过10MB`);\n        return false;\n      }\n      return true;\n    });\n\n    setAttachments(prev => [...prev, ...validFiles].slice(0, 3)); // Max 3 files\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const validateStep = () => {\n    if (step === 'package') {\n      if (!selectedPackage) {\n        setError('请选择一个套餐');\n        return false;\n      }\n    } else if (step === 'requirements') {\n      const requiredFields = requirements.filter(req => req.required);\n      for (const field of requiredFields) {\n        if (!requirementValues[field.id]) {\n          setError(`请填写必填项: ${field.title}`);\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    if (validateStep()) {\n      if (step === 'package') {\n        setStep('requirements');\n      } else if (step === 'requirements') {\n        setStep('review');\n      }\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!validateStep()) return;\n\n    setIsSubmitting(true);\n    setError('');\n\n    try {\n      const orderData: CreateOrderData = {\n        serviceId: parseInt(serviceId),\n        packageId: selectedPackage || undefined,\n        requirements: requirementValues,\n        customRequirements: customRequirements || undefined,\n        deliveryDate: deliveryDate || undefined,\n        attachments: attachments.length > 0 ? attachments : undefined\n      };\n\n      const response = await serviceService.createOrder(orderData);\n\n      if (response.success && response.data) {\n        onSuccess?.(response.data.orderId);\n        onClose();\n        // Reset form\n        setSelectedPackage(packages.length === 1 ? packages[0].id : null);\n        setRequirementValues({});\n        setCustomRequirements('');\n        setDeliveryDate('');\n        setAttachments([]);\n        setStep('package');\n      } else {\n        setError(response.error || '创建订单失败，请重试');\n      }\n    } catch (error) {\n      setError('网络错误，请稍后重试');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4\">\n        {/* Backdrop */}\n        <div\n          className=\"fixed inset-0 bg-black opacity-50\"\n          onClick={onClose}\n        />\n\n        {/* Modal */}\n        <div className=\"relative bg-white rounded-xl max-w-3xl w-full max-h-[90vh] overflow-hidden\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <ShoppingCart className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    下单购买\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {serviceTitle}\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n              >\n                <X className=\"w-5 h-5 text-gray-500\" />\n              </button>\n            </div>\n\n            {/* Progress Steps */}\n            <div className=\"flex items-center justify-between mt-6\">\n              {[\n                { key: 'package', label: '选择套餐' },\n                { key: 'requirements', label: '填写需求' },\n                { key: 'review', label: '确认订单' }\n              ].map((item, index) => (\n                <React.Fragment key={item.key}>\n                  <div className=\"flex flex-col items-center\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step === item.key\n                        ? 'bg-blue-600 text-white'\n                        : step === 'review' && ['package', 'requirements'].includes(item.key)\n                        ? 'bg-green-600 text-white'\n                        : 'bg-gray-200 text-gray-600'\n                    }`}>\n                      {step === 'review' && ['package', 'requirements'].includes(item.key) ? (\n                        <Check className=\"w-4 h-4\" />\n                      ) : (\n                        index + 1\n                      )}\n                    </div>\n                    <span className={`text-xs mt-1 ${\n                      step === item.key ? 'text-blue-600 font-medium' : 'text-gray-600'\n                    }`}>\n                      {item.label}\n                    </span>\n                  </div>\n                  {index < 2 && (\n                    <div className={`flex-1 h-px mx-2 ${\n                      step === 'review' || (step === 'requirements' && item.key === 'package')\n                        ? 'bg-green-600'\n                        : 'bg-gray-200'\n                    }`} />\n                  )}\n                </React.Fragment>\n              ))}\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6 max-h-[60vh] overflow-y-auto\">\n            {/* Step 1: Package Selection */}\n            {step === 'package' && (\n              <div className=\"space-y-4\">\n                <h4 className=\"text-lg font-medium text-gray-900\">选择套餐</h4>\n                <div className=\"space-y-3\">\n                  {packages.map((pkg) => (\n                    <div\n                      key={pkg.id}\n                      onClick={() => setSelectedPackage(pkg.id)}\n                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${\n                        selectedPackage === pkg.id\n                          ? 'border-blue-600 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <h5 className=\"font-medium text-gray-900\">{pkg.name}</h5>\n                            {pkg.isPopular && (\n                              <span className=\"px-2 py-1 bg-yellow-500 text-white text-xs font-medium rounded-full\">\n                                推荐\n                              </span>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">{pkg.description}</p>\n                          <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n                            <span>📅 {pkg.deliveryTime}天</span>\n                            <span>🔄 {pkg.revisions}次修改</span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-bold text-gray-900\">\n                            {formatCurrency(pkg.price)}\n                          </div>\n                          <input\n                            type=\"radio\"\n                            checked={selectedPackage === pkg.id}\n                            onChange={() => setSelectedPackage(pkg.id)}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Requirements */}\n            {step === 'requirements' && (\n              <div className=\"space-y-6\">\n                <h4 className=\"text-lg font-medium text-gray-900\">填写需求</h4>\n\n                {/* Package Info */}\n                {selectedPackageData && (\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <h5 className=\"font-medium text-blue-900 mb-2\">已选套餐</h5>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-blue-800 font-medium\">{selectedPackageData.name}</p>\n                        <p className=\"text-sm text-blue-700\">{selectedPackageData.description}</p>\n                      </div>\n                      <div className=\"text-lg font-bold text-blue-900\">\n                        {formatCurrency(selectedPackageData.price)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Required Fields */}\n                {requirements.length > 0 && (\n                  <div className=\"space-y-4\">\n                    {requirements.map((requirement) => (\n                      <RequirementInput\n                        key={requirement.id}\n                        requirement={requirement}\n                        value={requirementValues[requirement.id]}\n                        onChange={(value) => handleRequirementChange(requirement.id, value)}\n                      />\n                    ))}\n                  </div>\n                )}\n\n                {/* Custom Requirements */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    补充说明\n                  </label>\n                  <textarea\n                    value={customRequirements}\n                    onChange={(e) => setCustomRequirements(e.target.value)}\n                    placeholder=\"请补充说明您的具体需求、期望效果等...\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none\"\n                    rows={4}\n                  />\n                </div>\n\n                {/* Delivery Date */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    期望交付日期\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={deliveryDate}\n                    onChange={(e) => setDeliveryDate(e.target.value)}\n                    min={new Date().toISOString().split('T')[0]}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n\n                {/* Attachments */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    相关文件\n                  </label>\n                  <div className=\"space-y-3\">\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n                      <input\n                        type=\"file\"\n                        multiple\n                        onChange={handleAttachmentChange}\n                        className=\"hidden\"\n                        id=\"attachments-upload\"\n                      />\n                      <label\n                        htmlFor=\"attachments-upload\"\n                        className=\"cursor-pointer flex flex-col items-center\"\n                      >\n                        <Upload className=\"w-8 h-8 text-gray-400 mb-2\" />\n                        <span className=\"text-sm text-gray-600\">点击上传附件</span>\n                        <span className=\"text-xs text-gray-500 mt-1\">\n                          最多3个文件，每个不超过10MB\n                        </span>\n                      </label>\n                    </div>\n\n                    {attachments.map((file, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <Info className=\"w-4 h-4 text-gray-500\" />\n                          <span className=\"text-sm text-gray-700 truncate max-w-xs\">\n                            {file.name}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            ({(file.size / 1024 / 1024).toFixed(2)}MB)\n                          </span>\n                        </div>\n                        <button\n                          type=\"button\"\n                          onClick={() => removeAttachment(index)}\n                          className=\"p-1 text-red-500 hover:bg-red-50 rounded transition-colors duration-200\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Review */}\n            {step === 'review' && (\n              <div className=\"space-y-6\">\n                <h4 className=\"text-lg font-medium text-gray-900\">确认订单信息</h4>\n\n                {/* Order Summary */}\n                <div className=\"space-y-4\">\n                  {/* Package */}\n                  {selectedPackageData && (\n                    <div className=\"p-4 bg-gray-50 rounded-lg\">\n                      <h5 className=\"font-medium text-gray-900 mb-2\">套餐信息</h5>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">{selectedPackageData.name}</span>\n                          <span className=\"font-medium\">{formatCurrency(selectedPackageData.price)}</span>\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          交付时间: {selectedPackageData.deliveryTime}天\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          修改次数: {selectedPackageData.revisions}次\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Requirements Summary */}\n                  {Object.keys(requirementValues).length > 0 && (\n                    <div className=\"p-4 bg-gray-50 rounded-lg\">\n                      <h5 className=\"font-medium text-gray-900 mb-2\">需求信息</h5>\n                      <div className=\"space-y-2\">\n                        {Object.entries(requirementValues).map(([key, value]) => {\n                          const requirement = requirements.find(req => req.id === key);\n                          if (!requirement) return null;\n\n                          let displayValue = value;\n                          if (requirement.type === 'file' && value instanceof File) {\n                            displayValue = value.name;\n                          } else if (requirement.type === 'boolean') {\n                            displayValue = value ? '是' : '否';\n                          }\n\n                          return (\n                            <div key={key} className=\"text-sm\">\n                              <span className=\"text-gray-600\">{requirement.title}: </span>\n                              <span className=\"text-gray-900\">{displayValue}</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Custom Requirements */}\n                  {customRequirements && (\n                    <div className=\"p-4 bg-gray-50 rounded-lg\">\n                      <h5 className=\"font-medium text-gray-900 mb-2\">补充说明</h5>\n                      <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">\n                        {customRequirements}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Delivery Date */}\n                  {deliveryDate && (\n                    <div className=\"p-4 bg-gray-50 rounded-lg\">\n                      <h5 className=\"font-medium text-gray-900 mb-2\">交付日期</h5>\n                      <p className=\"text-sm text-gray-700\">{formatDate(deliveryDate)}</p>\n                    </div>\n                  )}\n\n                  {/* Total */}\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-lg font-medium text-gray-900\">总计</span>\n                      <span className=\"text-2xl font-bold text-blue-600\">\n                        {formatCurrency(selectedPackageData?.price || 0)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Terms */}\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h5 className=\"font-medium text-yellow-900 mb-2\">下单须知</h5>\n                  <ul className=\"text-sm text-yellow-800 space-y-1\">\n                    <li>• 付款后卖家将根据您的需求开始工作</li>\n                    <li>• 请确保需求描述清晰完整</li>\n                    <li>• 交付时间从确认需求后开始计算</li>\n                    <li>• 如有疑问，请在下单前联系卖家</li>\n                  </ul>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"px-6 pb-0\">\n              <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-sm text-red-600\">{error}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Footer */}\n          <div className=\"p-6 border-t border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  if (step === 'requirements') {\n                    setStep('package');\n                  } else if (step === 'review') {\n                    setStep('requirements');\n                  }\n                }}\n                className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n              >\n                {step === 'package' ? '取消' : '上一步'}\n              </button>\n\n              <div className=\"flex items-center space-x-3\">\n                {step !== 'review' ? (\n                  <button\n                    type=\"button\"\n                    onClick={handleNext}\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n                  >\n                    下一步\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    disabled={isSubmitting}\n                    className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isSubmitting ? '创建订单中...' : '确认下单'}\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderNow;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/QuickViewModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":21,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Service } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { useAuthStore } from '@/store';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { cn } from '@/utils';\n\ninterface QuickViewModalProps {\n  service: Service | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const QuickViewModal: React.FC<QuickViewModalProps> = ({\n  service,\n  isOpen,\n  onClose,\n}) => {\n  const navigate = useNavigate();\n  const { t, formatCurrency } = useI18n();\n  const { user } = useAuthStore();\n  const { toggleFavorite, isFavorite } = useServicesStore();\n\n  const [imageError, setImageError] = React.useState(false);\n  const [selectedImageIndex, setSelectedImageIndex] = React.useState(0);\n\n  if (!service || !isOpen) return null;\n\n  const handleViewDetails = () => {\n    navigate(`/services/${service.id}`);\n    onClose();\n  };\n\n  const handleContactSeller = () => {\n    if (!user) {\n      navigate('/auth/login');\n      return;\n    }\n    navigate(`/messages/new?seller=${service.seller.id}`);\n    onClose();\n  };\n\n  const handleFavoriteClick = () => {\n    if (!user) {\n      navigate('/auth/login');\n      return;\n    }\n    toggleFavorite(service.id);\n  };\n\n  const handleOrderNow = () => {\n    if (!user) {\n      navigate('/auth/login');\n      return;\n    }\n    navigate(`/services/${service.id}?action=order`);\n    onClose();\n  };\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    const emptyStars = 5 - Math.ceil(rating);\n\n    return (\n      <div className=\"flex items-center space-x-1\">\n        {[...Array(fullStars)].map((_, i) => (\n          <svg key={`full-${i}`} className=\"w-4 h-4 text-yellow-400 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n          </svg>\n        ))}\n        {hasHalfStar && (\n          <svg key=\"half\" className=\"w-4 h-4 text-yellow-400 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" opacity=\"0.5\" />\n            <path d=\"M10 15V0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545L10 15z\" />\n          </svg>\n        )}\n        {[...Array(emptyStars)].map((_, i) => (\n          <svg key={`empty-${i}`} className=\"w-4 h-4 text-gray-300 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n          </svg>\n        ))}\n        <span className=\"text-sm text-gray-600 ml-1\">\n          ({service.totalReviews})\n        </span>\n      </div>\n    );\n  };\n\n  const renderPrice = () => {\n    if (service.priceType === 'fixed') {\n      return (\n        <div className=\"flex items-baseline space-x-1\">\n          <span className=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency(service.price)}\n          </span>\n        </div>\n      );\n    } else if (service.priceType === 'hourly') {\n      return (\n        <div className=\"flex items-baseline space-x-1\">\n          <span className=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency(service.price)}\n          </span>\n          <span className=\"text-sm text-gray-500\">/小时</span>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"flex items-baseline space-x-1\">\n          <span className=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency(service.price)}\n          </span>\n          <span className=\"text-sm text-gray-500\">起</span>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">服务预览</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors duration-200\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n          {/* Images Section */}\n          <div className=\"space-y-4\">\n            {/* Main Image */}\n            <div className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\">\n              {!imageError && service.images?.length > 0 ? (\n                <img\n                  src={service.images[selectedImageIndex]}\n                  alt={service.title}\n                  className=\"w-full h-full object-cover\"\n                  onError={() => setImageError(true)}\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n                  <svg className=\"w-16 h-16 text-blue-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n              )}\n\n              {/* Featured Badge */}\n              {service.isFeatured && (\n                <div className=\"absolute top-4 left-4 bg-yellow-400 text-yellow-900 px-2 py-1 rounded text-xs font-semibold\">\n                  推荐\n                </div>\n              )}\n            </div>\n\n            {/* Thumbnail Images */}\n            {service.images && service.images.length > 1 && (\n              <div className=\"flex space-x-2 overflow-x-auto\">\n                {service.images.map((image, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedImageIndex(index)}\n                    className={cn(\n                      'flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2',\n                      selectedImageIndex === index\n                        ? 'border-blue-500'\n                        : 'border-gray-200 hover:border-gray-300'\n                    )}\n                  >\n                    <img\n                      src={image}\n                      alt={`${service.title} ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Content Section */}\n          <div className=\"space-y-4\">\n            {/* Title */}\n            <h1 className=\"text-xl font-bold text-gray-900\">{service.title}</h1>\n\n            {/* Seller Info */}\n            <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 rounded-full bg-gray-300 overflow-hidden\">\n                {service.seller.profile?.avatar ? (\n                  <img\n                    src={service.seller.profile.avatar}\n                    alt={service.seller.profile.displayName}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-gray-400 flex items-center justify-center\">\n                    <span className=\"text-white font-medium\">\n                      {service.seller.firstName?.[0] || 'U'}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium text-gray-900\">\n                  {service.seller.profile?.displayName || service.seller.username}\n                </h3>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                  {service.seller.profile?.averageRating && renderStars(service.seller.profile.averageRating)}\n                  {service.seller.profile?.totalReviews && (\n                    <span>({service.seller.profile.totalReviews} 评价)</span>\n                  )}\n                </div>\n              </div>\n              <button\n                onClick={() => navigate(`/sellers/${service.seller.id}`)}\n                className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n              >\n                查看资料\n              </button>\n            </div>\n\n            {/* Description */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">服务描述</h3>\n              <p className=\"text-gray-600 text-sm leading-relaxed line-clamp-4\">\n                {service.description}\n              </p>\n            </div>\n\n            {/* Features */}\n            {service.features && service.features.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">服务特色</h3>\n                <ul className=\"space-y-1\">\n                  {service.features.slice(0, 4).map((feature, index) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm text-gray-600\">\n                      <svg className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                      </svg>\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Tags */}\n            {service.tags && service.tags.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">标签</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {service.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-blue-100 text-blue-700 text-xs rounded-full\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Service Info */}\n            <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <span className=\"text-sm text-gray-500\">交付时间</span>\n                <p className=\"font-medium text-gray-900\">{service.deliveryTime} 天</p>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500\">修改次数</span>\n                <p className=\"font-medium text-gray-900\">{service.revisions} 次</p>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500\">订单数量</span>\n                <p className=\"font-medium text-gray-900\">{service.orderCount}</p>\n              </div>\n              <div>\n                <span className=\"text-sm text-gray-500\">浏览次数</span>\n                <p className=\"font-medium text-gray-900\">{service.viewCount}</p>\n              </div>\n            </div>\n\n            {/* Price and Actions */}\n            <div className=\"border-t border-gray-200 pt-4 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                {renderPrice()}\n                <button\n                  onClick={handleFavoriteClick}\n                  className=\"p-2 text-gray-400 hover:text-red-500 transition-colors duration-200\"\n                >\n                  <svg\n                    className={cn(\n                      'w-6 h-6',\n                      isFavorite(service.id) ? 'text-red-500 fill-current' : 'text-gray-400'\n                    )}\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n                    />\n                  </svg>\n                </button>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleContactSeller}\n                  className=\"flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n                >\n                  联系卖家\n                </button>\n                <button\n                  onClick={handleViewDetails}\n                  className=\"flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-200\"\n                >\n                  查看详情\n                </button>\n                <button\n                  onClick={handleOrderNow}\n                  className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n                >\n                  立即下单\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickViewModal;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/RelatedServices.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is assigned a value but never used.","line":25,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Service } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { formatCurrency } from '@/i18n';\nimport { Star, MapPin, Clock } from 'lucide-react';\n\ninterface RelatedServicesProps {\n  services: Service[];\n  title?: string;\n  className?: string;\n}\n\ninterface ServiceCardProps {\n  service: Service;\n  showSeller?: boolean;\n  compact?: boolean;\n}\n\nconst RelatedServiceCard: React.FC<ServiceCardProps> = ({\n  service,\n  showSeller = true,\n  compact = false\n}) => {\n  const { formatDate } = useI18n();\n\n  return (\n    <Link\n      to={`/services/${service.id}`}\n      className=\"group bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-all duration-300 hover:border-blue-300\"\n    >\n      {/* Service Image */}\n      <div className={`relative ${compact ? 'h-32' : 'h-48'} bg-gray-100`}>\n        {service.images.length > 0 ? (\n          <img\n            src={service.images[0]}\n            alt={service.title}\n            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n            loading=\"lazy\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center\">\n            <div className=\"text-gray-400\">\n              <svg className=\"w-12 h-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n              </svg>\n            </div>\n          </div>\n        )}\n\n        {/* Featured Badge */}\n        {service.isFeatured && (\n          <div className=\"absolute top-2 left-2\">\n            <span className=\"px-2 py-1 bg-yellow-500 text-white text-xs font-medium rounded-full\">\n              推荐\n            </span>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n          <button\n            onClick={(e) => {\n              e.preventDefault();\n              // Add to favorites\n            }}\n            className=\"p-2 bg-white/90 backdrop-blur-sm rounded-full hover:bg-white transition-colors duration-200\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      {/* Service Content */}\n      <div className=\"p-4\">\n        {/* Title */}\n        <h3 className=\"font-medium text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors duration-200\">\n          {service.title}\n        </h3>\n\n        {/* Description */}\n        {!compact && (\n          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n            {service.description}\n          </p>\n        )}\n\n        {/* Tags */}\n        {service.tags.length > 0 && !compact && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {service.tags.slice(0, 2).map((tag, index) => (\n              <span\n                key={index}\n                className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\"\n              >\n                {tag}\n              </span>\n            ))}\n            {service.tags.length > 2 && (\n              <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                +{service.tags.length - 2}\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Seller Info */}\n        {showSeller && (\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <img\n              src={service.seller.profile.avatar || '/default-avatar.png'}\n              alt={service.seller.profile.displayName}\n              className=\"w-6 h-6 rounded-full\"\n            />\n            <span className=\"text-sm text-gray-600\">\n              {service.seller.profile.displayName}\n            </span>\n            {service.seller.profile.isVerified && (\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n            )}\n          </div>\n        )}\n\n        {/* Stats */}\n        <div className=\"flex items-center justify-between text-sm text-gray-600 mb-3\">\n          <div className=\"flex items-center space-x-1\">\n            <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n            <span>{service.averageRating.toFixed(1)}</span>\n            <span>({service.totalReviews})</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <span>{service.orderCount}</span>\n            <span>订单</span>\n          </div>\n        </div>\n\n        {/* Price and Delivery */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"text-lg font-bold text-gray-900\">\n              {formatCurrency(service.price)}\n            </span>\n            {service.priceType !== 'fixed' && (\n              <span className=\"text-sm text-gray-600 ml-1\">\n                /{service.priceType === 'hourly' ? '小时' : '起'}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            <span>{service.deliveryTime}天</span>\n          </div>\n        </div>\n\n        {/* Category */}\n        {service.category && !compact && (\n          <div className=\"mt-3 pt-3 border-t border-gray-100\">\n            <span className=\"text-xs text-gray-500\">\n              {service.category.name} {service.subcategory && `> ${service.subcategory.name}`}\n            </span>\n          </div>\n        )}\n      </div>\n    </Link>\n  );\n};\n\nexport const RelatedServices: React.FC<RelatedServicesProps> = ({\n  services,\n  title = '相关服务',\n  className = ''\n}) => {\n  if (!services || services.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n        <div className=\"text-sm text-gray-600\">\n          共 {services.length} 个服务\n        </div>\n      </div>\n\n      {/* Services Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {services.map((service) => (\n          <RelatedServiceCard\n            key={service.id}\n            service={service}\n            showSeller={true}\n            compact={false}\n          />\n        ))}\n      </div>\n\n      {/* View All Link */}\n      <div className=\"text-center\">\n        <button className=\"px-6 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors duration-200\">\n          查看更多相关服务\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RelatedServices;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/SearchBar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleSuggestions'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [handleSuggestions, query]","fix":{"range":[1514,1521],"text":"[handleSuggestions, query]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { cn } from '@/utils';\n\ninterface SearchBarProps {\n  placeholder?: string;\n  onSearch?: (query: string) => void;\n  showSuggestions?: boolean;\n  className?: string;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({\n  placeholder,\n  onSearch,\n  showSuggestions = true,\n  className = '',\n  size = 'medium',\n}) => {\n  const navigate = useNavigate();\n  const { t } = useI18n();\n  const { searchQuery, setSearchQuery, searchServices } = useServicesStore();\n\n  const [query, setQuery] = useState(searchQuery);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestionsList, setShowSuggestionsList] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const suggestionsRef = useRef<HTMLDivElement>(null);\n\n  // Popular search suggestions\n  const popularSuggestions = [\n    'logo设计',\n    '网站开发',\n    'UI/UX设计',\n    '内容写作',\n    '视频剪辑',\n    'SEO优化',\n    '移动应用开发',\n    '品牌设计',\n    '社交媒体营销',\n    '翻译服务',\n  ];\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (query && query.length >= 2) {\n        handleSuggestions(query);\n      } else {\n        setSuggestions([]);\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  // Close suggestions when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        suggestionsRef.current &&\n        !suggestionsRef.current.contains(event.target as Node) &&\n        !inputRef.current?.contains(event.target as Node)\n      ) {\n        setShowSuggestionsList(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleSuggestions = (searchText: string) => {\n    // Filter popular suggestions\n    const filtered = popularSuggestions.filter(suggestion =>\n      suggestion.toLowerCase().includes(searchText.toLowerCase())\n    );\n\n    setSuggestions(filtered.slice(0, 8));\n    setShowSuggestionsList(filtered.length > 0);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setQuery(value);\n    setSearchQuery(value);\n\n    if (!value) {\n      setShowSuggestionsList(false);\n      setSuggestions([]);\n    }\n  };\n\n  const handleSearch = async (searchTerm?: string) => {\n    const searchValue = searchTerm || query;\n\n    if (!searchValue.trim()) return;\n\n    setIsLoading(true);\n    setShowSuggestionsList(false);\n\n    try {\n      if (onSearch) {\n        onSearch(searchValue);\n      } else {\n        await searchServices(searchValue);\n        // Navigate to services page if not already there\n        if (window.location.pathname !== '/services') {\n          navigate('/services');\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    handleSearch();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSearch();\n    } else if (e.key === 'Escape') {\n      setShowSuggestionsList(false);\n      inputRef.current?.blur();\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setQuery(suggestion);\n    setSearchQuery(suggestion);\n    setShowSuggestionsList(false);\n    handleSearch(suggestion);\n  };\n\n  const sizeClasses = {\n    small: 'px-3 py-2 text-sm',\n    medium: 'px-4 py-3 text-base',\n    large: 'px-6 py-4 text-lg',\n  };\n\n  const iconSizeClasses = {\n    small: 'w-4 h-4',\n    medium: 'w-5 h-5',\n    large: 'w-6 h-6',\n  };\n\n  return (\n    <div className={cn('relative w-full max-w-2xl', className)}>\n      <form onSubmit={handleSubmit} className=\"relative\">\n        <div className=\"relative\">\n          {/* Search Icon */}\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <svg\n              className={cn(\n                'text-gray-400',\n                iconSizeClasses[size]\n              )}\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          </div>\n\n          {/* Input */}\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={query}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={() => {\n              if (query && suggestions.length > 0) {\n                setShowSuggestionsList(true);\n              }\n            }}\n            placeholder={placeholder || t('search.searchQuery')}\n            className={cn(\n              'block w-full pl-10 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200',\n              sizeClasses[size],\n              isLoading && 'opacity-75'\n            )}\n          />\n\n          {/* Clear Button */}\n          {query && (\n            <button\n              type=\"button\"\n              onClick={() => {\n                setQuery('');\n                setSearchQuery('');\n                setShowSuggestionsList(false);\n                setSuggestions([]);\n                inputRef.current?.focus();\n              }}\n              className=\"absolute inset-y-0 right-12 flex items-center pr-2\"\n            >\n              <svg\n                className={cn(\n                  'text-gray-400 hover:text-gray-600 transition-colors duration-200',\n                  iconSizeClasses[size]\n                )}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          )}\n\n          {/* Search Button */}\n          <button\n            type=\"submit\"\n            disabled={isLoading || !query.trim()}\n            className={cn(\n              'absolute inset-y-0 right-0 flex items-center pr-3 text-blue-600 hover:text-blue-700 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors duration-200',\n              isLoading && 'animate-pulse'\n            )}\n          >\n            {isLoading ? (\n              <svg\n                className={cn(\n                  'animate-spin',\n                  iconSizeClasses[size]\n                )}\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                />\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                />\n              </svg>\n            ) : (\n              <svg\n                className={iconSizeClasses[size]}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M13 7l5 5m0 0l-5 5m5-5H6\"\n                />\n              </svg>\n            )}\n          </button>\n        </div>\n      </form>\n\n      {/* Suggestions Dropdown */}\n      {showSuggestions && showSuggestionsList && suggestions.length > 0 && (\n        <div\n          ref={suggestionsRef}\n          className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto\"\n        >\n          <div className=\"py-1\">\n            {/* Suggestions Header */}\n            <div className=\"px-3 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100\">\n              搜索建议\n            </div>\n\n            {/* Suggestions List */}\n            {suggestions.map((suggestion, index) => (\n              <button\n                key={index}\n                onClick={() => handleSuggestionClick(suggestion)}\n                className=\"w-full px-3 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 hover:text-blue-600 transition-colors duration-150 flex items-center space-x-2\"\n              >\n                <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n                <span>{suggestion}</span>\n              </button>\n            ))}\n\n            {/* View All Results */}\n            <div className=\"border-t border-gray-100 px-3 py-2\">\n              <button\n                onClick={() => handleSearch()}\n                className=\"w-full text-center text-sm text-blue-600 hover:text-blue-700 font-medium\"\n              >\n                查看所有结果\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchBar;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/SellerProfileCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2096,2099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2096,2099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":126,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  MessageCircle,\n  Star,\n  MapPin,\n  Clock,\n  CheckCircle,\n  Award,\n  Calendar,\n  Users,\n  TrendingUp,\n  ExternalLink,\n  Shield,\n  Globe,\n  Languages\n} from 'lucide-react';\nimport { User, UserProfile } from '@/types';\nimport { useI18n } from '@/i18n';\n\ninterface SellerProfileCardProps {\n  seller: User;\n  sellerProfile: UserProfile;\n  className?: string;\n}\n\ninterface Badge {\n  id: number;\n  name: string;\n  description: string;\n  icon: string;\n  level: 'bronze' | 'silver' | 'gold' | 'platinum';\n  earnedAt: string;\n}\n\nconst SellerBadges: React.FC<{ badges: Badge[] }> = ({ badges }) => {\n  const getBadgeColor = (level: string) => {\n    switch (level) {\n      case 'bronze': return 'text-orange-600 bg-orange-50 border-orange-200';\n      case 'silver': return 'text-gray-600 bg-gray-50 border-gray-200';\n      case 'gold': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'platinum': return 'text-purple-600 bg-purple-50 border-purple-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getBadgeIcon = (level: string) => {\n    switch (level) {\n      case 'bronze': return '🥉';\n      case 'silver': return '🥈';\n      case 'gold': return '🥇';\n      case 'platinum': return '💎';\n      default: return '🏆';\n    }\n  };\n\n  if (!badges.length) return null;\n\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {badges.slice(0, 3).map((badge) => (\n        <div\n          key={badge.id}\n          className={`flex items-center space-x-1 px-2 py-1 rounded-full border text-xs font-medium ${getBadgeColor(badge.level)}`}\n          title={badge.description}\n        >\n          <span>{getBadgeIcon(badge.level)}</span>\n          <span>{badge.name}</span>\n        </div>\n      ))}\n      {badges.length > 3 && (\n        <div className=\"flex items-center px-2 py-1 rounded-full bg-gray-100 text-gray-600 text-xs font-medium\">\n          +{badges.length - 3}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst LanguageSkills: React.FC<{ languages: any[] }> = ({ languages }) => {\n  const getProficiencyLabel = (proficiency: string) => {\n    switch (proficiency) {\n      case 'native': return '母语';\n      case 'fluent': return '流利';\n      case 'conversational': return '日常对话';\n      case 'basic': return '基础';\n      default: return proficiency;\n    }\n  };\n\n  const getProficiencyColor = (proficiency: string) => {\n    switch (proficiency) {\n      case 'native': return 'text-green-600 bg-green-50';\n      case 'fluent': return 'text-blue-600 bg-blue-50';\n      case 'conversational': return 'text-yellow-600 bg-yellow-50';\n      case 'basic': return 'text-gray-600 bg-gray-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center text-sm font-medium text-gray-900 mb-2\">\n        <Languages className=\"w-4 h-4 mr-1\" />\n        语言能力\n      </div>\n      <div className=\"flex flex-wrap gap-2\">\n        {languages.map((lang, index) => (\n          <div\n            key={index}\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getProficiencyColor(lang.proficiency)}`}\n          >\n            {lang.language} ({getProficiencyLabel(lang.proficiency)})\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const SellerProfileCard: React.FC<SellerProfileCardProps> = ({\n  seller,\n  sellerProfile,\n  className = ''\n}) => {\n  const { t, formatCurrency, formatDate } = useI18n();\n  const [isContacting, setIsContacting] = useState(false);\n\n  const handleContactSeller = () => {\n    setIsContacting(true);\n    // This would open a contact modal or navigate to messages\n    setTimeout(() => setIsContacting(false), 1000);\n  };\n\n  const completionRate = sellerProfile.completedProjects\n    ? Math.round((sellerProfile.completedProjects / Math.max(sellerProfile.completedProjects + 5, 1)) * 100)\n    : 0;\n\n  return (\n    <div className={`bg-white rounded-xl border border-gray-200 shadow-sm ${className}`}>\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-start space-x-4 mb-6\">\n          <Link to={`/profile/${seller.id}`}>\n            <img\n              src={sellerProfile.avatar || '/default-avatar.png'}\n              alt={sellerProfile.displayName}\n              className=\"w-16 h-16 rounded-full object-cover border-2 border-gray-200\"\n            />\n          </Link>\n          <div className=\"flex-1 min-w-0\">\n            <Link\n              to={`/profile/${seller.id}`}\n              className=\"text-lg font-semibold text-gray-900 hover:text-blue-600 transition-colors duration-200\"\n            >\n              {sellerProfile.displayName}\n            </Link>\n            {sellerProfile.isVerified && (\n              <div className=\"flex items-center mt-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-600 mr-1\" />\n                <span className=\"text-sm text-green-600\">已认证</span>\n              </div>\n            )}\n            <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n              {sellerProfile.bio}\n            </p>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-xl font-bold text-gray-900\">\n              {sellerProfile.averageRating?.toFixed(1) || '0.0'}\n            </div>\n            <div className=\"flex items-center justify-center mt-1\">\n              <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n              <span className=\"text-sm text-gray-600 ml-1\">\n                {sellerProfile.totalReviews || 0} 评价\n              </span>\n            </div>\n          </div>\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-xl font-bold text-gray-900\">\n              {sellerProfile.completedProjects || 0}\n            </div>\n            <div className=\"text-sm text-gray-600 mt-1\">已完成订单</div>\n          </div>\n        </div>\n\n        {/* Response Stats */}\n        <div className=\"space-y-3 mb-6\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center text-gray-600\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              平均响应时间\n            </div>\n            <span className=\"font-medium text-gray-900\">\n              {sellerProfile.responseTime || 1}小时内\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center text-gray-600\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              完成率\n            </div>\n            <span className=\"font-medium text-gray-900\">{completionRate}%</span>\n          </div>\n          {sellerProfile.location && (\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center text-gray-600\">\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                位置\n              </div>\n              <span className=\"font-medium text-gray-900\">{sellerProfile.location}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Languages */}\n        {sellerProfile.languages?.length > 0 && (\n          <div className=\"mb-6\">\n            <LanguageSkills languages={sellerProfile.languages} />\n          </div>\n        )}\n\n        {/* Badges */}\n        {sellerProfile.badges?.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center text-sm font-medium text-gray-900 mb-2\">\n              <Award className=\"w-4 h-4 mr-1\" />\n              成就徽章\n            </div>\n            <SellerBadges badges={sellerProfile.badges} />\n          </div>\n        )}\n\n        {/* Member Since */}\n        <div className=\"flex items-center text-sm text-gray-600 mb-6\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          <span>加入时间: {formatDate(seller.createdAt)}</span>\n        </div>\n\n        {/* Skills */}\n        {sellerProfile.skills?.length > 0 && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">技能专长</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {sellerProfile.skills.slice(0, 6).map((skill, index) => (\n                <span\n                  key={index}\n                  className=\"px-3 py-1 bg-blue-50 text-blue-700 text-xs font-medium rounded-full\"\n                >\n                  {skill}\n                </span>\n              ))}\n              {sellerProfile.skills.length > 6 && (\n                <span className=\"px-3 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full\">\n                  +{sellerProfile.skills.length - 6}\n                </span>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Contact & View Profile */}\n        <div className=\"space-y-3\">\n          <button\n            onClick={handleContactSeller}\n            disabled={isContacting}\n            className=\"w-full flex items-center justify-center space-x-2 py-3 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <MessageCircle className=\"w-5 h-5\" />\n            <span>{isContacting ? '连接中...' : '联系卖家'}</span>\n          </button>\n\n          <Link\n            to={`/profile/${seller.id}`}\n            className=\"w-full flex items-center justify-center space-x-2 py-3 px-4 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n          >\n            <ExternalLink className=\"w-5 h-5\" />\n            <span>查看完整资料</span>\n          </Link>\n        </div>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n            <div className=\"flex items-center\">\n              <Shield className=\"w-3 h-3 mr-1\" />\n              身份验证\n            </div>\n            <div className=\"flex items-center\">\n              <Users className=\"w-3 h-3 mr-1\" />\n              {sellerProfile.totalReviews || 0} 位客户\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SellerProfileCard;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServiceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServiceDescription.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":203,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, FileText, Play, Download, Eye } from 'lucide-react';\nimport { useI18n } from '@/i18n';\n\ninterface ServiceDescriptionProps {\n  title: string;\n  description: string;\n  features?: string[];\n  requirements?: string[];\n  deliveryInfo?: string;\n  revisions?: number;\n  files?: {\n    name: string;\n    url: string;\n    type: string;\n    size: number;\n  }[];\n  videos?: {\n    title: string;\n    url: string;\n    thumbnail?: string;\n    duration?: string;\n  }[];\n  className?: string;\n}\n\ninterface CollapsibleSectionProps {\n  title: string;\n  children: React.ReactNode;\n  defaultOpen?: boolean;\n}\n\nconst CollapsibleSection: React.FC<CollapsibleSectionProps> = ({\n  title,\n  children,\n  defaultOpen = false\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full flex items-center justify-between p-4 bg-gray-50 hover:bg-gray-100 transition-colors duration-200\"\n        aria-expanded={isOpen}\n      >\n        <h4 className=\"font-medium text-gray-900\">{title}</h4>\n        {isOpen ? (\n          <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n        ) : (\n          <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n        )}\n      </button>\n      {isOpen && (\n        <div className=\"p-4 bg-white\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst FileAttachments: React.FC<{ files: ServiceDescriptionProps['files'] }> = ({ files }) => {\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.includes('image')) return '🖼️';\n    if (type.includes('pdf')) return '📄';\n    if (type.includes('word') || type.includes('document')) return '📝';\n    if (type.includes('excel') || type.includes('spreadsheet')) return '📊';\n    if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n    if (type.includes('zip') || type.includes('rar')) return '📦';\n    return '📎';\n  };\n\n  if (!files?.length) return null;\n\n  return (\n    <div className=\"space-y-2\">\n      {files.map((file, index) => (\n        <div\n          key={index}\n          className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors duration-200\"\n        >\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-2xl\">{getFileIcon(file.type)}</span>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n              <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => window.open(file.url, '_blank')}\n              className=\"p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors duration-200\"\n              title=\"预览\"\n            >\n              <Eye className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => {\n                const link = document.createElement('a');\n                link.href = file.url;\n                link.download = file.name;\n                link.click();\n              }}\n              className=\"p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors duration-200\"\n              title=\"下载\"\n            >\n              <Download className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst VideoGallery: React.FC<{ videos: ServiceDescriptionProps['videos'] }> = ({ videos }) => {\n  const [selectedVideo, setSelectedVideo] = useState<string | null>(null);\n\n  if (!videos?.length) return null;\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {videos.map((video, index) => (\n          <div\n            key={index}\n            className=\"relative group cursor-pointer rounded-lg overflow-hidden\"\n            onClick={() => setSelectedVideo(video.url)}\n          >\n            <div className=\"aspect-video bg-gray-200 relative\">\n              {video.thumbnail ? (\n                <img\n                  src={video.thumbnail}\n                  alt={video.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n                  <FileText className=\"w-8 h-8 text-gray-400\" />\n                </div>\n              )}\n              <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                <Play className=\"w-12 h-12 text-white\" />\n              </div>\n              {video.duration && (\n                <div className=\"absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n                  {video.duration}\n                </div>\n              )}\n            </div>\n            <div className=\"p-3 bg-white\">\n              <p className=\"text-sm font-medium text-gray-900 line-clamp-1\">{video.title}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Video Modal */}\n      {selectedVideo && (\n        <div\n          className=\"fixed inset-0 z-50 bg-black flex items-center justify-center p-4\"\n          onClick={() => setSelectedVideo(null)}\n        >\n          <button\n            onClick={() => setSelectedVideo(null)}\n            className=\"absolute top-4 right-4 text-white p-2 hover:bg-white/10 rounded-full transition-colors duration-200\"\n          >\n            ×\n          </button>\n          <video\n            src={selectedVideo}\n            className=\"max-w-full max-h-full\"\n            controls\n            autoPlay\n            onClick={(e) => e.stopPropagation()}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ServiceDescription: React.FC<ServiceDescriptionProps> = ({\n  title,\n  description,\n  features,\n  requirements,\n  deliveryInfo,\n  revisions,\n  files,\n  videos,\n  className = ''\n}) => {\n  const { t } = useI18n();\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Main Description */}\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">{title}</h2>\n        <div\n          className=\"prose prose-gray max-w-none\"\n          dangerouslySetInnerHTML={{ __html: description }}\n        />\n      </div>\n\n      {/* Features */}\n      {features?.length > 0 && (\n        <CollapsibleSection title=\"服务特性\" defaultOpen={true}>\n          <ul className=\"space-y-2\">\n            {features.map((feature, index) => (\n              <li key={index} className=\"flex items-start\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                <span className=\"text-gray-700\">{feature}</span>\n              </li>\n            ))}\n          </ul>\n        </CollapsibleSection>\n      )}\n\n      {/* Requirements */}\n      {requirements?.length > 0 && (\n        <CollapsibleSection title=\"客户需求\">\n          <ul className=\"space-y-2\">\n            {requirements.map((requirement, index) => (\n              <li key={index} className=\"flex items-start\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                <span className=\"text-gray-700\">{requirement}</span>\n              </li>\n            ))}\n          </ul>\n        </CollapsibleSection>\n      )}\n\n      {/* Delivery Info */}\n      {deliveryInfo && (\n        <CollapsibleSection title=\"交付说明\">\n          <div className=\"text-gray-700\">\n            <p>{deliveryInfo}</p>\n            {revisions !== undefined && (\n              <p className=\"mt-2 text-sm text-gray-600\">\n                <strong>修改次数:</strong> {revisions} 次\n              </p>\n            )}\n          </div>\n        </CollapsibleSection>\n      )}\n\n      {/* Videos */}\n      {videos?.length > 0 && (\n        <CollapsibleSection title=\"视频介绍\">\n          <VideoGallery videos={videos} />\n        </CollapsibleSection>\n      )}\n\n      {/* File Attachments */}\n      {files?.length > 0 && (\n        <CollapsibleSection title=\"相关文件\">\n          <FileAttachments files={files} />\n        </CollapsibleSection>\n      )}\n\n      {/* Additional Info */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">温馨提示</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 如有任何疑问，请在购买前联系卖家咨询</li>\n          <li>• 请详细描述您的需求，以便卖家提供更好的服务</li>\n          <li>• 交付时间从收到完整需求并确认开始计算</li>\n          <li>• 如需额外修改，可能产生额外费用</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ServiceDescription;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServiceFAQs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServiceGallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServicePricing.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":25,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currency' is assigned a value but never used.","line":124,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":129,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Check, Star, Clock, RotateCcw, HelpCircle, Info } from 'lucide-react';\nimport { ServicePackage } from '@/types';\nimport { useI18n } from '@/i18n';\n\ninterface ServicePricingProps {\n  packages: ServicePackage[];\n  currency?: string;\n  selectedPackage?: number;\n  onPackageSelect?: (packageId: number) => void;\n  className?: string;\n}\n\ninterface PackageComparisonProps {\n  packages: ServicePackage[];\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst PackageComparison: React.FC<PackageComparisonProps> = ({\n  packages,\n  isOpen,\n  onClose\n}) => {\n  const { t, formatCurrency } = useI18n();\n\n  if (!isOpen) return null;\n\n  // Get all unique features across packages\n  const allFeatures = Array.from(\n    new Set(\n      packages.flatMap(pkg => pkg.features)\n    )\n  );\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4\">\n        <div className=\"fixed inset-0 bg-black opacity-50\" onClick={onClose} />\n\n        <div className=\"relative bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">套餐对比</h2>\n              <button\n                onClick={onClose}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n              >\n                <HelpCircle className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Comparison Table */}\n          <div className=\"p-6 overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                    功能特性\n                  </th>\n                  {packages.map((pkg) => (\n                    <th\n                      key={pkg.id}\n                      className=\"text-center py-3 px-4 font-medium text-gray-900 min-w-[150px]\"\n                    >\n                      <div>\n                        <div className=\"text-lg font-semibold\">{pkg.name}</div>\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          {formatCurrency(pkg.price)}\n                        </div>\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {/* Basic Info Row */}\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium text-gray-700\">基本信息</td>\n                  {packages.map((pkg) => (\n                    <td key={pkg.id} className=\"py-3 px-4 text-center\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center justify-center text-sm text-gray-600\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          {pkg.deliveryTime}天\n                        </div>\n                        <div className=\"flex items-center justify-center text-sm text-gray-600\">\n                          <RotateCcw className=\"w-4 h-4 mr-1\" />\n                          {pkg.revisions}次修改\n                        </div>\n                      </div>\n                    </td>\n                  ))}\n                </tr>\n\n                {/* Features */}\n                {allFeatures.map((feature, index) => (\n                  <tr key={index} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 px-4 text-gray-700\">{feature}</td>\n                    {packages.map((pkg) => (\n                      <td key={pkg.id} className=\"py-3 px-4 text-center\">\n                        {pkg.features.includes(feature) ? (\n                          <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                        ) : (\n                          <span className=\"text-gray-400\">—</span>\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const ServicePricing: React.FC<ServicePricingProps> = ({\n  packages,\n  currency = 'CNY',\n  selectedPackage,\n  onPackageSelect,\n  className = ''\n}) => {\n  const { t, formatCurrency } = useI18n();\n  const [showComparison, setShowComparison] = useState(false);\n  const [hoveredPackage, setHoveredPackage] = useState<number | null>(null);\n\n  if (!packages || packages.length === 0) {\n    return (\n      <div className={`text-center py-8 bg-gray-50 rounded-lg ${className}`}>\n        <p className=\"text-gray-500\">暂无价格方案</p>\n      </div>\n    );\n  }\n\n  const handlePackageClick = (packageId: number) => {\n    onPackageSelect?.(packageId);\n  };\n\n  const singlePackage = packages.length === 1;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold text-gray-900\">\n          {singlePackage ? '价格' : '选择套餐'}\n        </h3>\n        {!singlePackage && packages.length > 1 && (\n          <button\n            onClick={() => setShowComparison(true)}\n            className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition-colors duration-200\"\n          >\n            <HelpCircle className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">对比套餐</span>\n          </button>\n        )}\n      </div>\n\n      {/* Package Cards */}\n      <div className={`grid gap-4 ${singlePackage ? 'grid-cols-1' : 'grid-cols-1 md:grid-cols-3'}`}>\n        {packages.map((pkg) => {\n          const isSelected = selectedPackage === pkg.id;\n          const isPopular = pkg.isPopular;\n          const isHovered = hoveredPackage === pkg.id;\n\n          return (\n            <div\n              key={pkg.id}\n              className={`relative bg-white rounded-xl border-2 transition-all duration-300 cursor-pointer ${\n                isSelected\n                  ? 'border-blue-600 ring-2 ring-blue-100 shadow-lg'\n                  : isHovered\n                  ? 'border-gray-300 shadow-md'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onMouseEnter={() => setHoveredPackage(pkg.id)}\n              onMouseLeave={() => setHoveredPackage(null)}\n              onClick={() => handlePackageClick(pkg.id)}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  handlePackageClick(pkg.id);\n                }\n              }}\n              aria-pressed={isSelected}\n            >\n              {/* Popular Badge */}\n              {isPopular && (\n                <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                  <div className=\"flex items-center space-x-1 bg-blue-600 text-white px-3 py-1 rounded-full text-sm font-medium\">\n                    <Star className=\"w-4 h-4\" />\n                    <span>推荐</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Package Content */}\n              <div className=\"p-6\">\n                {/* Package Name */}\n                <div className=\"text-center mb-4\">\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    {pkg.name}\n                  </h4>\n                  {pkg.description && (\n                    <p className=\"text-sm text-gray-600\">{pkg.description}</p>\n                  )}\n                </div>\n\n                {/* Price */}\n                <div className=\"text-center mb-6\">\n                  <div className=\"text-3xl font-bold text-gray-900\">\n                    {formatCurrency(pkg.price)}\n                  </div>\n                  <div className=\"text-sm text-gray-500 mt-1\">\n                    一次性付款\n                  </div>\n                </div>\n\n                {/* Delivery and Revisions */}\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Clock className=\"w-4 h-4 mr-2 text-gray-400\" />\n                    <span>{pkg.deliveryTime}天交付</span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <RotateCcw className=\"w-4 h-4 mr-2 text-gray-400\" />\n                    <span>{pkg.revisions}次修改机会</span>\n                  </div>\n                </div>\n\n                {/* Features */}\n                <div className=\"space-y-2\">\n                  {pkg.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-start\">\n                      <Check className=\"w-4 h-4 text-green-600 mr-2 flex-shrink-0 mt-0.5\" />\n                      <span className=\"text-sm text-gray-700\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                {/* CTA Button */}\n                <button\n                  className={`w-full mt-6 py-3 px-4 rounded-lg font-medium transition-all duration-200 ${\n                    isSelected\n                      ? 'bg-blue-600 text-white hover:bg-blue-700'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {isSelected ? '已选择' : '选择此套餐'}\n                </button>\n              </div>\n\n              {/* Hover Info */}\n              {isHovered && !isSelected && (\n                <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-900 text-white text-xs py-2 px-3 rounded-lg whitespace-nowrap\">\n                  点击选择此套餐\n                  <div className=\"absolute top-full left-1/2 -translate-x-1/2 -mt-1\">\n                    <div className=\"border-4 border-transparent border-t-gray-900\"></div>\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Info Note */}\n      <div className=\"flex items-start space-x-2 p-4 bg-blue-50 rounded-lg\">\n        <Info className=\"w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5\" />\n        <div className=\"text-sm text-blue-800\">\n          <p className=\"font-medium mb-1\">购买说明</p>\n          <ul className=\"space-y-1 text-blue-700\">\n            <li>• 选择适合您需求的套餐</li>\n            <li>• 付款后卖家将在承诺时间内完成工作</li>\n            <li>• 如需修改，请在修改次数范围内提出</li>\n            <li>• 如有疑问，可先联系卖家咨询</li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Package Comparison Modal */}\n      <PackageComparison\n        packages={packages}\n        isOpen={showComparison}\n        onClose={() => setShowComparison(false)}\n      />\n    </div>\n  );\n};\n\nexport default ServicePricing;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/ServiceReviews.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'averageRating', 'initialReviews', 'loadReviews', and 'totalReviews'. Either include them or remove the dependency array. If 'setStats' needs the current value of 'initialReviews', you can also switch to useReducer instead of useState and read 'initialReviews' in the reducer.","line":164,"column":6,"nodeType":"ArrayExpression","endLine":164,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [averageRating, initialReviews, loadReviews, totalReviews]","fix":{"range":[4660,4662],"text":"[averageRating, initialReviews, loadReviews, totalReviews]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Review } from '@/types';\nimport { ReviewCard, ReviewSummary, ReviewFilter, ReviewPagination, ReviewFilters } from '@/components/reviews';\nimport { serviceService } from '@/services/services';\nimport { useI18n } from '@/i18n';\n\ninterface ServiceReviewsProps {\n  serviceId: string;\n  initialReviews?: Review[];\n  averageRating?: number;\n  totalReviews?: number;\n  className?: string;\n}\n\ninterface ReviewStats {\n  averageRating: number;\n  totalReviews: number;\n  ratingDistribution: {\n    5: number;\n    4: number;\n    3: number;\n    2: number;\n    1: number;\n  };\n}\n\nexport const ServiceReviews: React.FC<ServiceReviewsProps> = ({\n  serviceId,\n  initialReviews = [],\n  averageRating = 0,\n  totalReviews = 0,\n  className = ''\n}) => {\n  const { formatNumber } = useI18n();\n  const [reviews, setReviews] = useState<Review[]>(initialReviews);\n  const [stats, setStats] = useState<ReviewStats>({\n    averageRating,\n    totalReviews,\n    ratingDistribution: {\n      5: 0,\n      4: 0,\n      3: 0,\n      2: 0,\n      1: 0\n    }\n  });\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState<ReviewFilters>({\n    sortBy: 'date',\n    sortOrder: 'desc'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    totalPages: 1,\n    itemsPerPage: 10\n  });\n\n  // Calculate rating distribution\n  const calculateRatingDistribution = (reviewList: Review[]) => {\n    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };\n    reviewList.forEach(review => {\n      const rating = Math.floor(review.rating);\n      if (rating >= 1 && rating <= 5) {\n        distribution[rating as keyof typeof distribution]++;\n      }\n    });\n    return distribution;\n  };\n\n  // Load reviews\n  const loadReviews = async (page = 1, newFilters?: ReviewFilters) => {\n    setLoading(true);\n    try {\n      const response = await serviceService.getServiceReviews(serviceId, {\n        ...filters,\n        ...newFilters,\n        page,\n        pageSize: pagination.itemsPerPage\n      });\n\n      if (response.success && response.data) {\n        setReviews(response.data.results);\n        setPagination(prev => ({\n          ...prev,\n          currentPage: page,\n          totalPages: Math.ceil(response.data!.count / prev.itemsPerPage)\n        }));\n\n        // Update stats if this is the first page or no filters\n        if (page === 1 && !newFilters?.rating && !newFilters?.search) {\n          const avgRating = response.data.results.reduce((sum, review) => sum + review.rating, 0) / response.data.results.length;\n          setStats({\n            averageRating: avgRating || 0,\n            totalReviews: response.data.count,\n            ratingDistribution: calculateRatingDistribution(response.data.results)\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load reviews:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (newFilters: ReviewFilters) => {\n    setFilters(newFilters);\n    setPagination(prev => ({ ...prev, currentPage: 1 }));\n    loadReviews(1, newFilters);\n  };\n\n  // Handle page changes\n  const handlePageChange = (page: number) => {\n    setPagination(prev => ({ ...prev, currentPage: page }));\n    loadReviews(page, filters);\n  };\n\n  // Handle page size changes\n  const handlePageSizeChange = (pageSize: number) => {\n    setPagination(prev => ({ ...prev, itemsPerPage: pageSize, currentPage: 1 }));\n    // Reload with new page size\n    setTimeout(() => loadReviews(1, filters), 0);\n  };\n\n  // Handle helpful click\n  const handleHelpfulClick = async (reviewId: number) => {\n    try {\n      await serviceService.markReviewHelpful(reviewId.toString());\n      // Update the local review\n      setReviews(prev => prev.map(review =>\n        review.id === reviewId\n          ? { ...review, helpfulCount: review.helpfulCount + 1 }\n          : review\n      ));\n    } catch (error) {\n      console.error('Failed to mark review as helpful:', error);\n    }\n  };\n\n  // Handle reply click\n  const handleReplyClick = (reviewId: number) => {\n    // This would open a reply modal or expand reply form\n    console.log('Reply to review:', reviewId);\n  };\n\n  // Handle report click\n  const handleReportClick = (reviewId: number) => {\n    // This would open a report modal\n    console.log('Report review:', reviewId);\n  };\n\n  // Load initial data\n  useEffect(() => {\n    if (initialReviews.length === 0) {\n      loadReviews();\n    } else {\n      setStats({\n        averageRating,\n        totalReviews,\n        ratingDistribution: calculateRatingDistribution(initialReviews)\n      });\n    }\n  }, []);\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">客户评价</h2>\n        {stats.totalReviews > 0 && (\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-3xl font-bold text-gray-900\">\n                {stats.averageRating.toFixed(1)}\n              </span>\n              <span className=\"text-gray-500\">/ 5.0</span>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              ({formatNumber(stats.totalReviews)} 条评价)\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Reviews Summary */}\n      {stats.totalReviews > 0 && (\n        <ReviewSummary\n          averageRating={stats.averageRating}\n          totalReviews={stats.totalReviews}\n          ratingDistribution={stats.ratingDistribution}\n        />\n      )}\n\n      {/* Filters */}\n      {stats.totalReviews > 0 && (\n        <ReviewFilter\n          onFilterChange={handleFilterChange}\n          totalReviews={stats.totalReviews}\n        />\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {loading ? (\n          // Loading State\n          Array.from({ length: 3 }).map((_, index) => (\n            <div key={index} className=\"bg-white border border-gray-200 rounded-lg p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"flex items-start space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-32 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : reviews.length > 0 ? (\n          reviews.map((review) => (\n            <ReviewCard\n              key={review.id}\n              review={review}\n              onHelpfulClick={handleHelpfulClick}\n              onReplyClick={handleReplyClick}\n              onReportClick={handleReportClick}\n            />\n          ))\n        ) : (\n          <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n            <div className=\"text-gray-400 mb-4\">\n              <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {filters.rating || filters.search ? '没有找到匹配的评价' : '暂无评价'}\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              {filters.rating || filters.search\n                ? '尝试调整筛选条件查看更多评价'\n                : '成为第一个评价此服务的人'\n              }\n            </p>\n            {filters.rating || filters.search ? (\n              <button\n                onClick={() => handleFilterChange({ sortBy: 'date', sortOrder: 'desc' })}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n              >\n                清除筛选\n              </button>\n            ) : (\n              <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\">\n                购买服务后评价\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {!loading && reviews.length > 0 && pagination.totalPages > 1 && (\n        <ReviewPagination\n          currentPage={pagination.currentPage}\n          totalPages={pagination.totalPages}\n          totalItems={stats.totalReviews}\n          itemsPerPage={pagination.itemsPerPage}\n          onPageChange={handlePageChange}\n          onPageSizeChange={handlePageSizeChange}\n        />\n      )}\n\n      {/* Write Review CTA */}\n      {!loading && stats.totalReviews === 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 text-center\">\n          <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">\n            分享您的体验\n          </h3>\n          <p className=\"text-blue-800 mb-4\">\n            您的评价将帮助其他买家做出更好的决定\n          </p>\n          <button className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\">\n            购买服务后评价\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ServiceReviews;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/SortOptions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getCurrentSortLabel' is assigned a value but never used.","line":32,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { cn } from '@/utils';\n\ninterface SortOptionsProps {\n  className?: string;\n  showViewToggle?: boolean;\n}\n\nexport const SortOptions: React.FC<SortOptionsProps> = ({\n  className = '',\n  showViewToggle = true,\n}) => {\n  const { t } = useI18n();\n  const { sortBy, sortOrder, setSortBy, viewMode, setViewMode } = useServicesStore();\n\n  const sortOptions = [\n    { value: 'created_at', label: '最新发布', order: 'desc' as const },\n    { value: 'created_at', label: '最早发布', order: 'asc' as const },\n    { value: 'price', label: '价格从低到高', order: 'asc' as const },\n    { value: 'price', label: '价格从高到低', order: 'desc' as const },\n    { value: 'average_rating', label: '好评优先', order: 'desc' as const },\n    { value: 'order_count', label: '销量优先', order: 'desc' as const },\n    { value: 'delivery_time', label: '交付时间', order: 'asc' as const },\n  ];\n\n  const handleSortChange = (value: string, order: 'asc' | 'desc') => {\n    setSortBy(value, order);\n  };\n\n  const getCurrentSortLabel = () => {\n    const current = sortOptions.find(option =>\n      option.value === sortBy && option.order === sortOrder\n    );\n    return current?.label || '最新发布';\n  };\n\n  return (\n    <div className={cn('flex items-center justify-between', className)}>\n      {/* Sort Dropdown */}\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-sm text-gray-600\">排序:</span>\n        <div className=\"relative\">\n          <select\n            value={`${sortBy}-${sortOrder}`}\n            onChange={(e) => {\n              const [value, order] = e.target.value.split('-');\n              handleSortChange(value, order as 'asc' | 'desc');\n            }}\n            className=\"appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 text-sm text-gray-700 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 cursor-pointer\"\n          >\n            {sortOptions.map((option) => (\n              <option\n                key={`${option.value}-${option.order}`}\n                value={`${option.value}-${option.order}`}\n              >\n                {option.label}\n              </option>\n            ))}\n          </select>\n          {/* Dropdown Arrow */}\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n\n      {/* View Toggle */}\n      {showViewToggle && (\n        <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\n          <button\n            onClick={() => setViewMode('grid')}\n            className={cn(\n              'flex items-center justify-center w-8 h-8 rounded transition-colors duration-200',\n              viewMode === 'grid'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            )}\n            title=\"网格视图\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\n            </svg>\n          </button>\n          <button\n            onClick={() => setViewMode('list')}\n            className={cn(\n              'flex items-center justify-center w-8 h-8 rounded transition-colors duration-200',\n              viewMode === 'list'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            )}\n            title=\"列表视图\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n            </svg>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SortOptions;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/TopSellers.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { User } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { cn } from '@/utils';\n\ninterface TopSellersProps {\n  className?: string;\n  limit?: number;\n  title?: string;\n  showViewAll?: boolean;\n}\n\nexport const TopSellers: React.FC<TopSellersProps> = ({\n  className = '',\n  limit = 8,\n  title = '顶级卖家',\n  showViewAll = true,\n}) => {\n  const navigate = useNavigate();\n  const { t } = useI18n();\n  const { topSellers, fetchTopSellers } = useServicesStore();\n\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  useEffect(() => {\n    const loadTopSellers = async () => {\n      setIsLoading(true);\n      try {\n        await fetchTopSellers();\n      } catch (error) {\n        console.error('Failed to load top sellers:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTopSellers();\n  }, [fetchTopSellers]);\n\n  const handleViewAll = () => {\n    navigate('/sellers?sort=rating');\n  };\n\n  const handleSellerClick = (seller: User) => {\n    navigate(`/sellers/${seller.id}`);\n  };\n\n  const handleContactSeller = (e: React.MouseEvent, seller: User) => {\n    e.stopPropagation();\n    navigate(`/messages/new?seller=${seller.id}`);\n  };\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    const emptyStars = 5 - Math.ceil(rating);\n\n    return (\n      <div className=\"flex items-center space-x-1\">\n        {[...Array(fullStars)].map((_, i) => (\n          <svg key={`full-${i}`} className=\"w-4 h-4 text-yellow-400 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n          </svg>\n        ))}\n        {hasHalfStar && (\n          <svg key=\"half\" className=\"w-4 h-4 text-yellow-400 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" opacity=\"0.5\" />\n            <path d=\"M10 15V0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545L10 15z\" />\n          </svg>\n        )}\n        {[...Array(emptyStars)].map((_, i) => (\n          <svg key={`empty-${i}`} className=\"w-4 h-4 text-gray-300 fill-current\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n          </svg>\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className={cn('space-y-4', className)}>\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          {showViewAll && (\n            <button className=\"text-blue-600 hover:text-blue-700 font-medium\">\n              查看全部\n            </button>\n          )}\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(limit)].map((_, index) => (\n            <div key={index} className=\"animate-pulse\">\n              <div className=\"bg-white rounded-lg shadow-sm p-4 text-center space-y-3\">\n                <div className=\"w-20 h-20 bg-gray-200 rounded-full mx-auto\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full mx-auto\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-1/2 mx-auto\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const sellersToShow = topSellers.slice(0, limit);\n\n  if (sellersToShow.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          <p className=\"text-gray-600 mt-1\">\n            经验丰富的专业卖家，提供优质服务\n          </p>\n        </div>\n        {showViewAll && (\n          <button\n            onClick={handleViewAll}\n            className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700 font-medium transition-colors duration-200\"\n          >\n            <span>查看全部</span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {/* Sellers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {sellersToShow.map((seller, index) => (\n          <div\n            key={seller.id}\n            className=\"bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 p-6 text-center cursor-pointer group\"\n            onClick={() => handleSellerClick(seller)}\n          >\n            {/* Rank Badge */}\n            {index < 3 && (\n              <div className={cn(\n                'absolute -top-2 -right-2 w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm',\n                index === 0 ? 'bg-yellow-400' : index === 1 ? 'bg-gray-400' : 'bg-orange-400'\n              )}>\n                {index + 1}\n              </div>\n            )}\n\n            {/* Avatar */}\n            <div className=\"relative w-20 h-20 mx-auto mb-4\">\n              <div className=\"w-full h-full rounded-full overflow-hidden bg-gray-200\">\n                {seller.profile?.avatar ? (\n                  <img\n                    src={seller.profile.avatar}\n                    alt={seller.profile.displayName}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-gradient-to-br from-blue-400 to-indigo-600 flex items-center justify-center\">\n                    <span className=\"text-white text-2xl font-bold\">\n                      {seller.firstName?.[0] || seller.username?.[0] || 'U'}\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              {/* Online Indicator */}\n              <div className=\"absolute bottom-0 right-0 w-4 h-4 bg-green-400 border-2 border-white rounded-full\"></div>\n            </div>\n\n            {/* Seller Info */}\n            <h3 className=\"font-semibold text-gray-900 mb-1 group-hover:text-blue-600 transition-colors duration-200\">\n              {seller.profile?.displayName || seller.username}\n            </h3>\n\n            {/* Bio */}\n            {seller.profile?.bio && (\n              <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                {seller.profile.bio}\n              </p>\n            )}\n\n            {/* Rating */}\n            {seller.profile?.averageRating && (\n              <div className=\"flex items-center justify-center space-x-1 mb-3\">\n                {renderStars(seller.profile.averageRating)}\n                <span className=\"text-sm text-gray-600\">\n                  ({seller.profile.totalReviews})\n                </span>\n              </div>\n            )}\n\n            {/* Skills */}\n            {seller.profile?.skills && seller.profile.skills.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 justify-center mb-4\">\n                {seller.profile.skills.slice(0, 3).map((skill, skillIndex) => (\n                  <span\n                    key={skillIndex}\n                    className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\"\n                  >\n                    {skill}\n                  </span>\n                ))}\n                {seller.profile.skills.length > 3 && (\n                  <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                    +{seller.profile.skills.length - 3}\n                  </span>\n                )}\n              </div>\n            )}\n\n            {/* Stats */}\n            <div className=\"text-sm text-gray-600 space-y-1 mb-4\">\n              <div className=\"flex justify-between\">\n                <span>订单数</span>\n                <span className=\"font-medium\">{seller.profile?.completedProjects || 0}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>响应时间</span>\n                <span className=\"font-medium\">{seller.profile?.responseTime || 1}小时</span>\n              </div>\n              {seller.profile?.hourlyRate && (\n                <div className=\"flex justify-between\">\n                  <span>时薪</span>\n                  <span className=\"font-medium\">¥{seller.profile.hourlyRate}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSellerClick(seller);\n                }}\n                className=\"flex-1 px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n              >\n                查看资料\n              </button>\n              <button\n                onClick={(e) => handleContactSeller(e, seller)}\n                className=\"flex-1 px-3 py-2 border border-gray-300 text-gray-700 text-sm rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n              >\n                联系\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* View All Button (Mobile) */}\n      {showViewAll && (\n        <div className=\"flex justify-center md:hidden\">\n          <button\n            onClick={handleViewAll}\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium\"\n          >\n            查看所有顶级卖家\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TopSellers;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/BasicInfoForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/DraftManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleAutoSave'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [currentData, autoSave, autoSaveInterval, disabled, handleAutoSave]","fix":{"range":[1340,1391],"text":"[currentData, autoSave, autoSaveInterval, disabled, handleAutoSave]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceDraft, ServiceFormData } from '@/types/services';\nimport { formatDate, formatRelativeTime } from '@/utils';\nimport Button from '@/components/ui/Button';\n\nexport interface DraftManagerProps {\n  drafts: ServiceDraft[];\n  onLoadDraft: (draft: ServiceDraft) => void;\n  onDeleteDraft: (draftId: string) => void;\n  onSaveDraft: (data: Partial<ServiceFormData>) => void;\n  currentData: Partial<ServiceFormData>;\n  className?: string;\n  disabled?: boolean;\n  autoSave?: boolean;\n  autoSaveInterval?: number; // in milliseconds\n}\n\nconst DraftManager: React.FC<DraftManagerProps> = ({\n  drafts,\n  onLoadDraft,\n  onDeleteDraft,\n  onSaveDraft,\n  currentData,\n  className = '',\n  disabled = false,\n  autoSave = true,\n  autoSaveInterval = 30000 // 30 seconds\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isAutoSaving, setIsAutoSaving] = useState(false);\n  const [lastAutoSave, setLastAutoSave] = useState<Date | null>(null);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (!autoSave || disabled) return;\n\n    const interval = setInterval(() => {\n      handleAutoSave();\n    }, autoSaveInterval);\n\n    return () => clearInterval(interval);\n  }, [currentData, autoSave, autoSaveInterval, disabled]);\n\n  const handleAutoSave = async () => {\n    // Check if there's enough data to save\n    if (!currentData.title && !currentData.description && (!currentData.packages || currentData.packages.length === 0)) {\n      return;\n    }\n\n    setIsAutoSaving(true);\n    try {\n      await onSaveDraft(currentData);\n      setLastAutoSave(new Date());\n    } finally {\n      setIsAutoSaving(false);\n    }\n  };\n\n  const handleLoadDraft = (draft: ServiceDraft) => {\n    if (!disabled) {\n      onLoadDraft(draft);\n      setIsOpen(false);\n    }\n  };\n\n  const handleDeleteDraft = (draftId: string) => {\n    if (!disabled) {\n      onDeleteDraft(draftId);\n      setShowDeleteConfirm(null);\n    }\n  };\n\n  const getDraftPreview = (draft: ServiceDraft): string => {\n    if (draft.data.title) return draft.data.title;\n    if (draft.data.description) {\n      const plainText = draft.data.description.replace(/<[^>]*>/g, '');\n      return plainText.substring(0, 50) + (plainText.length > 50 ? '...' : '');\n    }\n    return '未命名草稿';\n  };\n\n  const getDraftCompletion = (draft: ServiceDraft): number => {\n    let completed = 0;\n    const total = 7;\n\n    if (draft.data.title) completed++;\n    if (draft.data.category) completed++;\n    if (draft.data.description) completed++;\n    if (draft.data.packages && draft.data.packages.length > 0) completed++;\n    if (draft.data.images && draft.data.images.length > 0) completed++;\n    if (draft.data.seoTitle) completed++;\n    if (draft.data.requirements && draft.data.requirements.length > 0) completed++;\n\n    return Math.round((completed / total) * 100);\n  };\n\n  const sortedDrafts = [...drafts].sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Draft Toggle Button */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsOpen(!isOpen)}\n            disabled={disabled}\n            className=\"relative\"\n          >\n            <svg\n              className=\"w-4 h-4 mr-2\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n              />\n            </svg>\n            草稿管理\n            {drafts.length > 0 && (\n              <span className=\"ml-2 px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs\">\n                {drafts.length}\n              </span>\n            )}\n          </Button>\n\n          {/* Auto-save indicator */}\n          {autoSave && (\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              {isAutoSaving ? (\n                <>\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\n                  <span>自动保存中...</span>\n                </>\n              ) : lastAutoSave ? (\n                <>\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span>上次保存: {formatRelativeTime(lastAutoSave)}</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                  <span>等待自动保存</span>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleAutoSave}\n          disabled={disabled || isAutoSaving}\n        >\n          {isAutoSaving ? '保存中...' : '立即保存'}\n        </Button>\n      </div>\n\n      {/* Draft Manager Panel */}\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div\n            className=\"fixed inset-0 z-40\"\n            onClick={() => setIsOpen(false)}\n          />\n\n          {/* Panel */}\n          <div className=\"absolute right-0 top-12 w-96 bg-white border border-gray-200 rounded-lg shadow-xl z-50 max-h-96 overflow-hidden\">\n            <div className=\"p-4 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">草稿管理</h3>\n                <button\n                  type=\"button\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"max-h-64 overflow-y-auto\">\n              {sortedDrafts.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  <svg\n                    className=\"mx-auto h-12 w-12 text-gray-300 mb-3\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                    />\n                  </svg>\n                  <p>暂无草稿</p>\n                  <p className=\"text-sm mt-1\">开始编辑后将自动保存草稿</p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-gray-200\">\n                  {sortedDrafts.map((draft) => (\n                    <div\n                      key={draft.id}\n                      className=\"p-4 hover:bg-gray-50 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                            {getDraftPreview(draft)}\n                          </h4>\n                          <div className=\"mt-1 flex items-center space-x-2 text-xs text-gray-500\">\n                            <span>步骤 {draft.step + 1}</span>\n                            <span>•</span>\n                            <span>{formatRelativeTime(draft.updatedAt)}</span>\n                            <span>•</span>\n                            <span>{getDraftCompletion(draft)}% 完成</span>\n                          </div>\n                          <div className=\"mt-2\">\n                            <div className=\"w-full bg-gray-200 rounded-full h-1\">\n                              <div\n                                className=\"bg-blue-500 h-1 rounded-full\"\n                                style={{ width: `${getDraftCompletion(draft)}%` }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-1 ml-3\">\n                          <button\n                            type=\"button\"\n                            onClick={() => handleLoadDraft(draft)}\n                            className=\"p-1 text-blue-600 hover:bg-blue-50 rounded\"\n                            title=\"加载草稿\"\n                            disabled={disabled}\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                              />\n                            </svg>\n                          </button>\n\n                          {showDeleteConfirm === draft.id ? (\n                            <div className=\"flex items-center space-x-1\">\n                              <button\n                                type=\"button\"\n                                onClick={() => handleDeleteDraft(draft.id)}\n                                className=\"p-1 text-red-600 hover:bg-red-50 rounded\"\n                                title=\"确认删除\"\n                                disabled={disabled}\n                              >\n                                <svg\n                                  className=\"w-4 h-4\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M5 13l4 4L19 7\"\n                                  />\n                                </svg>\n                              </button>\n                              <button\n                                type=\"button\"\n                                onClick={() => setShowDeleteConfirm(null)}\n                                className=\"p-1 text-gray-600 hover:bg-gray-50 rounded\"\n                                title=\"取消\"\n                              >\n                                <svg\n                                  className=\"w-4 h-4\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M6 18L18 6M6 6l12 12\"\n                                  />\n                                </svg>\n                              </button>\n                            </div>\n                          ) : (\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowDeleteConfirm(draft.id)}\n                              className=\"p-1 text-red-600 hover:bg-red-50 rounded\"\n                              title=\"删除草稿\"\n                              disabled={disabled}\n                            >\n                              <svg\n                                className=\"w-4 h-4\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n                                />\n                              </svg>\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Footer */}\n            <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                <div>\n                  最多保存 10 个草稿，自动清理 30 天前的草稿\n                </div>\n                <div>\n                  {drafts.length}/10\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DraftManager;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/FormProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/MediaUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[730,733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[730,733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, FormValidationError } from '@/types/services';\nimport { ImageUpload, VideoUpload, FileUpload } from '@/components/forms';\nimport Button from '@/components/ui/Button';\n\nexport interface MediaUploadProps {\n  data: Partial<ServiceFormData>;\n  onChange: (data: Partial<ServiceFormData>) => void;\n  errors: FormValidationError[];\n  className?: string;\n  disabled?: boolean;\n}\n\nconst MediaUpload: React.FC<MediaUploadProps> = ({\n  data,\n  onChange,\n  errors = [],\n  className = '',\n  disabled = false\n}) => {\n  const [activeTab, setActiveTab] = useState<'images' | 'videos' | 'documents'>('images');\n\n  const handleImagesChange = (images: any[]) => {\n    onChange({ ...data, images });\n  };\n\n  const handleVideosChange = (videos: any[]) => {\n    onChange({ ...data, videos });\n  };\n\n  const handleDocumentsChange = (documents: any[]) => {\n    onChange({ ...data, documents });\n  };\n\n  const getFieldError = (field: string) => {\n    return errors.find(error => error.field === field);\n  };\n\n  const tabs = [\n    { id: 'images' as const, label: '图片', count: data.images?.length || 0 },\n    { id: 'videos' as const, label: '视频', count: data.videos?.length || 0 },\n    { id: 'documents' as const, label: '文档', count: data.documents?.length || 0 }\n  ];\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">媒体资料</h2>\n        <p className=\"text-gray-600\">\n          上传图片、视频和文档来展示您的服务质量和专业能力。高质量的媒体资料能显著提升服务吸引力。\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              type=\"button\"\n              onClick={() => setActiveTab(tab.id)}\n              className={cn(\n                'py-2 px-1 border-b-2 font-medium text-sm transition-colors',\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              )}\n              disabled={disabled}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <span>{tab.label}</span>\n                {tab.count > 0 && (\n                  <span className={cn(\n                    'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium',\n                    activeTab === tab.id\n                      ? 'bg-blue-100 text-blue-800'\n                      : 'bg-gray-100 text-gray-800'\n                  )}>\n                    {tab.count}\n                  </span>\n                )}\n              </div>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"bg-white border border-gray-200 rounded-lg\">\n        {/* Images Tab */}\n        {activeTab === 'images' && (\n          <div className=\"p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                服务图片\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                上传高质量的服务展示图片，建议尺寸 1280x720 像素，支持 JPG、PNG、GIF、WebP 格式。\n              </p>\n            </div>\n\n            <ImageUpload\n              images={data.images || []}\n              onChange={handleImagesChange}\n              maxImages={8}\n              maxFileSize={10 * 1024 * 1024} // 10MB\n              acceptedFormats={['jpg', 'jpeg', 'png', 'gif', 'webp']}\n              requiredDimensions={{ width: 1280, height: 720 }}\n              disabled={disabled}\n              showPreview={true}\n              allowReorder={true}\n            />\n\n            {getFieldError('images') && (\n              <p className=\"mt-2 text-sm text-red-600\">\n                {getFieldError('images')!.message}\n              </p>\n            )}\n\n            <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-blue-900 mb-2\">图片上传建议</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• 上传真实的服务成果展示图</li>\n                <li>• 确保图片清晰度高，内容专业</li>\n                <li>• 第一张图片将作为服务封面图</li>\n                <li>• 避免包含水印或联系方式</li>\n                <li>• 可以上传工作过程截图增加可信度</li>\n              </ul>\n            </div>\n          </div>\n        )}\n\n        {/* Videos Tab */}\n        {activeTab === 'videos' && (\n          <div className=\"p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                服务视频\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                上传服务介绍视频，有助于客户更直观地了解您的服务。支持 MP4、AVI、MOV 等格式。\n              </p>\n            </div>\n\n            <VideoUpload\n              videos={data.videos || []}\n              onChange={handleVideosChange}\n              maxVideos={3}\n              maxFileSize={200 * 1024 * 1024} // 200MB\n              acceptedFormats={['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm']}\n              disabled={disabled}\n              showPreview={true}\n              autoGenerateThumbnail={true}\n            />\n\n            {getFieldError('videos') && (\n              <p className=\"mt-2 text-sm text-red-600\">\n                {getFieldError('videos')!.message}\n              </p>\n            )}\n\n            <div className=\"mt-4 p-4 bg-green-50 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-green-900 mb-2\">视频制作建议</h4>\n              <ul className=\"text-sm text-green-800 space-y-1\">\n                <li>• 视频时长建议在 1-3 分钟之间</li>\n                <li>• 开头 10 秒要能吸引观众注意力</li>\n                <li>• 介绍您的服务流程和专业优势</li>\n                <li>• 展示实际案例和客户反馈</li>\n                <li>• 确保音频清晰，画面稳定</li>\n                <li>• 添加字幕提高观看体验</li>\n              </ul>\n            </div>\n          </div>\n        )}\n\n        {/* Documents Tab */}\n        {activeTab === 'documents' && (\n          <div className=\"p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                相关文档\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                上传相关文档，如服务说明、案例分析、资质证书等，增强服务的可信度。\n              </p>\n            </div>\n\n            <FileUpload\n              files={data.documents || []}\n              onChange={handleDocumentsChange}\n              maxFiles={10}\n              maxFileSize={50 * 1024 * 1024} // 50MB\n              acceptedFormats={['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'zip', 'rar']}\n              disabled={disabled}\n              showPreview={true}\n              allowReorder={true}\n            />\n\n            {getFieldError('documents') && (\n              <p className=\"mt-2 text-sm text-red-600\">\n                {getFieldError('documents')!.message}\n              </p>\n            )}\n\n            <div className=\"mt-4 p-4 bg-purple-50 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-purple-900 mb-2\">文档上传建议</h4>\n              <ul className=\"text-sm text-purple-800 space-y-1\">\n                <li>• 上传 PDF 格式的服务介绍文档</li>\n                <li>• 包含详细的案例分析和成果展示</li>\n                <li>• 可以上传相关资质证书</li>\n                <li>• 确保文档内容专业、格式规范</li>\n                <li>• 避免包含个人联系信息</li>\n                <li>• 重要文档建议添加水印保护</li>\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Media Guidelines */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h3 className=\"text-sm font-medium text-yellow-900 mb-2\">📸 媒体资料指南</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-yellow-800\">\n          <div>\n            <h4 className=\"font-medium mb-1\">质量要求</h4>\n            <ul className=\"space-y-1\">\n              <li>• 图片分辨率 ≥ 1280x720</li>\n              <li>• 视频时长 ≤ 10 分钟</li>\n              <li>• 文件大小合理控制</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">内容规范</h4>\n            <ul className=\"space-y-1\">\n              <li>• 真实展示服务成果</li>\n              <li>• 避免虚假或夸大宣传</li>\n              <li>• 保护客户隐私信息</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">最佳实践</h4>\n            <ul className=\"space-y-1\">\n              <li>• 多角度展示服务</li>\n              <li>• 包含前后对比效果</li>\n              <li>• 展示工作流程细节</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Media Statistics */}\n      <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {data.images?.length || 0}\n            </div>\n            <div className=\"text-sm text-gray-600\">张图片</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {data.videos?.length || 0}\n            </div>\n            <div className=\"text-sm text-gray-600\">个视频</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {data.documents?.length || 0}\n            </div>\n            <div className=\"text-sm text-gray-600\">份文档</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MediaUpload;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/PricingPackages.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServiceFormData' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'moveFeature' is assigned a value but never used.","line":125,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getPackageTypeLabel' is assigned a value but never used.","line":140,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, ServicePackage, FormValidationError } from '@/types/services';\nimport { PriceInput, DurationSelector } from '@/components/forms';\nimport Button from '@/components/ui/Button';\n\nexport interface PricingPackagesProps {\n  packages: ServicePackage[];\n  onChange: (packages: ServicePackage[]) => void;\n  errors: FormValidationError[];\n  className?: string;\n  disabled?: boolean;\n}\n\nconst PricingPackagesProps: React.FC<PricingPackagesProps> = ({\n  packages = [],\n  onChange,\n  errors = [],\n  className = '',\n  disabled = false\n}) => {\n  const [activePackageId, setActivePackageId] = useState<string>('');\n\n  useEffect(() => {\n    // Set first package as active if none is selected\n    if (packages.length > 0 && !activePackageId) {\n      setActivePackageId(packages[0].id);\n    }\n  }, [packages, activePackageId]);\n\n  const createPackage = (type: 'basic' | 'standard' | 'premium'): ServicePackage => {\n    const basePackage = {\n      id: `pkg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name: '',\n      description: '',\n      price: 0,\n      deliveryTime: 1,\n      revisions: 0,\n      features: [],\n      isPopular: false\n    };\n\n    switch (type) {\n      case 'basic':\n        return {\n          ...basePackage,\n          name: '基础版',\n          deliveryTime: 7,\n          revisions: 1\n        };\n      case 'standard':\n        return {\n          ...basePackage,\n          name: '标准版',\n          deliveryTime: 5,\n          revisions: 2,\n          isPopular: true\n        };\n      case 'premium':\n        return {\n          ...basePackage,\n          name: '高级版',\n          deliveryTime: 3,\n          revisions: 3\n        };\n      default:\n        return basePackage;\n    }\n  };\n\n  const addPackage = (type: 'basic' | 'standard' | 'premium') => {\n    if (packages.length >= 3) return;\n\n    const newPackage = createPackage(type);\n    onChange([...packages, newPackage]);\n    setActivePackageId(newPackage.id);\n  };\n\n  const removePackage = (packageId: string) => {\n    const updatedPackages = packages.filter(pkg => pkg.id !== packageId);\n    onChange(updatedPackages);\n\n    // Set active package to first remaining package\n    if (activePackageId === packageId && updatedPackages.length > 0) {\n      setActivePackageId(updatedPackages[0].id);\n    }\n  };\n\n  const updatePackage = (packageId: string, updates: Partial<ServicePackage>) => {\n    const updatedPackages = packages.map(pkg =>\n      pkg.id === packageId ? { ...pkg, ...updates } : pkg\n    );\n\n    // Ensure only one package is marked as popular\n    if (updates.isPopular) {\n      updatedPackages.forEach(pkg => {\n        if (pkg.id !== packageId) {\n          pkg.isPopular = false;\n        }\n      });\n    }\n\n    onChange(updatedPackages);\n  };\n\n  const addFeature = (packageId: string, feature: string) => {\n    if (!feature.trim()) return;\n\n    const pkg = packages.find(p => p.id === packageId);\n    if (pkg && pkg.features.length < 10) {\n      updatePackage(packageId, {\n        features: [...pkg.features, feature.trim()]\n      });\n    }\n  };\n\n  const removeFeature = (packageId: string, featureIndex: number) => {\n    const pkg = packages.find(p => p.id === packageId);\n    if (pkg) {\n      const updatedFeatures = pkg.features.filter((_, index) => index !== featureIndex);\n      updatePackage(packageId, { features: updatedFeatures });\n    }\n  };\n\n  const moveFeature = (packageId: string, fromIndex: number, toIndex: number) => {\n    const pkg = packages.find(p => p.id === packageId);\n    if (pkg) {\n      const newFeatures = [...pkg.features];\n      const [movedFeature] = newFeatures.splice(fromIndex, 1);\n      newFeatures.splice(toIndex, 0, movedFeature);\n      updatePackage(packageId, { features: newFeatures });\n    }\n  };\n\n  const activePackage = packages.find(pkg => pkg.id === activePackageId);\n  const getFieldError = (field: string) => {\n    return errors.find(error => error.field === field);\n  };\n\n  const getPackageTypeLabel = (pkg: ServicePackage): string => {\n    if (pkg.name.includes('基础')) return 'basic';\n    if (pkg.name.includes('标准')) return 'standard';\n    if (pkg.name.includes('高级')) return 'premium';\n    return 'custom';\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">定价套餐</h2>\n        <p className=\"text-gray-600\">\n          设置不同价位的服务套餐，满足不同客户的需求。建议设置3个套餐以提供更多选择。\n        </p>\n      </div>\n\n      {/* Package Selection */}\n      {packages.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mb-6\">\n          {packages.map((pkg) => (\n            <button\n              key={pkg.id}\n              type=\"button\"\n              onClick={() => setActivePackageId(pkg.id)}\n              className={cn(\n                'px-4 py-2 rounded-lg border-2 transition-all',\n                activePackageId === pkg.id\n                  ? 'border-blue-500 bg-blue-50 text-blue-700'\n                  : 'border-gray-300 hover:border-gray-400'\n              )}\n              disabled={disabled}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium\">{pkg.name}</span>\n                {pkg.isPopular && (\n                  <span className=\"px-2 py-0.5 text-xs bg-orange-100 text-orange-700 rounded-full\">\n                    热门\n                  </span>\n                )}\n              </div>\n            </button>\n          ))}\n\n          {packages.length < 3 && (\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => addPackage('basic')}\n                disabled={disabled || packages.some(p => p.name.includes('基础'))}\n              >\n                + 基础版\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => addPackage('standard')}\n                disabled={disabled || packages.some(p => p.name.includes('标准'))}\n              >\n                + 标准版\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => addPackage('premium')}\n                disabled={disabled || packages.some(p => p.name.includes('高级'))}\n              >\n                + 高级版\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {packages.length === 0 && (\n        <div className=\"text-center py-12 border-2 border-dashed border-gray-300 rounded-lg\">\n          <div className=\"space-y-4\">\n            <div className=\"text-gray-400\">\n              <svg\n                className=\"mx-auto h-12 w-12\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">创建定价套餐</h3>\n              <p className=\"text-gray-600 mb-4\">\n                添加不同价位的服务套餐来满足不同客户的需求\n              </p>\n              <div className=\"flex justify-center space-x-2\">\n                <Button\n                  onClick={() => addPackage('basic')}\n                  disabled={disabled}\n                >\n                  添加基础版\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => addPackage('standard')}\n                  disabled={disabled}\n                >\n                  添加标准版\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => addPackage('premium')}\n                  disabled={disabled}\n                >\n                  添加高级版\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Package Editor */}\n      {activePackage && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <div className=\"flex justify-between items-start mb-6\">\n            <div>\n              <input\n                type=\"text\"\n                value={activePackage.name}\n                onChange={(e) => updatePackage(activePackage.id, { name: e.target.value })}\n                placeholder=\"套餐名称\"\n                className=\"text-xl font-bold text-gray-900 border-0 border-b-2 border-gray-300 focus:border-blue-500 focus:outline-none pb-1\"\n                disabled={disabled}\n              />\n              <p className=\"text-sm text-gray-500 mt-1\">给套餐起一个吸引人的名字</p>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={activePackage.isPopular || false}\n                  onChange={(e) => updatePackage(activePackage.id, { isPopular: e.target.checked })}\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n                <span className=\"text-sm text-gray-700\">设为热门</span>\n              </label>\n\n              {packages.length > 1 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removePackage(activePackage.id)}\n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  disabled={disabled}\n                >\n                  删除\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Left Column */}\n            <div className=\"space-y-4\">\n              {/* Price */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  价格 <span className=\"text-red-500\">*</span>\n                </label>\n                <PriceInput\n                  value={activePackage.price}\n                  onChange={(price) => updatePackage(activePackage.id, { price })}\n                  disabled={disabled}\n                />\n                {getFieldError(`packages.${activePackage.id}.price`) && (\n                  <p className=\"mt-1 text-sm text-red-600\">\n                    {getFieldError(`packages.${activePackage.id}.price`)!.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Delivery Time */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  交付时间 <span className=\"text-red-500\">*</span>\n                </label>\n                <DurationSelector\n                  value={activePackage.deliveryTime}\n                  onChange={(deliveryTime) => updatePackage(activePackage.id, { deliveryTime })}\n                  disabled={disabled}\n                />\n                {getFieldError(`packages.${activePackage.id}.deliveryTime`) && (\n                  <p className=\"mt-1 text-sm text-red-600\">\n                    {getFieldError(`packages.${activePackage.id}.deliveryTime`)!.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Revisions */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  修改次数\n                </label>\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"10\"\n                    value={activePackage.revisions}\n                    onChange={(e) => updatePackage(activePackage.id, { revisions: parseInt(e.target.value) || 0 })}\n                    className=\"w-20 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={disabled}\n                  />\n                  <span className=\"text-sm text-gray-600\">次</span>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">设置允许客户修改的次数</p>\n              </div>\n            </div>\n\n            {/* Right Column */}\n            <div className=\"space-y-4\">\n              {/* Description */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  套餐描述\n                </label>\n                <textarea\n                  value={activePackage.description}\n                  onChange={(e) => updatePackage(activePackage.id, { description: e.target.value })}\n                  placeholder=\"描述这个套餐包含的服务内容...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n              </div>\n\n              {/* Features */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  服务特色\n                </label>\n                <div className=\"space-y-2\">\n                  {activePackage.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <span className=\"text-green-500\">✓</span>\n                      <input\n                        type=\"text\"\n                        value={feature}\n                        onChange={(e) => {\n                          const newFeatures = [...activePackage.features];\n                          newFeatures[index] = e.target.value;\n                          updatePackage(activePackage.id, { features: newFeatures });\n                        }}\n                        className=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                        disabled={disabled}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => removeFeature(activePackage.id, index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                        disabled={disabled}\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      </button>\n                    </div>\n                  ))}\n\n                  {activePackage.features.length < 10 && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-gray-400\">+</span>\n                      <input\n                        type=\"text\"\n                        placeholder=\"添加服务特色...\"\n                        className=\"flex-1 px-2 py-1 border border-dashed border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            addFeature(activePackage.id, e.currentTarget.value);\n                            e.currentTarget.value = '';\n                          }\n                        }}\n                        disabled={disabled}\n                      />\n                    </div>\n                  )}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  添加{activePackage.features.length}/10个服务特色\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tips Section */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 className=\"text-sm font-medium text-blue-900 mb-2\">💡 定价建议</h3>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 基础版：价格较低，包含核心服务，适合预算有限的客户</li>\n          <li>• 标准版：价格适中，服务内容更丰富，建议设为热门套餐</li>\n          <li>• 高级版：价格较高，提供全面服务，适合高端客户</li>\n          <li>• 合理设置修改次数，避免无限制修改影响工作效率</li>\n          <li>• 特色描述要具体明了，让客户清楚了解套餐价值</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PricingPackagesProps;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/RequirementsForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, FormValidationError } from '@/types/services';\nimport Button from '@/components/ui/Button';\n\nexport interface RequirementsFormProps {\n  data: Partial<ServiceFormData>;\n  onChange: (data: Partial<ServiceFormData>) => void;\n  errors: FormValidationError[];\n  className?: string;\n  disabled?: boolean;\n}\n\nconst RequirementsForm: React.FC<RequirementsFormProps> = ({\n  data,\n  onChange,\n  errors = [],\n  className = '',\n  disabled = false\n}) => {\n  const [newRequirement, setNewRequirement] = useState('');\n  const [newDeliverable, setNewDeliverable] = useState('');\n\n  const requirements = data.requirements || [];\n  const deliverables = data.deliverables || [];\n\n  const handleAddRequirement = () => {\n    if (newRequirement.trim() && requirements.length < 10) {\n      onChange({\n        ...data,\n        requirements: [...requirements, newRequirement.trim()]\n      });\n      setNewRequirement('');\n    }\n  };\n\n  const handleRemoveRequirement = (index: number) => {\n    onChange({\n      ...data,\n      requirements: requirements.filter((_, i) => i !== index)\n    });\n  };\n\n  const handleRequirementKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleAddRequirement();\n    }\n  };\n\n  const handleAddDeliverable = () => {\n    if (newDeliverable.trim() && deliverables.length < 15) {\n      onChange({\n        ...data,\n        deliverables: [...deliverables, newDeliverable.trim()]\n      });\n      setNewDeliverable('');\n    }\n  };\n\n  const handleRemoveDeliverable = (index: number) => {\n    onChange({\n      ...data,\n      deliverables: deliverables.filter((_, i) => i !== index)\n    });\n  };\n\n  const handleDeliverableKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleAddDeliverable();\n    }\n  };\n\n  const handleRevisionCountChange = (value: number) => {\n    onChange({\n      ...data,\n      revisionCount: Math.max(0, Math.min(10, value))\n    });\n  };\n\n  const getFieldError = (field: string) => {\n    return errors.find(error => error.field === field);\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">需求与交付</h2>\n        <p className=\"text-gray-600\">\n          明确您的服务需求和交付标准，帮助客户了解需要提供什么以及能获得什么。\n        </p>\n      </div>\n\n      {/* Client Requirements */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            客户需求清单\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            列出客户需要提供的材料、信息或要求，以便您能够顺利完成工作。\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          {requirements.map((requirement, index) => (\n            <div\n              key={index}\n              className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\"\n            >\n              <span className=\"flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-sm font-medium\">\n                {index + 1}\n              </span>\n              <div className=\"flex-1\">\n                <p className=\"text-gray-900\">{requirement}</p>\n              </div>\n              {!disabled && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveRequirement(index)}\n                  className=\"flex-shrink-0 text-gray-400 hover:text-red-600 transition-colors\"\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              )}\n            </div>\n          ))}\n\n          {requirements.length < 10 && (\n            <div className=\"flex items-start space-x-3\">\n              <span className=\"flex-shrink-0 w-6 h-6 border-2 border-dashed border-gray-300 rounded-full flex items-center justify-center text-gray-400\">\n                +\n              </span>\n              <div className=\"flex-1\">\n                <input\n                  type=\"text\"\n                  value={newRequirement}\n                  onChange={(e) => setNewRequirement(e.target.value)}\n                  onKeyPress={handleRequirementKeyPress}\n                  placeholder=\"添加新的需求项...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n                <div className=\"mt-2 flex justify-between items-center\">\n                  <span className=\"text-xs text-gray-500\">\n                    按回车键添加，或点击添加按钮\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleAddRequirement}\n                    disabled={!newRequirement.trim() || disabled}\n                  >\n                    添加\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"mt-4 text-xs text-gray-500\">\n          已添加 {requirements.length}/10 项需求\n        </div>\n\n        {/* Requirement Templates */}\n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <p className=\"text-sm font-medium text-gray-700 mb-2\">快速添加模板：</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {[\n              '公司Logo文件',\n              '品牌色彩规范',\n              '具体尺寸要求',\n              '参考案例或样例',\n              '使用场景说明',\n              '目标受众描述'\n            ].map((template) => (\n              <button\n                key={template}\n                type=\"button\"\n                onClick={() => {\n                  if (requirements.length < 10) {\n                    onChange({\n                      ...data,\n                      requirements: [...requirements, template]\n                    });\n                  }\n                }}\n                className=\"px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors\"\n                disabled={disabled || requirements.length >= 10}\n              >\n                + {template}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {getFieldError('requirements') && (\n          <p className=\"mt-2 text-sm text-red-600\">\n            {getFieldError('requirements')!.message}\n          </p>\n        )}\n      </div>\n\n      {/* Deliverables */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            交付物清单\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            明确列出您将为客户提供的所有交付物。\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          {deliverables.map((deliverable, index) => (\n            <div\n              key={index}\n              className=\"flex items-start space-x-3 p-3 bg-green-50 rounded-lg\"\n            >\n              <span className=\"flex-shrink-0 w-6 h-6 bg-green-100 text-green-700 rounded-full flex items-center justify-center text-sm font-medium\">\n                ✓\n              </span>\n              <div className=\"flex-1\">\n                <p className=\"text-gray-900\">{deliverable}</p>\n              </div>\n              {!disabled && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveDeliverable(index)}\n                  className=\"flex-shrink-0 text-gray-400 hover:text-red-600 transition-colors\"\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              )}\n            </div>\n          ))}\n\n          {deliverables.length < 15 && (\n            <div className=\"flex items-start space-x-3\">\n              <span className=\"flex-shrink-0 w-6 h-6 border-2 border-dashed border-gray-300 rounded-full flex items-center justify-center text-gray-400\">\n                +\n              </span>\n              <div className=\"flex-1\">\n                <input\n                  type=\"text\"\n                  value={newDeliverable}\n                  onChange={(e) => setNewDeliverable(e.target.value)}\n                  onKeyPress={handleDeliverableKeyPress}\n                  placeholder=\"添加新的交付物...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n                <div className=\"mt-2 flex justify-between items-center\">\n                  <span className=\"text-xs text-gray-500\">\n                    按回车键添加，或点击添加按钮\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleAddDeliverable}\n                    disabled={!newDeliverable.trim() || disabled}\n                  >\n                    添加\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"mt-4 text-xs text-gray-500\">\n          已添加 {deliverables.length}/15 项交付物\n        </div>\n\n        {/* Deliverable Templates */}\n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <p className=\"text-sm font-medium text-gray-700 mb-2\">快速添加模板：</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {[\n              '设计源文件',\n              '高分辨率图片',\n              '使用说明文档',\n              '修改版本',\n              '项目总结报告',\n              '技术支持服务',\n              '文件交付包',\n              '版权授权文件'\n            ].map((template) => (\n              <button\n                key={template}\n                type=\"button\"\n                onClick={() => {\n                  if (deliverables.length < 15) {\n                    onChange({\n                      ...data,\n                      deliverables: [...deliverables, template]\n                    });\n                  }\n                }}\n                className=\"px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors\"\n                disabled={disabled || deliverables.length >= 15}\n              >\n                + {template}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {getFieldError('deliverables') && (\n          <p className=\"mt-2 text-sm text-red-600\">\n            {getFieldError('deliverables')!.message}\n          </p>\n        )}\n      </div>\n\n      {/* Revision Settings */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            修改政策\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            设置免费的修改次数，超出次数的修改可能需要额外收费。\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              免费修改次数\n            </label>\n            <div className=\"flex items-center space-x-4\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"10\"\n                value={data.revisionCount || 0}\n                onChange={(e) => handleRevisionCountChange(parseInt(e.target.value))}\n                className=\"flex-1\"\n                disabled={disabled}\n              />\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"10\"\n                  value={data.revisionCount || 0}\n                  onChange={(e) => handleRevisionCountChange(parseInt(e.target.value) || 0)}\n                  className=\"w-16 px-2 py-1 border border-gray-300 rounded-md text-center focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n                <span className=\"text-sm text-gray-600\">次</span>\n              </div>\n            </div>\n            <div className=\"mt-2 flex justify-between text-xs text-gray-500\">\n              <span>不提供修改</span>\n              <span>标准修改</span>\n              <span>充分修改</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium text-gray-700\">修改政策说明：</p>\n            <div className=\"text-xs text-gray-600 space-y-1\">\n              <p>• 0次：交付后不支持免费修改</p>\n              <p>• 1-3次：适合标准化服务</p>\n              <p>• 4-6次：适合定制化服务</p>\n              <p>• 7-10次：适合高价值定制服务</p>\n            </div>\n          </div>\n        </div>\n\n        {getFieldError('revisionCount') && (\n          <p className=\"mt-2 text-sm text-red-600\">\n            {getFieldError('revisionCount')!.message}\n          </p>\n        )}\n      </div>\n\n      {/* Tips Section */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 className=\"text-sm font-medium text-blue-900 mb-2\">💡 需求与交付建议</h3>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 明确列出客户需要提供的材料，避免沟通不畅</li>\n          <li>• 交付物要具体详细，让客户清楚知道会获得什么</li>\n          <li>• 合理设置修改次数，既能满足客户需求又保护自己的时间</li>\n          <li>• 使用模板可以快速添加常见的需求和交付物</li>\n          <li>• 考虑不同套餐可能需要不同的需求和交付物</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default RequirementsForm;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/ReviewAndPublish.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServicePreview' is defined but never used.","line":3,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is defined but never used.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":70,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'popularPackage' is assigned a value but never used.","line":88,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":249,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":340,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12738,12741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12738,12741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, FormValidationError, ServicePreview } from '@/types/services';\nimport { formatCurrency, formatDate } from '@/utils';\nimport Button from '@/components/ui/Button';\n\nexport interface ReviewAndPublishProps {\n  data: ServiceFormData;\n  onPublish: (options: PublishOptions) => void;\n  onSaveDraft: () => void;\n  errors: FormValidationError[];\n  warnings: FormValidationError[];\n  isValid: boolean;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport interface PublishOptions {\n  publishImmediately: boolean;\n  publishAt?: Date;\n  status: 'active' | 'draft' | 'paused';\n}\n\nconst ReviewAndPublish: React.FC<ReviewAndPublishProps> = ({\n  data,\n  onPublish,\n  onSaveDraft,\n  errors = [],\n  warnings = [],\n  isValid,\n  className = '',\n  disabled = false\n}) => {\n  const [publishOptions, setPublishOptions] = useState<PublishOptions>({\n    publishImmediately: true,\n    status: 'active'\n  });\n  const [isPublishing, setIsPublishing] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Calculate completion percentage\n  const calculateCompletion = () => {\n    let completed = 0;\n    const total = 7;\n\n    if (data.title && data.title.length >= 10) completed++;\n    if (data.category && data.subcategory) completed++;\n    if (data.description && data.description.length >= 100) completed++;\n    if (data.packages && data.packages.length > 0) completed++;\n    if (data.images && data.images.length > 0) completed++;\n    if (data.seoTitle && data.seoDescription) completed++;\n    if (data.requirements && data.requirements.length > 0) completed++;\n\n    return Math.round((completed / total) * 100);\n  };\n\n  const completionPercentage = calculateCompletion();\n\n  const handlePublish = async () => {\n    if (!isValid) return;\n\n    setIsPublishing(true);\n    try {\n      await onPublish(publishOptions);\n    } finally {\n      setIsPublishing(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'draft': return 'text-gray-600 bg-gray-100';\n      case 'paused': return 'text-yellow-600 bg-yellow-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return '立即发布';\n      case 'draft': return '保存草稿';\n      case 'paused': return '暂不发布';\n      default: return '保存草稿';\n    }\n  };\n\n  const popularPackage = data.packages?.find(pkg => pkg.isPopular);\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">审核与发布</h2>\n        <p className=\"text-gray-600\">\n          请仔细检查您的服务信息，确认无误后即可发布。\n        </p>\n      </div>\n\n      {/* Completion Status */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">完成度评估</h3>\n            <p className=\"text-sm text-gray-600\">服务信息完整性检查</p>\n          </div>\n          <div className=\"text-right\">\n            <div className={cn(\n              'text-3xl font-bold',\n              completionPercentage >= 90 ? 'text-green-600' :\n              completionPercentage >= 70 ? 'text-yellow-600' : 'text-red-600'\n            )}>\n              {completionPercentage}%\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              {completionPercentage >= 90 ? '完整' :\n               completionPercentage >= 70 ? '基本完整' : '需要完善'}\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-4\">\n          <div\n            className={cn(\n              'h-2 rounded-full transition-all duration-300',\n              completionPercentage >= 90 ? 'bg-green-500' :\n              completionPercentage >= 70 ? 'bg-yellow-500' : 'bg-red-500'\n            )}\n            style={{ width: `${completionPercentage}%` }}\n          />\n        </div>\n\n        {/* Checklist */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.title && data.title.length >= 10 ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.title && data.title.length >= 10 ? 'text-gray-700' : 'text-gray-500'}>\n              服务标题 (≥10字)\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.category && data.subcategory ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.category && data.subcategory ? 'text-gray-700' : 'text-gray-500'}>\n              分类选择\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.description && data.description.length >= 100 ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.description && data.description.length >= 100 ? 'text-gray-700' : 'text-gray-500'}>\n              详细描述 (≥100字)\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.packages && data.packages.length > 0 ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.packages && data.packages.length > 0 ? 'text-gray-700' : 'text-gray-500'}>\n              定价套餐\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.images && data.images.length > 0 ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.images && data.images.length > 0 ? 'text-gray-700' : 'text-gray-500'}>\n              服务图片\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className={data.seoTitle && data.seoDescription ? 'text-green-600' : 'text-gray-400'}>\n              ✓\n            </span>\n            <span className={data.seoTitle && data.seoDescription ? 'text-gray-700' : 'text-gray-500'}>\n              SEO 设置\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Errors and Warnings */}\n      {(errors.length > 0 || warnings.length > 0) && (\n        <div className=\"space-y-3\">\n          {errors.length > 0 && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <h4 className=\"text-sm font-medium text-red-900 mb-2\">\n                ⚠️ 需要解决的问题 ({errors.length})\n              </h4>\n              <ul className=\"space-y-1 text-sm text-red-800\">\n                {errors.map((error, index) => (\n                  <li key={index}>• {error.message}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {warnings.length > 0 && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n              <h4 className=\"text-sm font-medium text-yellow-900 mb-2\">\n                💡 建议优化项 ({warnings.length})\n              </h4>\n              <ul className=\"space-y-1 text-sm text-yellow-800\">\n                {warnings.map((warning, index) => (\n                  <li key={index}>• {warning.message}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Service Preview */}\n      <div className=\"bg-white border border-gray-200 rounded-lg\">\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">服务预览</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowPreview(!showPreview)}\n          >\n            {showPreview ? '收起' : '展开'}\n          </Button>\n        </div>\n\n        {showPreview && (\n          <div className=\"p-6\">\n            {/* Basic Info */}\n            <div className=\"mb-6\">\n              <h4 className=\"text-xl font-bold text-gray-900 mb-2\">{data.title}</h4>\n              <p className=\"text-gray-600 mb-3\">\n                {data.category && data.subcategory && `${data.category} > ${data.subcategory}`}\n              </p>\n              <div\n                className=\"prose prose-sm max-w-none text-gray-700\"\n                dangerouslySetInnerHTML={{ __html: data.description || '' }}\n              />\n            </div>\n\n            {/* Pricing */}\n            {data.packages && data.packages.length > 0 && (\n              <div className=\"mb-6\">\n                <h5 className=\"text-lg font-semibold text-gray-900 mb-3\">定价方案</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {data.packages.map((pkg, index) => (\n                    <div\n                      key={pkg.id}\n                      className={cn(\n                        'border rounded-lg p-4',\n                        pkg.isPopular ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                      )}\n                    >\n                      {pkg.isPopular && (\n                        <div className=\"text-sm font-medium text-blue-600 mb-2\">热门</div>\n                      )}\n                      <h6 className=\"font-semibold text-gray-900 mb-1\">{pkg.name}</h6>\n                      <div className=\"text-2xl font-bold text-gray-900 mb-2\">\n                        {formatCurrency(pkg.price)}\n                      </div>\n                      <div className=\"text-sm text-gray-600 mb-3\">\n                        {pkg.deliveryTime}天交付 • {pkg.revisions}次修改\n                      </div>\n                      {pkg.features.length > 0 && (\n                        <ul className=\"space-y-1 text-sm\">\n                          {pkg.features.map((feature, idx) => (\n                            <li key={idx} className=\"flex items-start space-x-1\">\n                              <span className=\"text-green-500 mt-0.5\">✓</span>\n                              <span className=\"text-gray-700\">{feature}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Media */}\n            {data.images && data.images.length > 0 && (\n              <div className=\"mb-6\">\n                <h5 className=\"text-lg font-semibold text-gray-900 mb-3\">服务展示</h5>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {data.images.slice(0, 4).map((image) => (\n                    <div key={image.id} className=\"aspect-square rounded-lg overflow-hidden\">\n                      <img\n                        src={image.url}\n                        alt={image.alt}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Tags */}\n            {data.tags && data.tags.length > 0 && (\n              <div>\n                <h5 className=\"text-lg font-semibold text-gray-900 mb-3\">服务标签</h5>\n                <div className=\"flex flex-wrap gap-2\">\n                  {data.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Publishing Options */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">发布选项</h3>\n\n        <div className=\"space-y-4\">\n          {/* Status Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              发布状态\n            </label>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              {[\n                { value: 'active', label: '立即发布', desc: '发布后客户可以立即购买' },\n                { value: 'draft', label: '保存草稿', desc: '保存但暂不发布' },\n                { value: 'paused', label: '暂不发布', desc: '暂时不对外展示' }\n              ].map((option) => (\n                <button\n                  key={option.value}\n                  type=\"button\"\n                  onClick={() => setPublishOptions({ ...publishOptions, status: option.value as any })}\n                  className={cn(\n                    'p-3 border-2 rounded-lg text-left transition-colors',\n                    publishOptions.status === option.value\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  )}\n                  disabled={disabled}\n                >\n                  <div className=\"font-medium text-gray-900\">{option.label}</div>\n                  <div className=\"text-sm text-gray-600\">{option.desc}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Scheduled Publishing */}\n          {publishOptions.status === 'active' && (\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={!publishOptions.publishImmediately}\n                  onChange={(e) => setPublishOptions({\n                    ...publishOptions,\n                    publishImmediately: !e.target.checked\n                  })}\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  disabled={disabled}\n                />\n                <span className=\"text-sm text-gray-700\">定时发布</span>\n              </label>\n\n              {!publishOptions.publishImmediately && (\n                <div className=\"mt-3\">\n                  <input\n                    type=\"datetime-local\"\n                    value={publishOptions.publishAt?.toISOString().slice(0, 16) || ''}\n                    onChange={(e) => setPublishOptions({\n                      ...publishOptions,\n                      publishAt: new Date(e.target.value)\n                    })}\n                    className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    min={new Date().toISOString().slice(0, 16)}\n                    disabled={disabled}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Final Actions */}\n      <div className=\"flex flex-col sm:flex-row gap-3\">\n        <Button\n          onClick={handlePublish}\n          disabled={!isValid || disabled || isPublishing}\n          loading={isPublishing}\n          className=\"flex-1\"\n        >\n          {getStatusLabel(publishOptions.status)}\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          onClick={onSaveDraft}\n          disabled={disabled}\n          className=\"flex-1\"\n        >\n          保存草稿\n        </Button>\n      </div>\n\n      {/* Terms and Conditions */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <h4 className=\"text-sm font-medium text-gray-900 mb-2\">发布须知</h4>\n        <ul className=\"text-xs text-gray-600 space-y-1\">\n          <li>• 请确保服务信息真实、准确，不包含虚假或误导性内容</li>\n          <li>• 发布的服务必须符合平台规范和相关法律法规</li>\n          <li>• 平台有权对违规服务进行下架处理</li>\n          <li>• 发布后您可以在服务管理页面修改服务信息</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewAndPublish;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/SEOSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, FormValidationError, SEOAnalysis } from '@/types/services';\nimport { TagInput } from '@/components/forms';\nimport Button from '@/components/ui/Button';\n\nexport interface SEOSettingsProps {\n  data: Partial<ServiceFormData>;\n  onChange: (data: Partial<ServiceFormData>) => void;\n  errors: FormValidationError[];\n  className?: string;\n  disabled?: boolean;\n}\n\nconst SEOSettings: React.FC<SEOSettingsProps> = ({\n  data,\n  onChange,\n  errors = [],\n  className = '',\n  disabled = false\n}) => {\n  const [seoAnalysis, setSeoAnalysis] = useState<SEOAnalysis | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const charLimits = {\n    seoTitle: { min: 30, max: 60, optimal: [40, 55] },\n    seoDescription: { min: 120, max: 160, optimal: [140, 155] }\n  };\n\n  const charCount = {\n    seoTitle: data.seoTitle?.length || 0,\n    seoDescription: data.seoDescription?.length || 0,\n    keywords: data.keywords?.length || 0\n  };\n\n  // Auto-generate SEO from basic info\n  const generateAutoSEO = () => {\n    if (data.title) {\n      const seoTitle = data.title.length > charLimits.seoTitle.max\n        ? data.title.substring(0, charLimits.seoTitle.max - 3) + '...'\n        : data.title;\n\n      // Generate SEO description from service description\n      let seoDescription = '';\n      if (data.description) {\n        const plainText = data.description.replace(/<[^>]*>/g, '');\n        seoDescription = plainText.length > charLimits.seoDescription.max\n          ? plainText.substring(0, charLimits.seoDescription.max - 3) + '...'\n          : plainText;\n      }\n\n      onChange({\n        ...data,\n        seoTitle,\n        seoDescription\n      });\n    }\n  };\n\n  // Analyze SEO\n  const analyzeSEO = async () => {\n    setIsAnalyzing(true);\n\n    // Simulate SEO analysis (in real app, this would call an API)\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const analysis: SEOAnalysis = {\n      score: calculateSEOScore(),\n      title: analyzeTitle(),\n      description: analyzeDescription(),\n      keywords: analyzeKeywords(),\n      readability: analyzeReadability()\n    };\n\n    setSeoAnalysis(analysis);\n    setIsAnalyzing(false);\n  };\n\n  const calculateSEOScore = (): number => {\n    let score = 0;\n\n    // Title score (40%)\n    if (data.seoTitle) {\n      const length = data.seoTitle.length;\n      if (length >= charLimits.seoTitle.optimal[0] && length <= charLimits.seoTitle.optimal[1]) {\n        score += 40;\n      } else if (length >= charLimits.seoTitle.min && length <= charLimits.seoTitle.max) {\n        score += 25;\n      } else {\n        score += 10;\n      }\n    }\n\n    // Description score (40%)\n    if (data.seoDescription) {\n      const length = data.seoDescription.length;\n      if (length >= charLimits.seoDescription.optimal[0] && length <= charLimits.seoDescription.optimal[1]) {\n        score += 40;\n      } else if (length >= charLimits.seoDescription.min && length <= charLimits.seoDescription.max) {\n        score += 25;\n      } else {\n        score += 10;\n      }\n    }\n\n    // Keywords score (20%)\n    if (data.keywords && data.keywords.length > 0) {\n      score += Math.min(data.keywords.length * 5, 20);\n    }\n\n    return score;\n  };\n\n  const analyzeTitle = () => {\n    const title = data.seoTitle || '';\n    const length = title.length;\n\n    const suggestions = [];\n    if (length < charLimits.seoTitle.min) {\n      suggestions.push('标题太短，建议增加更多关键词');\n    } else if (length > charLimits.seoTitle.max) {\n      suggestions.push('标题太长，可能被搜索引擎截断');\n    }\n\n    if (!title.toLowerCase().includes('服务') && !title.toLowerCase().includes('设计')) {\n      suggestions.push('标题中包含核心服务关键词有助于SEO');\n    }\n\n    return {\n      length,\n      isOptimal: length >= charLimits.seoTitle.optimal[0] && length <= charLimits.seoTitle.optimal[1],\n      suggestions\n    };\n  };\n\n  const analyzeDescription = () => {\n    const description = data.seoDescription || '';\n    const length = description.length;\n\n    const suggestions = [];\n    if (length < charLimits.seoDescription.min) {\n      suggestions.push('描述太短，建议更详细地介绍服务');\n    } else if (length > charLimits.seoDescription.max) {\n      suggestions.push('描述太长，可能被搜索引擎截断');\n    }\n\n    return {\n      length,\n      isOptimal: length >= charLimits.seoDescription.optimal[0] && length <= charLimits.seoDescription.optimal[1],\n      suggestions\n    };\n  };\n\n  const analyzeKeywords = () => {\n    const keywords = data.keywords || [];\n    const count = keywords.length;\n    const density = count > 0 ? (count / 10) * 100 : 0; // Simplified density calculation\n\n    const suggestions = [];\n    if (count < 3) {\n      suggestions.push('建议添加更多相关关键词');\n    } else if (count > 8) {\n      suggestions.push('关键词过多，建议精选最重要的几个');\n    }\n\n    return {\n      count,\n      density,\n      suggestions\n    };\n  };\n\n  const analyzeReadability = () => {\n    const description = data.seoDescription || '';\n    const sentences = description.split(/[。！？.!?]/).filter(s => s.trim().length > 0);\n    const avgSentenceLength = sentences.length > 0\n      ? description.replace(/[。，！？.!?]/g, '').length / sentences.length\n      : 0;\n\n    const suggestions = [];\n    if (avgSentenceLength > 30) {\n      suggestions.push('句子过长，建议使用更简短的句子');\n    }\n    if (sentences.length < 2) {\n      suggestions.push('建议使用多个句子来提高可读性');\n    }\n\n    const score = Math.max(0, 100 - Math.abs(avgSentenceLength - 20) * 2);\n\n    return {\n      score,\n      suggestions\n    };\n  };\n\n  const handleSEOTitleChange = (seoTitle: string) => {\n    if (seoTitle.length <= charLimits.seoTitle.max) {\n      onChange({ ...data, seoTitle });\n    }\n  };\n\n  const handleSEODescriptionChange = (seoDescription: string) => {\n    if (seoDescription.length <= charLimits.seoDescription.max) {\n      onChange({ ...data, seoDescription });\n    }\n  };\n\n  const handleKeywordsChange = (keywords: string[]) => {\n    onChange({ ...data, keywords });\n  };\n\n  const getFieldError = (field: string) => {\n    return errors.find(error => error.field === field);\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getCharCountColor = (current: number, limits: typeof charLimits.seoTitle) => {\n    if (current >= limits.optimal[0] && current <= limits.optimal[1]) {\n      return 'text-green-600';\n    }\n    if (current < limits.min || current > limits.max) {\n      return 'text-red-600';\n    }\n    return 'text-yellow-600';\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">SEO 优化设置</h2>\n        <p className=\"text-gray-600\">\n          优化您的服务页面搜索引擎排名，提高曝光率和访问量。\n        </p>\n      </div>\n\n      {/* SEO Score */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">SEO 评分</h3>\n            <p className=\"text-sm text-gray-600\">基于搜索引擎优化最佳实践</p>\n          </div>\n          <div className=\"text-right\">\n            <div className={cn('text-3xl font-bold', getScoreColor(seoAnalysis?.score || 0))}>\n              {seoAnalysis?.score || 0}%\n            </div>\n            <Button\n              size=\"sm\"\n              onClick={analyzeSEO}\n              loading={isAnalyzing}\n              disabled={disabled}\n            >\n              {isAnalyzing ? '分析中...' : '重新分析'}\n            </Button>\n          </div>\n        </div>\n\n        {seoAnalysis && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n            <div>\n              <div className=\"text-gray-600\">标题</div>\n              <div className={cn('font-medium', getCharCountColor(seoAnalysis.title.length, charLimits.seoTitle))}>\n                {seoAnalysis.title.isOptimal ? '✓ 优化' : '需改进'}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-gray-600\">描述</div>\n              <div className={cn('font-medium', getCharCountColor(seoAnalysis.description.length, charLimits.seoDescription))}>\n                {seoAnalysis.description.isOptimal ? '✓ 优化' : '需改进'}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-gray-600\">关键词</div>\n              <div className={cn('font-medium', seoAnalysis.keywords.count >= 3 ? 'text-green-600' : 'text-yellow-600')}>\n                {seoAnalysis.keywords.count >= 3 ? '✓ 良好' : '需添加'}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-gray-600\">可读性</div>\n              <div className={cn('font-medium', seoAnalysis.readability.score >= 70 ? 'text-green-600' : 'text-yellow-600')}>\n                {seoAnalysis.readability.score >= 70 ? '✓ 良好' : '需改进'}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Auto Generate */}\n      <div className=\"flex items-center justify-between bg-gray-50 rounded-lg p-4\">\n        <div>\n          <h4 className=\"font-medium text-gray-900\">智能生成 SEO</h4>\n          <p className=\"text-sm text-gray-600\">根据基本信息自动生成优化的标题和描述</p>\n        </div>\n        <Button\n          variant=\"outline\"\n          onClick={generateAutoSEO}\n          disabled={disabled || !data.title}\n        >\n          自动生成\n        </Button>\n      </div>\n\n      {/* SEO Title */}\n      <div>\n        <label htmlFor=\"seoTitle\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          SEO 标题\n        </label>\n        <input\n          id=\"seoTitle\"\n          type=\"text\"\n          value={data.seoTitle || ''}\n          onChange={(e) => handleSEOTitleChange(e.target.value)}\n          placeholder=\"搜索引擎显示的标题，建议包含核心关键词\"\n          className={cn(\n            'w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n            getFieldError('seoTitle') ? 'border-red-300' : 'border-gray-300',\n            disabled && 'bg-gray-100 cursor-not-allowed'\n          )}\n          disabled={disabled}\n        />\n        <div className=\"mt-1 flex justify-between items-center\">\n          <div className=\"text-xs text-gray-500\">\n            建议长度 {charLimits.seoTitle.optimal[0]}-{charLimits.seoTitle.optimal[1]} 字符\n          </div>\n          <div className={cn('text-xs', getCharCountColor(charCount.seoTitle, charLimits.seoTitle))}>\n            {charCount.seoTitle} / {charLimits.seoTitle.max}\n          </div>\n        </div>\n        {getFieldError('seoTitle') && (\n          <p className=\"mt-1 text-sm text-red-600\">{getFieldError('seoTitle')!.message}</p>\n        )}\n        {seoAnalysis?.title.suggestions && seoAnalysis.title.suggestions.length > 0 && (\n          <div className=\"mt-2 text-xs text-yellow-600\">\n            💡 {seoAnalysis.title.suggestions.join('；')}\n          </div>\n        )}\n      </div>\n\n      {/* SEO Description */}\n      <div>\n        <label htmlFor=\"seoDescription\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          SEO 描述\n        </label>\n        <textarea\n          id=\"seoDescription\"\n          value={data.seoDescription || ''}\n          onChange={(e) => handleSEODescriptionChange(e.target.value)}\n          placeholder=\"搜索引擎结果中显示的描述，建议简洁明了地介绍服务价值\"\n          rows={3}\n          className={cn(\n            'w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n            getFieldError('seoDescription') ? 'border-red-300' : 'border-gray-300',\n            disabled && 'bg-gray-100 cursor-not-allowed'\n          )}\n          disabled={disabled}\n        />\n        <div className=\"mt-1 flex justify-between items-center\">\n          <div className=\"text-xs text-gray-500\">\n            建议长度 {charLimits.seoDescription.optimal[0]}-{charLimits.seoDescription.optimal[1]} 字符\n          </div>\n          <div className={cn('text-xs', getCharCountColor(charCount.seoDescription, charLimits.seoDescription))}>\n            {charCount.seoDescription} / {charLimits.seoDescription.max}\n          </div>\n        </div>\n        {getFieldError('seoDescription') && (\n          <p className=\"mt-1 text-sm text-red-600\">{getFieldError('seoDescription')!.message}</p>\n        )}\n        {seoAnalysis?.description.suggestions && seoAnalysis.description.suggestions.length > 0 && (\n          <div className=\"mt-2 text-xs text-yellow-600\">\n            💡 {seoAnalysis.description.suggestions.join('；')}\n          </div>\n        )}\n      </div>\n\n      {/* Keywords */}\n      <div>\n        <label htmlFor=\"keywords\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          关键词标签\n        </label>\n        <TagInput\n          tags={data.keywords || []}\n          onChange={handleKeywordsChange}\n          placeholder=\"添加 SEO 关键词...\"\n          maxTags={8}\n          maxLength={20}\n          suggestions={[\n            '专业设计', '定制服务', '快速交付', '质量保证', '原创作品',\n            '性价比高', '经验丰富', '客户满意', '商业可用', '源文件'\n          ]}\n          disabled={disabled}\n        />\n        <div className=\"mt-1 text-xs text-gray-500\">\n          添加 3-8 个相关关键词，有助于搜索引擎理解和分类您的服务\n        </div>\n        {getFieldError('keywords') && (\n          <p className=\"mt-1 text-sm text-red-600\">{getFieldError('keywords')!.message}</p>\n        )}\n        {seoAnalysis?.keywords.suggestions && seoAnalysis.keywords.suggestions.length > 0 && (\n          <div className=\"mt-2 text-xs text-yellow-600\">\n            💡 {seoAnalysis.keywords.suggestions.join('；')}\n          </div>\n        )}\n      </div>\n\n      {/* SEO Tips */}\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <h3 className=\"text-sm font-medium text-green-900 mb-2\">🎯 SEO 优化建议</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-green-800\">\n          <div>\n            <h4 className=\"font-medium mb-1\">标题优化</h4>\n            <ul className=\"space-y-1\">\n              <li>• 包含核心服务关键词</li>\n              <li>• 控制在 60 字符以内</li>\n              <li>• 突出服务独特卖点</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">描述优化</h4>\n            <ul className=\"space-y-1\">\n              <li>• 详细说明服务价值</li>\n              <li>• 包含相关关键词</li>\n              <li>• 控制在 160 字符以内</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Preview */}\n      {data.seoTitle && data.seoDescription && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-gray-700 mb-3\">搜索结果预览</h3>\n          <div className=\"max-w-xl\">\n            <div className=\"text-blue-600 text-lg hover:underline cursor-pointer mb-1\">\n              {data.seoTitle} - 专业服务平台\n            </div>\n            <div className=\"text-green-700 text-sm mb-1\">\n              https://platform.com/services/{data.slug || 'service-link'}\n            </div>\n            <div className=\"text-gray-600 text-sm\">\n              {data.seoDescription}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SEOSettings;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/ServicePreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'popularPackage' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":133,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":183,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":54}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { cn } from '@/utils';\nimport { ServiceFormData, ServicePreview as ServicePreviewType } from '@/types/services';\nimport { formatCurrency } from '@/utils';\nimport Button from '@/components/ui/Button';\n\nexport interface ServicePreviewProps {\n  service: ServiceFormData;\n  preview: ServicePreviewType;\n  className?: string;\n  onEdit?: (step: number) => void;\n  disabled?: boolean;\n}\n\nconst ServicePreview: React.FC<ServicePreviewProps> = ({\n  service,\n  preview,\n  className = '',\n  onEdit,\n  disabled = false\n}) => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'packages' | 'details'>('overview');\n\n  const popularPackage = service.packages?.find(pkg => pkg.isPopular);\n\n  const getValidationStatus = () => {\n    if (preview.isValid) {\n      return {\n        color: 'text-green-600 bg-green-100',\n        icon: '✓',\n        text: '服务信息完整，可以发布'\n      };\n    } else if (preview.errors.length > 0) {\n      return {\n        color: 'text-red-600 bg-red-100',\n        icon: '⚠',\n        text: `需要修复 ${preview.errors.length} 个问题`\n      };\n    } else {\n      return {\n        color: 'text-yellow-600 bg-yellow-100',\n        icon: '💡',\n        text: `建议优化 ${preview.warnings.length} 项内容`\n      };\n    }\n  };\n\n  const status = getValidationStatus();\n\n  return (\n    <div className={cn('bg-white border border-gray-200 rounded-lg overflow-hidden', className)}>\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">服务预览</h2>\n            <p className=\"text-blue-100\">\n              这是客户看到的服务页面展示效果\n            </p>\n          </div>\n          <div className={cn('px-4 py-2 rounded-full text-sm font-medium', status.color)}>\n            <span className=\"mr-2\">{status.icon}</span>\n            {status.text}\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"flex\">\n          {[\n            { id: 'overview' as const, label: '概览' },\n            { id: 'packages' as const, label: '套餐' },\n            { id: 'details' as const, label: '详情' }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              type=\"button\"\n              onClick={() => setActiveTab(tab.id)}\n              className={cn(\n                'px-6 py-3 text-sm font-medium border-b-2 transition-colors',\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              )}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6\">\n        {/* Overview Tab */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Basic Info */}\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-3\">\n                {service.title || '服务标题'}\n              </h3>\n\n              {/* Category */}\n              {service.category && service.subcategory && (\n                <div className=\"flex items-center space-x-2 text-sm text-gray-600 mb-4\">\n                  <span>{service.category}</span>\n                  <span>›</span>\n                  <span>{service.subcategory}</span>\n                </div>\n              )}\n\n              {/* Description */}\n              <div className=\"prose prose-sm max-w-none\">\n                {service.description ? (\n                  <div\n                    className=\"text-gray-700\"\n                    dangerouslySetInnerHTML={{ __html: service.description }}\n                  />\n                ) : (\n                  <div className=\"text-gray-400 italic\">\n                    服务描述将在这里显示...\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Media Gallery */}\n            {service.images && service.images.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">服务展示</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {service.images.slice(0, 8).map((image, index) => (\n                    <div key={image.id} className=\"aspect-square rounded-lg overflow-hidden group\">\n                      <img\n                        src={image.url}\n                        alt={image.alt}\n                        className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                      />\n                    </div>\n                  ))}\n                  {service.images.length > 8 && (\n                    <div className=\"aspect-square rounded-lg bg-gray-100 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-gray-600\">\n                          +{service.images.length - 8}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">更多图片</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Tags */}\n            {service.tags && service.tags.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">服务标签</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {service.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Packages Tab */}\n        {activeTab === 'packages' && (\n          <div className=\"space-y-6\">\n            {service.packages && service.packages.length > 0 ? (\n              <>\n                <div>\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">定价方案</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {service.packages.map((pkg, index) => (\n                      <div\n                        key={pkg.id}\n                        className={cn(\n                          'border-2 rounded-lg p-6 transition-all hover:shadow-lg',\n                          pkg.isPopular\n                            ? 'border-blue-500 relative transform scale-105'\n                            : 'border-gray-200'\n                        )}\n                      >\n                        {pkg.isPopular && (\n                          <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                            <span className=\"bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n                              热门推荐\n                            </span>\n                          </div>\n                        )}\n\n                        <div className=\"text-center mb-4\">\n                          <h5 className=\"text-xl font-bold text-gray-900 mb-2\">{pkg.name}</h5>\n                          <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                            {formatCurrency(pkg.price)}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">\n                            {pkg.deliveryTime}天交付 • {pkg.revisions}次修改\n                          </div>\n                        </div>\n\n                        {pkg.description && (\n                          <p className=\"text-gray-600 text-sm mb-4 text-center\">\n                            {pkg.description}\n                          </p>\n                        )}\n\n                        {pkg.features.length > 0 && (\n                          <ul className=\"space-y-2 mb-6\">\n                            {pkg.features.map((feature, idx) => (\n                              <li key={idx} className=\"flex items-start space-x-2\">\n                                <span className=\"text-green-500 mt-0.5 flex-shrink-0\">✓</span>\n                                <span className=\"text-sm text-gray-700\">{feature}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n\n                        <button\n                          type=\"button\"\n                          className={cn(\n                            'w-full py-2 px-4 rounded-lg font-medium transition-colors',\n                            pkg.isPopular\n                              ? 'bg-blue-600 text-white hover:bg-blue-700'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          )}\n                        >\n                          选择此套餐\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <div className=\"text-4xl mb-3\">💰</div>\n                <p>尚未设置定价套餐</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Details Tab */}\n        {activeTab === 'details' && (\n          <div className=\"space-y-6\">\n            {/* Requirements */}\n            {service.requirements && service.requirements.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">客户需求</h4>\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <ul className=\"space-y-2\">\n                    {service.requirements.map((requirement, index) => (\n                      <li key={index} className=\"flex items-start space-x-2\">\n                        <span className=\"flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-xs font-medium\">\n                          {index + 1}\n                        </span>\n                        <span className=\"text-gray-700\">{requirement}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n\n            {/* Deliverables */}\n            {service.deliverables && service.deliverables.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">交付物</h4>\n                <div className=\"bg-green-50 rounded-lg p-4\">\n                  <ul className=\"space-y-2\">\n                    {service.deliverables.map((deliverable, index) => (\n                      <li key={index} className=\"flex items-start space-x-2\">\n                        <span className=\"flex-shrink-0 w-6 h-6 bg-green-100 text-green-700 rounded-full flex items-center justify-center text-xs font-medium\">\n                          ✓\n                        </span>\n                        <span className=\"text-gray-700\">{deliverable}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n\n            {/* Videos */}\n            {service.videos && service.videos.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">服务视频</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {service.videos.map((video) => (\n                    <div key={video.id} className=\"aspect-video bg-gray-100 rounded-lg overflow-hidden\">\n                      {video.thumbnail ? (\n                        <div className=\"relative\">\n                          <img\n                            src={video.thumbnail}\n                            alt={video.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <div className=\"absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center\">\n                            <button className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center hover:bg-gray-100 transition-colors\">\n                              <svg\n                                className=\"w-6 h-6 text-gray-800 ml-1\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\n                                />\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                                />\n                              </svg>\n                            </button>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\n                          <div className=\"text-center\">\n                            <svg\n                              className=\"w-12 h-12 mx-auto mb-2\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                              />\n                            </svg>\n                            <p className=\"text-sm\">{video.title}</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Documents */}\n            {service.documents && service.documents.length > 0 && (\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">相关文档</h4>\n                <div className=\"space-y-2\">\n                  {service.documents.map((doc) => (\n                    <div\n                      key={doc.id}\n                      className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"text-2xl\">\n                          {doc.type.includes('pdf') ? '📄' :\n                           doc.type.includes('word') ? '📝' :\n                           doc.type.includes('excel') ? '📊' :\n                           doc.type.includes('image') ? '🖼️' : '📎'}\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{doc.name}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {(doc.size / 1024 / 1024).toFixed(2)} MB\n                          </p>\n                        </div>\n                      </div>\n                      <button\n                        type=\"button\"\n                        className=\"text-blue-600 hover:text-blue-700 text-sm\"\n                      >\n                        下载\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* SEO Preview */}\n            <div>\n              <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">搜索引擎预览</h4>\n              <div className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\n                <div className=\"max-w-xl\">\n                  <div className=\"text-blue-600 text-lg hover:underline cursor-pointer mb-1\">\n                    {service.seoTitle || service.title || '服务标题'} - 专业服务平台\n                  </div>\n                  <div className=\"text-green-700 text-sm mb-1\">\n                    https://platform.com/services/service-link\n                  </div>\n                  <div className=\"text-gray-600 text-sm\">\n                    {service.seoDescription ||\n                     (service.description ? service.description.replace(/<[^>]*>/g, '').substring(0, 160) + '...' :\n                      '服务描述将显示在搜索结果中...')}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Actions */}\n      {onEdit && (\n        <div className=\"border-t border-gray-200 p-4 bg-gray-50\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-sm text-gray-600\">\n              发现问题？点击下方按钮返回编辑\n            </div>\n            <Button\n              onClick={() => onEdit(0)}\n              disabled={disabled}\n            >\n              返回编辑\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ServicePreview;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/creation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/ChineseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/ChineseForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1772,1775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1772,1775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4144,4147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4144,4147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5230,5233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5230,5233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6282,6285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6282,6285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":412,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7107,7110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7107,7110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":456,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7961,7964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7961,7964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":512,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":512,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8894,8897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8894,8897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Form as AntdForm, FormProps as AntdFormProps, Input, Select, Button, Radio, Checkbox, Rate } from 'antd';\nimport { cn } from '../../utils/cn';\n\n// Chinese Form Component Interface\nexport interface ChineseFormProps extends Omit<AntdFormProps, 'layout' | 'size'> {\n  /**\n   * Form layout optimized for Chinese mobile users\n   * @default 'vertical'\n   */\n  layout?: 'vertical' | 'horizontal' | 'inline';\n\n  /**\n   * Form size\n   * @default 'md'\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * Submit button text\n   * @default '提交'\n   */\n  submitText?: string;\n\n  /**\n   * Reset button text\n   * @default '重置'\n   */\n  resetText?: string;\n\n  /**\n   * Show reset button\n   * @default true\n   */\n  showReset?: boolean;\n\n  /**\n   * Show loading state\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * Custom CSS classes using Tailwind\n   */\n  className?: string;\n\n  /**\n   * Form actions (custom buttons)\n   */\n  actions?: React.ReactNode;\n\n  /**\n   * Children content\n   */\n  children?: React.ReactNode;\n}\n\n// Chinese Form Component\nexport const ChineseForm: React.FC<ChineseFormProps> = ({\n  layout = 'vertical',\n  size = 'md',\n  submitText = '提交',\n  resetText = '重置',\n  showReset = true,\n  loading = false,\n  className,\n  actions,\n  children,\n  onFinish,\n  ...antdProps\n}) => {\n  // Size mapping\n  const sizeMapping = {\n    sm: 'small' as const,\n    md: 'middle' as const,\n    lg: 'large' as const,\n  };\n\n  // Form classes\n  const formClasses = cn(\n    'text-chinese',\n    layout === 'vertical' && 'space-y-4',\n    layout === 'horizontal' && 'grid grid-cols-1 md:grid-cols-3 gap-4',\n    layout === 'inline' && 'flex flex-wrap items-center gap-4',\n    className\n  );\n\n  // Handle form submission\n  const handleFinish = async (values: any) => {\n    if (onFinish) {\n      await onFinish(values);\n    }\n  };\n\n  // Default actions\n  const defaultActions = (\n    <div className={cn('flex gap-3', layout === 'inline' ? 'ml-4' : 'mt-6')}>\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        loading={loading}\n        size={sizeMapping[size]}\n        className=\"min-h-[44px] px-6 font-medium\"\n      >\n        {submitText}\n      </Button>\n      {showReset && (\n        <Button\n          htmlType=\"reset\"\n          size={sizeMapping[size]}\n          className=\"min-h-[44px] px-6 font-medium\"\n        >\n          {resetText}\n        </Button>\n      )}\n    </div>\n  );\n\n  return (\n    <AntdForm\n      {...antdProps}\n      layout={layout}\n      size={sizeMapping[size]}\n      className={formClasses}\n      onFinish={handleFinish}\n    >\n      {children}\n      {actions || defaultActions}\n    </AntdForm>\n  );\n};\n\n// Chinese Form Item Component\nexport interface ChineseFormItemProps {\n  /**\n   * Field name\n   */\n  name: string;\n\n  /**\n   * Label text\n   */\n  label?: string;\n\n  /**\n   * Required field indicator\n   * @default false\n   */\n  required?: boolean;\n\n  /**\n   * Help text\n   */\n  help?: string;\n\n  /**\n   * Extra information\n   */\n  extra?: string;\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Input component\n   */\n  children: React.ReactNode;\n}\n\nexport const ChineseFormItem: React.FC<ChineseFormItemProps> = ({\n  name,\n  label,\n  required = false,\n  help,\n  extra,\n  className,\n  children,\n}) => {\n  return (\n    <AntdForm.Item\n      name={name}\n      label={label}\n      required={required}\n      help={help}\n      extra={extra}\n      className={cn('mb-4', className)}\n      rules={required ? [{ required: true, message: `请输入${label}` }] : undefined}\n    >\n      {children}\n    </AntdForm.Item>\n  );\n};\n\n// Chinese Input Component\nexport interface ChineseInputProps {\n  /**\n   * Placeholder text\n   */\n  placeholder?: string;\n\n  /**\n   * Input type\n   * @default 'text'\n   */\n  type?: 'text' | 'password' | 'email' | 'tel' | 'url' | 'search';\n\n  /**\n   * Show clear button\n   * @default true\n   */\n  allowClear?: boolean;\n\n  /**\n   * Max length\n   */\n  maxLength?: number;\n\n  /**\n   * Show character count\n   * @default false\n   */\n  showCount?: boolean;\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Input props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseInput: React.FC<ChineseInputProps> = ({\n  placeholder = '请输入...',\n  type = 'text',\n  allowClear = true,\n  maxLength,\n  showCount = false,\n  className,\n  ...props\n}) => {\n  const InputComponent = type === 'password' ? Input.Password : Input;\n\n  return (\n    <InputComponent\n      {...props}\n      type={type}\n      placeholder={placeholder}\n      allowClear={allowClear}\n      maxLength={maxLength}\n      showCount={showCount}\n      className={cn('h-11 px-4 rounded-chinese', className)}\n    />\n  );\n};\n\n// Chinese Select Component\nexport interface ChineseSelectProps {\n  /**\n   * Placeholder text\n   */\n  placeholder?: string;\n\n  /**\n   * Options array\n   */\n  options?: { label: string; value: string | number }[];\n\n  /**\n   * Allow search\n   * @default false\n   */\n  showSearch?: boolean;\n\n  /**\n   * Allow clear\n   * @default true\n   */\n  allowClear?: boolean;\n\n  /**\n   * Multiple selection\n   * @default false\n   */\n  mode?: 'multiple' | 'tags';\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Select props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseSelect: React.FC<ChineseSelectProps> = ({\n  placeholder = '请选择...',\n  options,\n  showSearch = false,\n  allowClear = true,\n  mode,\n  className,\n  ...props\n}) => {\n  return (\n    <Select\n      {...props}\n      placeholder={placeholder}\n      options={options}\n      showSearch={showSearch}\n      allowClear={allowClear}\n      mode={mode}\n      className={cn('w-full', className)}\n      filterOption={(input, option) =>\n        (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n      }\n    />\n  );\n};\n\n// Chinese Textarea Component\nexport interface ChineseTextareaProps {\n  /**\n   * Placeholder text\n   */\n  placeholder?: string;\n\n  /**\n   * Number of rows\n   * @default 4\n   */\n  rows?: number;\n\n  /**\n   * Max length\n   */\n  maxLength?: number;\n\n  /**\n   * Show character count\n   * @default false\n   */\n  showCount?: boolean;\n\n  /**\n   * Allow clear\n   * @default true\n   */\n  allowClear?: boolean;\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Textarea props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseTextarea: React.FC<ChineseTextareaProps> = ({\n  placeholder = '请输入...',\n  rows = 4,\n  maxLength,\n  showCount = false,\n  allowClear = true,\n  className,\n  ...props\n}) => {\n  return (\n    <Input.TextArea\n      {...props}\n      placeholder={placeholder}\n      rows={rows}\n      maxLength={maxLength}\n      showCount={showCount}\n      allowClear={allowClear}\n      className={cn('rounded-chinese', className)}\n    />\n  );\n};\n\n// Chinese Radio Group Component\nexport interface ChineseRadioGroupProps {\n  /**\n   * Options array\n   */\n  options: { label: string; value: string | number }[];\n\n  /**\n   * Layout direction\n   * @default 'vertical'\n   */\n  direction?: 'horizontal' | 'vertical';\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Radio group props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseRadioGroup: React.FC<ChineseRadioGroupProps> = ({\n  options,\n  direction = 'vertical',\n  className,\n  ...props\n}) => {\n  return (\n    <Radio.Group\n      {...props}\n      className={cn('space-y-2', direction === 'horizontal' && 'flex space-y-0 space-x-4', className)}\n    >\n      {options.map((option) => (\n        <Radio key={option.value} value={option.value}>\n          {option.label}\n        </Radio>\n      ))}\n    </Radio.Group>\n  );\n};\n\n// Chinese Checkbox Group Component\nexport interface ChineseCheckboxGroupProps {\n  /**\n   * Options array\n   */\n  options: { label: string; value: string | number }[];\n\n  /**\n   * Layout direction\n   * @default 'vertical'\n   */\n  direction?: 'horizontal' | 'vertical';\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Checkbox group props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseCheckboxGroup: React.FC<ChineseCheckboxGroupProps> = ({\n  options,\n  direction = 'vertical',\n  className,\n  ...props\n}) => {\n  return (\n    <Checkbox.Group\n      {...props}\n      className={cn('space-y-2', direction === 'horizontal' && 'flex space-y-0 space-x-4', className)}\n    >\n      {options.map((option) => (\n        <Checkbox key={option.value} value={option.value}>\n          {option.label}\n        </Checkbox>\n      ))}\n    </Checkbox.Group>\n  );\n};\n\n// Chinese Rate Component\nexport interface ChineseRateProps {\n  /**\n   * Number of stars\n   * @default 5\n   */\n  count?: number;\n\n  /**\n   * Allow half stars\n   * @default false\n   */\n  allowHalf?: boolean;\n\n  /**\n   * Allow clear\n   * @default true\n   */\n  allowClear?: boolean;\n\n  /**\n   * Character tooltips\n   */\n  tooltips?: string[];\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Rate props\n   */\n  [key: string]: any;\n}\n\nexport const ChineseRate: React.FC<ChineseRateProps> = ({\n  count = 5,\n  allowHalf = false,\n  allowClear = true,\n  tooltips = ['很差', '较差', '一般', '较好', '很好'],\n  className,\n  ...props\n}) => {\n  return (\n    <Rate\n      {...props}\n      count={count}\n      allowHalf={allowHalf}\n      allowClear={allowClear}\n      tooltips={tooltips}\n      className={className}\n    />\n  );\n};\n\n// Export components\nconst ChineseFormWithComponents = Object.assign(ChineseForm, {\n  Item: ChineseFormItem,\n  Input: ChineseInput,\n  Select: ChineseSelect,\n  Textarea: ChineseTextarea,\n  RadioGroup: ChineseRadioGroup,\n  CheckboxGroup: ChineseCheckboxGroup,\n  Rate: ChineseRate,\n});\n\nexport default ChineseFormWithComponents;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/ui/Loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/verification/IdentityVerification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Camera' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3403,3406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3403,3406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Upload, Camera, AlertCircle, CheckCircle, X } from 'lucide-react';\nimport { verificationService } from '../../services/verification';\nimport { VerificationDocument } from '../../types';\n\ninterface IdentityVerificationProps {\n  onVerificationComplete: (document: VerificationDocument) => void;\n  onVerificationError: (error: string) => void;\n}\n\nexport const IdentityVerification: React.FC<IdentityVerificationProps> = ({\n  onVerificationComplete,\n  onVerificationError,\n}) => {\n  const [documents, setDocuments] = useState<{\n    idCard?: File;\n    passport?: File;\n    selfie?: File;\n  }>({});\n\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const [isUploading, setIsUploading] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\n\n  const handleFileSelect = useCallback((type: 'idCard' | 'passport' | 'selfie', file: File) => {\n    // Validate file\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      onVerificationError('请上传 JPG、PNG 或 WebP 格式的图片');\n      return;\n    }\n\n    if (file.size > maxSize) {\n      onVerificationError('文件大小不能超过 10MB');\n      return;\n    }\n\n    setDocuments(prev => ({ ...prev, [type]: file }));\n    setUploadProgress(prev => ({ ...prev, [type]: 0 }));\n  }, [onVerificationError]);\n\n  const handleDrop = useCallback((e: React.DragEvent, type: 'idCard' | 'passport' | 'selfie') => {\n    e.preventDefault();\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(type, files[0]);\n    }\n  }, [handleFileSelect]);\n\n  const removeDocument = useCallback((type: 'idCard' | 'passport' | 'selfie') => {\n    setDocuments(prev => {\n      const newDocs = { ...prev };\n      delete newDocs[type];\n      return newDocs;\n    });\n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[type];\n      return newProgress;\n    });\n  }, []);\n\n  const uploadDocuments = useCallback(async () => {\n    if (Object.keys(documents).length === 0) {\n      onVerificationError('请至少上传一份身份证明文件');\n      return;\n    }\n\n    setIsUploading(true);\n    setVerificationStatus('uploading');\n\n    try {\n      const uploadedDocs: VerificationDocument[] = [];\n\n      for (const [type, file] of Object.entries(documents)) {\n        const documentType = type === 'idCard' ? 'id_card' : type === 'passport' ? 'passport' : 'selfie';\n\n        // Simulate progress\n        for (let progress = 0; progress <= 100; progress += 10) {\n          setUploadProgress(prev => ({ ...prev, [type]: progress }));\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        const uploadedDoc = await verificationService.uploadDocument(\n          documentType,\n          file,\n          {\n            purpose: 'identity_verification',\n            metadata: JSON.stringify({\n              originalName: file.name,\n              fileSize: file.size,\n              uploadedAt: new Date().toISOString(),\n            }),\n          }\n        );\n\n        uploadedDocs.push(uploadedDoc);\n      }\n\n      setVerificationStatus('success');\n      onVerificationComplete(uploadedDocs[0]); // Return the primary document\n\n    } catch (error: any) {\n      setVerificationStatus('error');\n      onVerificationError(error.message || '上传失败，请重试');\n    } finally {\n      setIsUploading(false);\n    }\n  }, [documents, onVerificationComplete, onVerificationError]);\n\n  const DocumentUploadArea: React.FC<{\n    type: 'idCard' | 'passport' | 'selfie';\n    title: string;\n    description: string;\n    example: string;\n  }> = ({ type, title, description, example }) => (\n    <div className=\"bg-white rounded-lg border-2 border-dashed border-gray-300 p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">{description}</p>\n        </div>\n        {documents[type] && (\n          <button\n            onClick={() => removeDocument(type)}\n            className=\"text-red-500 hover:text-red-700\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        )}\n      </div>\n\n      {!documents[type] ? (\n        <div\n          onDrop={(e) => handleDrop(e, type)}\n          onDragOver={(e) => e.preventDefault()}\n          className=\"relative\"\n        >\n          <input\n            type=\"file\"\n            accept=\"image/jpeg,image/png,image/webp\"\n            onChange={(e) => e.target.files?.[0] && handleFileSelect(type, e.target.files[0])}\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n          />\n          <div className=\"text-center py-8\">\n            <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <div className=\"mt-4\">\n              <label className=\"cursor-pointer\">\n                <span className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                  点击上传\n                </span>\n                <span className=\"text-gray-600\"> 或拖拽文件到此处</span>\n              </label>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              支持 JPG、PNG、WebP 格式，最大 10MB\n            </p>\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-xs text-blue-800\">{example}</p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4 p-4 bg-green-50 rounded-lg\">\n            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-green-900\">已选择文件</p>\n              <p className=\"text-xs text-green-700\">{documents[type]?.name}</p>\n              <p className=\"text-xs text-green-600\">\n                {((documents[type]?.size || 0) / 1024 / 1024).toFixed(2)} MB\n              </p>\n            </div>\n          </div>\n\n          {uploadProgress[type] !== undefined && uploadProgress[type] > 0 && (\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${uploadProgress[type]}%` }}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900\">身份验证要求</h3>\n            <ul className=\"mt-2 text-sm text-blue-800 space-y-1\">\n              <li>• 请确保文件清晰可见，所有信息完整</li>\n              <li>• 文件上的姓名必须与您注册时的姓名一致</li>\n              <li>• 所有文件必须是有效的且在有效期内</li>\n              <li>• 我们将通过加密方式安全处理您的个人信息</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <DocumentUploadArea\n          type=\"idCard\"\n          title=\"身份证\"\n          description=\"上传身份证正反面照片\"\n          example=\"示例：身份证应包含姓名、身份证号、出生日期、住址等信息\"\n        />\n\n        <DocumentUploadArea\n          type=\"passport\"\n          title=\"护照\"\n          description=\"上传护照信息页照片\"\n          example=\"示例：护照应包含姓名、护照号、出生日期、国籍等信息\"\n        />\n      </div>\n\n      <DocumentUploadArea\n        type=\"selfie\"\n        title=\"手持证件自拍\"\n        description=\"手持身份证或护照的自拍照片\"\n        example=\"示例：手持证件放在胸前，面部和证件信息都清晰可见\"\n      />\n\n      {verificationStatus === 'error' && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\" />\n            <p className=\"text-sm text-red-800\">上传失败，请检查文件后重试</p>\n          </div>\n        </div>\n      )}\n\n      {verificationStatus === 'success' && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 mr-3 flex-shrink-0\" />\n            <p className=\"text-sm text-green-800\">文件上传成功，正在审核中</p>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex justify-end\">\n        <button\n          onClick={uploadDocuments}\n          disabled={isUploading || Object.keys(documents).length === 0}\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n        >\n          {isUploading ? '上传中...' : '提交验证'}\n        </button>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/verification/PhoneVerification.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3204,3207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3204,3207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4060,4063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4060,4063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Phone, MessageCircle, CheckCircle, AlertCircle, Clock } from 'lucide-react';\nimport { verificationService } from '../../services/verification';\n\ninterface PhoneVerificationProps {\n  onVerificationComplete: (phone: string) => void;\n  onVerificationError: (error: string) => void;\n  initialPhone?: string;\n}\n\nexport const PhoneVerification: React.FC<PhoneVerificationProps> = ({\n  onVerificationComplete,\n  onVerificationError,\n  initialPhone = '',\n}) => {\n  const [phone, setPhone] = useState(initialPhone);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [isCodeSent, setIsCodeSent] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [isVerified, setIsVerified] = useState(false);\n  const [attempts, setAttempts] = useState(0);\n\n  const MAX_ATTEMPTS = 3;\n  const COUNTDOWN_SECONDS = 60;\n\n  const formatPhoneNumber = useCallback((value: string) => {\n    // Remove all non-digit characters\n    const digits = value.replace(/\\D/g, '');\n\n    // Format for Chinese phone numbers: +86 XXX-XXXX-XXXX\n    if (digits.startsWith('86') && digits.length > 2) {\n      const mobile = digits.slice(2);\n      if (mobile.length <= 3) {\n        return `+86 ${mobile}`;\n      } else if (mobile.length <= 7) {\n        return `+86 ${mobile.slice(0, 3)}-${mobile.slice(3)}`;\n      } else {\n        return `+86 ${mobile.slice(0, 3)}-${mobile.slice(3, 7)}-${mobile.slice(7, 11)}`;\n      }\n    }\n\n    // If just digits, assume it's a Chinese number\n    if (digits.length <= 3) {\n      return digits;\n    } else if (digits.length <= 7) {\n      return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    } else {\n      return `${digits.slice(0, 3)}-${digits.slice(3, 7)}-${digits.slice(7, 11)}`;\n    }\n  }, []);\n\n  const validatePhone = useCallback((phone: string) => {\n    const digits = phone.replace(/\\D/g, '');\n\n    // Check if it's a valid Chinese mobile number\n    if (digits.startsWith('86') && digits.length === 13) {\n      const mobile = digits.slice(2);\n      return /^1[3-9]\\d{9}$/.test(mobile);\n    }\n\n    // Check if it's a mobile number without country code\n    if (digits.length === 11) {\n      return /^1[3-9]\\d{9}$/.test(digits);\n    }\n\n    return false;\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhoneNumber(e.target.value);\n    setPhone(formatted);\n  }, [formatPhoneNumber]);\n\n  const sendVerificationCode = useCallback(async () => {\n    if (!validatePhone(phone)) {\n      onVerificationError('请输入有效的中国手机号码');\n      return;\n    }\n\n    try {\n      const success = await verificationService.sendPhoneVerification(phone);\n      if (success) {\n        setIsCodeSent(true);\n        setCountdown(COUNTDOWN_SECONDS);\n\n        // Start countdown\n        const timer = setInterval(() => {\n          setCountdown(prev => {\n            if (prev <= 1) {\n              clearInterval(timer);\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      } else {\n        onVerificationError('发送验证码失败，请重试');\n      }\n    } catch (error: any) {\n      onVerificationError(error.message || '发送验证码失败');\n    }\n  }, [phone, validatePhone, onVerificationError]);\n\n  const verifyCode = useCallback(async () => {\n    if (verificationCode.length !== 6) {\n      onVerificationError('请输入6位验证码');\n      return;\n    }\n\n    setIsVerifying(true);\n\n    try {\n      const success = await verificationService.verifyPhone(phone, verificationCode);\n      if (success) {\n        setIsVerified(true);\n        onVerificationComplete(phone);\n      } else {\n        setAttempts(prev => prev + 1);\n        if (attempts + 1 >= MAX_ATTEMPTS) {\n          onVerificationError('验证失败次数过多，请重新发送验证码');\n          setIsCodeSent(false);\n          setVerificationCode('');\n          setAttempts(0);\n        } else {\n          onVerificationError(`验证码错误，还有 ${MAX_ATTEMPTS - attempts - 1} 次机会`);\n        }\n      }\n    } catch (error: any) {\n      onVerificationError(error.message || '验证失败');\n    } finally {\n      setIsVerifying(false);\n    }\n  }, [phone, verificationCode, attempts, onVerificationComplete, onVerificationError]);\n\n  const handleCodeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/\\D/g, '').slice(0, 6);\n    setVerificationCode(value);\n  }, []);\n\n  const resetVerification = useCallback(() => {\n    setIsCodeSent(false);\n    setVerificationCode('');\n    setCountdown(0);\n    setAttempts(0);\n    setIsVerified(false);\n  }, []);\n\n  const handleResendCode = useCallback(() => {\n    resetVerification();\n    setTimeout(sendVerificationCode, 100);\n  }, [resetVerification, sendVerificationCode]);\n\n  if (isVerified) {\n    return (\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 text-center\">\n        <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-green-900 mb-2\">手机号验证成功</h3>\n        <p className=\"text-green-700 mb-4\">\n          您的手机号 {phone} 已成功验证\n        </p>\n        <button\n          onClick={resetVerification}\n          className=\"text-sm text-green-600 hover:text-green-700 font-medium\"\n        >\n          更换手机号\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <Phone className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900\">手机号验证</h3>\n            <p className=\"mt-1 text-sm text-blue-800\">\n              我们将向您的手机号发送6位验证码，用于验证您的身份\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {!isCodeSent ? (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              手机号码 *\n            </label>\n            <div className=\"relative\">\n              <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                type=\"tel\"\n                value={phone}\n                onChange={handlePhoneChange}\n                placeholder=\"+86 138-0013-8000\"\n                className=\"w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n            <p className=\"mt-1 text-xs text-gray-500\">\n              请输入有效的中国手机号码，支持 +86 或直接输入11位号码\n            </p>\n          </div>\n\n          {phone && validatePhone(phone) && (\n            <button\n              onClick={sendVerificationCode}\n              className=\"w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center\"\n            >\n              <MessageCircle className=\"w-5 h-5 mr-2\" />\n              发送验证码\n            </button>\n          )}\n\n          {phone && !validatePhone(phone) && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n              <div className=\"flex items-start\">\n                <AlertCircle className=\"w-5 h-5 text-yellow-600 mt-0.5 mr-2 flex-shrink-0\" />\n                <p className=\"text-sm text-yellow-800\">\n                  请输入有效的中国手机号码\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              验证码 *\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                value={verificationCode}\n                onChange={handleCodeChange}\n                placeholder=\"请输入6位验证码\"\n                maxLength={6}\n                className=\"w-full px-3 py-3 text-center text-2xl tracking-widest border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n              {attempts > 0 && (\n                <div className=\"absolute -top-6 right-0 text-sm text-red-600\">\n                  剩余尝试次数: {MAX_ATTEMPTS - attempts}\n                </div>\n              )}\n            </div>\n            <p className=\"mt-2 text-sm text-gray-600 text-center\">\n              验证码已发送至 {phone}\n            </p>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={verifyCode}\n              disabled={verificationCode.length !== 6 || isVerifying}\n              className=\"flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center\"\n            >\n              {isVerifying ? '验证中...' : '确认验证'}\n            </button>\n\n            <button\n              onClick={resetVerification}\n              className=\"px-4 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              返回\n            </button>\n          </div>\n\n          {countdown > 0 ? (\n            <div className=\"text-center text-sm text-gray-500\">\n              <Clock className=\"w-4 h-4 inline mr-1\" />\n              {countdown} 秒后可重新发送\n            </div>\n          ) : (\n            <button\n              onClick={handleResendCode}\n              className=\"w-full py-2 text-blue-600 hover:text-blue-700 font-medium text-sm\"\n            >\n              重新发送验证码\n            </button>\n          )}\n\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-3\">\n            <p className=\"text-xs text-gray-600\">\n              <strong>未收到验证码？</strong><br />\n              • 请检查手机是否开启了短信拦截功能<br />\n              • 确认手机号码输入正确<br />\n              • 等待1-2分钟后重新尝试发送\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/verification/PortfolioReview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5151,5154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5151,5154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Upload, Image as ImageIcon, Link2, Plus, X, Camera, Video } from 'lucide-react';\nimport { verificationService } from '../../services/verification';\nimport { PortfolioItem } from '../../types';\n\ninterface PortfolioReviewProps {\n  onPortfolioUpdate: (portfolio: PortfolioItem[]) => void;\n  onVerificationError: (error: string) => void;\n}\n\ninterface PortfolioForm {\n  id: string;\n  title: string;\n  description: string;\n  projectUrl: string;\n  technologies: string[];\n  images: File[];\n  completedAt: string;\n}\n\nconst COMMON_TECHNOLOGIES = [\n  'JavaScript', 'TypeScript', 'React', 'Vue.js', 'Angular', 'Node.js',\n  'Python', 'Django', 'Flask', 'Java', 'Spring', 'C#', '.NET',\n  'PHP', 'Laravel', 'Ruby', 'Rails', 'Go', 'Rust', 'Swift',\n  'Kotlin', 'HTML', 'CSS', 'Sass', 'Tailwind CSS', 'Bootstrap',\n  'MySQL', 'PostgreSQL', 'MongoDB', 'Redis', 'Docker', 'Kubernetes',\n  'AWS', 'Azure', 'Google Cloud', 'Git', 'CI/CD', 'Agile'\n];\n\nexport const PortfolioReview: React.FC<PortfolioReviewProps> = ({\n  onPortfolioUpdate,\n  onVerificationError,\n}) => {\n  const [portfolioItems, setPortfolioItems] = useState<PortfolioForm[]>([]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n\n  const [newItem, setNewItem] = useState<PortfolioForm>({\n    id: Date.now().toString(),\n    title: '',\n    description: '',\n    projectUrl: '',\n    technologies: [],\n    images: [],\n    completedAt: '',\n  });\n\n  const [selectedTechs, setSelectedTechs] = useState<string[]>([]);\n\n  const handleInputChange = useCallback((\n    field: keyof PortfolioForm,\n    value: string | File[] | string[]\n  ) => {\n    setNewItem(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  }, []);\n\n  const handleImageSelect = useCallback((files: FileList | null) => {\n    if (!files) return;\n\n    const imageFiles = Array.from(files);\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    const maxSize = 5 * 1024 * 1024; // 5MB per image\n    const maxImages = 10;\n\n    if (newItem.images.length + imageFiles.length > maxImages) {\n      onVerificationError(`最多只能上传 ${maxImages} 张图片`);\n      return;\n    }\n\n    const validImages = imageFiles.filter(file => {\n      if (!allowedTypes.includes(file.type)) {\n        onVerificationError(`${file.name} 不是支持的图片格式`);\n        return false;\n      }\n\n      if (file.size > maxSize) {\n        onVerificationError(`${file.name} 大小超过 5MB`);\n        return false;\n      }\n\n      return true;\n    });\n\n    handleInputChange('images', [...newItem.images, ...validImages]);\n  }, [newItem.images, handleInputChange, onVerificationError]);\n\n  const removeImage = useCallback((index: number) => {\n    setNewItem(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index),\n    }));\n  }, []);\n\n  const toggleTechnology = useCallback((tech: string) => {\n    setSelectedTechs(prev => {\n      const newTechs = prev.includes(tech)\n        ? prev.filter(t => t !== tech)\n        : [...prev, tech];\n\n      handleInputChange('technologies', newTechs);\n      return newTechs;\n    });\n  }, [handleInputChange]);\n\n  const addPortfolioItem = useCallback(() => {\n    // Validate required fields\n    if (!newItem.title.trim()) {\n      onVerificationError('请输入项目标题');\n      return;\n    }\n\n    if (!newItem.description.trim()) {\n      onVerificationError('请输入项目描述');\n      return;\n    }\n\n    if (newItem.images.length === 0) {\n      onVerificationError('请至少上传一张项目图片');\n      return;\n    }\n\n    if (newItem.technologies.length === 0) {\n      onVerificationError('请选择使用的技术');\n      return;\n    }\n\n    setPortfolioItems(prev => [...prev, newItem]);\n    setNewItem({\n      id: Date.now().toString(),\n      title: '',\n      description: '',\n      projectUrl: '',\n      technologies: [],\n      images: [],\n      completedAt: '',\n    });\n    setSelectedTechs([]);\n    setIsAdding(false);\n  }, [newItem, onVerificationError]);\n\n  const removePortfolioItem = useCallback((id: string) => {\n    setPortfolioItems(prev => prev.filter(item => item.id !== id));\n  }, []);\n\n  const uploadPortfolio = useCallback(async () => {\n    if (portfolioItems.length === 0) {\n      onVerificationError('请至少添加一个作品集项目');\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const uploadedItems: PortfolioItem[] = [];\n\n      for (const item of portfolioItems) {\n        // Simulate upload progress\n        for (let progress = 0; progress <= 100; progress += 10) {\n          setUploadProgress(prev => ({ ...prev, [item.id]: progress }));\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        const uploadedItem = await verificationService.uploadPortfolioItem(\n          item.title,\n          item.description,\n          item.images,\n          item.technologies,\n          item.projectUrl || undefined\n        );\n\n        uploadedItems.push({\n          ...uploadedItem,\n          completedAt: item.completedAt || new Date().toISOString(),\n        });\n      }\n\n      onPortfolioUpdate(uploadedItems);\n\n    } catch (error: any) {\n      onVerificationError(error.message || '上传失败，请重试');\n    } finally {\n      setIsUploading(false);\n      setUploadProgress({});\n    }\n  }, [portfolioItems, onPortfolioUpdate, onVerificationError]);\n\n  const PortfolioCard: React.FC<{ item: PortfolioForm }> = ({ item }) => (\n    <div className=\"bg-white border rounded-lg overflow-hidden\">\n      {/* Image Preview */}\n      <div className=\"aspect-video bg-gray-100 relative\">\n        {item.images.length > 0 ? (\n          <img\n            src={URL.createObjectURL(item.images[0])}\n            alt={item.title}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center\">\n            <ImageIcon className=\"w-12 h-12 text-gray-400\" />\n          </div>\n        )}\n        {item.images.length > 1 && (\n          <div className=\"absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs\">\n            +{item.images.length - 1}\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-4 space-y-3\">\n        <div className=\"flex justify-between items-start\">\n          <h4 className=\"font-semibold text-gray-900 line-clamp-1\">{item.title}</h4>\n          <button\n            onClick={() => removePortfolioItem(item.id)}\n            className=\"text-red-500 hover:text-red-700\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n\n        <p className=\"text-sm text-gray-600 line-clamp-2\">{item.description}</p>\n\n        {item.technologies.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {item.technologies.map(tech => (\n              <span\n                key={tech}\n                className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full\"\n              >\n                {tech}\n              </span>\n            ))}\n          </div>\n        )}\n\n        {item.projectUrl && (\n          <div className=\"flex items-center text-sm text-blue-600\">\n            <Link2 className=\"w-3 h-3 mr-1\" />\n            <span className=\"truncate\">{item.projectUrl}</span>\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <span>{item.images.length} 张图片</span>\n          {item.completedAt && <span>完成于 {item.completedAt}</span>}\n        </div>\n\n        {uploadProgress[item.id] !== undefined && (\n          <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n            <div\n              className=\"bg-blue-600 h-1.5 rounded-full transition-all duration-300\"\n              style={{ width: `${uploadProgress[item.id]}%` }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <Video className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900\">作品集要求</h3>\n            <ul className=\"mt-2 text-sm text-blue-800 space-y-1\">\n              <li>• 展示您最优秀的项目作品</li>\n              <li>• 提供清晰的项目描述和使用的技术</li>\n              <li>• 上传高质量的项目截图或照片</li>\n              <li>• 确保项目能够体现您的专业技能</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Existing Portfolio Items */}\n      {portfolioItems.length > 0 && (\n        <div className=\"space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">已添加的作品</h3>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {portfolioItems.map(item => (\n              <PortfolioCard key={item.id} item={item} />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add New Portfolio Item Form */}\n      {isAdding && (\n        <div className=\"bg-white border rounded-lg p-6 space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">添加作品集项目</h3>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              项目标题 *\n            </label>\n            <input\n              type=\"text\"\n              value={newItem.title}\n              onChange={(e) => handleInputChange('title', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"例如：电商网站开发\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              项目描述 *\n            </label>\n            <textarea\n              value={newItem.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              rows={4}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"详细描述项目的目标、您的职责、遇到的挑战和解决方案...\"\n            />\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                项目链接\n              </label>\n              <input\n                type=\"url\"\n                value={newItem.projectUrl}\n                onChange={(e) => handleInputChange('projectUrl', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://github.com/...\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                完成时间\n              </label>\n              <input\n                type=\"date\"\n                value={newItem.completedAt}\n                onChange={(e) => handleInputChange('completedAt', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n\n          {/* Technologies Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              使用的技术 *\n            </label>\n            <div className=\"border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto\">\n              <div className=\"flex flex-wrap gap-2\">\n                {COMMON_TECHNOLOGIES.map(tech => (\n                  <button\n                    key={tech}\n                    type=\"button\"\n                    onClick={() => toggleTechnology(tech)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      selectedTechs.includes(tech)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    {tech}\n                  </button>\n                ))}\n              </div>\n            </div>\n            {selectedTechs.length > 0 && (\n              <div className=\"mt-2 flex flex-wrap gap-1\">\n                {selectedTechs.map(tech => (\n                  <span\n                    key={tech}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full\"\n                  >\n                    {tech}\n                  </span>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Image Upload */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              项目图片 *\n            </label>\n            <div className=\"space-y-3\">\n              {newItem.images.length > 0 && (\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {newItem.images.map((image, index) => (\n                    <div key={index} className=\"relative group\">\n                      <img\n                        src={URL.createObjectURL(image)}\n                        alt={`Preview ${index + 1}`}\n                        className=\"w-full h-20 object-cover rounded-lg\"\n                      />\n                      <button\n                        onClick={() => removeImage(index)}\n                        className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n                <input\n                  type=\"file\"\n                  accept=\"image/jpeg,image/png,image/webp\"\n                  multiple\n                  onChange={(e) => handleImageSelect(e.target.files)}\n                  className=\"hidden\"\n                  id=\"portfolio-images\"\n                />\n                <label\n                  htmlFor=\"portfolio-images\"\n                  className=\"cursor-pointer flex flex-col items-center justify-center py-4\"\n                >\n                  <Camera className=\"w-8 h-8 text-gray-400 mb-2\" />\n                  <span className=\"text-sm text-gray-600\">\n                    点击上传项目图片\n                  </span>\n                  <span className=\"text-xs text-gray-500 mt-1\">\n                    最多 10 张，支持 JPG、PNG、WebP，单张不超过 5MB\n                  </span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              onClick={() => {\n                setIsAdding(false);\n                setNewItem({\n                  id: Date.now().toString(),\n                  title: '',\n                  description: '',\n                  projectUrl: '',\n                  technologies: [],\n                  images: [],\n                  completedAt: '',\n                });\n                setSelectedTechs([]);\n              }}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              取消\n            </button>\n            <button\n              onClick={addPortfolioItem}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              添加作品\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add Button */}\n      {!isAdding && (\n        <button\n          onClick={() => setIsAdding(true)}\n          className=\"w-full py-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors flex items-center justify-center\"\n        >\n          <Plus className=\"w-5 h-5 mr-2\" />\n          添加作品集项目\n        </button>\n      )}\n\n      {/* Upload Button */}\n      {portfolioItems.length > 0 && (\n        <div className=\"flex justify-end\">\n          <button\n            onClick={uploadPortfolio}\n            disabled={isUploading}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n          >\n            {isUploading ? '上传中...' : '提交作品集'}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/verification/ProfessionalCertification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4524,4527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4524,4527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Upload, FileText, Plus, X, CheckCircle, AlertCircle } from 'lucide-react';\nimport { verificationService } from '../../services/verification';\nimport { CertificationItem } from '../../types';\n\ninterface ProfessionalCertificationProps {\n  onCertificationsUpdate: (certifications: CertificationItem[]) => void;\n  onVerificationError: (error: string) => void;\n}\n\ninterface CertificationForm {\n  id: string;\n  name: string;\n  issuingOrganization: string;\n  issueDate: string;\n  expiryDate: string;\n  credentialId: string;\n  credentialUrl: string;\n  document?: File;\n}\n\nexport const ProfessionalCertification: React.FC<ProfessionalCertificationProps> = ({\n  onCertificationsUpdate,\n  onVerificationError,\n}) => {\n  const [certifications, setCertifications] = useState<CertificationForm[]>([]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n\n  const [newCertification, setNewCertification] = useState<CertificationForm>({\n    id: Date.now().toString(),\n    name: '',\n    issuingOrganization: '',\n    issueDate: '',\n    expiryDate: '',\n    credentialId: '',\n    credentialUrl: '',\n  });\n\n  const handleInputChange = useCallback((\n    field: keyof CertificationForm,\n    value: string | File\n  ) => {\n    setNewCertification(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  }, []);\n\n  const handleFileSelect = useCallback((file: File) => {\n    const allowedTypes = [\n      'application/pdf',\n      'image/jpeg',\n      'image/png',\n      'image/webp'\n    ];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      onVerificationError('请上传 PDF、JPG、PNG 或 WebP 格式的文件');\n      return;\n    }\n\n    if (file.size > maxSize) {\n      onVerificationError('文件大小不能超过 10MB');\n      return;\n    }\n\n    handleInputChange('document', file);\n  }, [handleInputChange, onVerificationError]);\n\n  const addCertification = useCallback(() => {\n    // Validate required fields\n    if (!newCertification.name.trim()) {\n      onVerificationError('请输入证书名称');\n      return;\n    }\n\n    if (!newCertification.issuingOrganization.trim()) {\n      onVerificationError('请输入颁发机构');\n      return;\n    }\n\n    if (!newCertification.issueDate) {\n      onVerificationError('请选择颁发日期');\n      return;\n    }\n\n    if (!newCertification.document) {\n      onVerificationError('请上传证书文件');\n      return;\n    }\n\n    setCertifications(prev => [...prev, newCertification]);\n    setNewCertification({\n      id: Date.now().toString(),\n      name: '',\n      issuingOrganization: '',\n      issueDate: '',\n      expiryDate: '',\n      credentialId: '',\n      credentialUrl: '',\n    });\n    setIsAdding(false);\n  }, [newCertification, onVerificationError]);\n\n  const removeCertification = useCallback((id: string) => {\n    setCertifications(prev => prev.filter(cert => cert.id !== id));\n  }, []);\n\n  const uploadCertifications = useCallback(async () => {\n    if (certifications.length === 0) {\n      onVerificationError('请至少添加一个专业证书');\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const uploadedCertifications: CertificationItem[] = [];\n\n      for (const cert of certifications) {\n        if (!cert.document) continue;\n\n        // Simulate upload progress\n        for (let progress = 0; progress <= 100; progress += 10) {\n          setUploadProgress(prev => ({ ...prev, [cert.id]: progress }));\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n\n        const documentUrl = await verificationService.uploadDocument(\n          'professional_cert',\n          cert.document,\n          {\n            name: cert.name,\n            issuing_organization: cert.issuingOrganization,\n            issue_date: cert.issueDate,\n            expiry_date: cert.expiryDate,\n            credential_id: cert.credentialId,\n            credential_url: cert.credentialUrl,\n          }\n        );\n\n        uploadedCertifications.push({\n          id: cert.id,\n          name: cert.name,\n          issuingOrganization: cert.issuingOrganization,\n          issueDate: cert.issueDate,\n          expiryDate: cert.expiryDate || undefined,\n          credentialId: cert.credentialId || undefined,\n          credentialUrl: cert.credentialUrl || undefined,\n          document: documentUrl.fileUrl,\n          status: 'pending',\n        });\n      }\n\n      onCertificationsUpdate(uploadedCertifications);\n\n    } catch (error: any) {\n      onVerificationError(error.message || '上传失败，请重试');\n    } finally {\n      setIsUploading(false);\n      setUploadProgress({});\n    }\n  }, [certifications, onCertificationsUpdate, onVerificationError]);\n\n  const CertificationCard: React.FC<{ certification: CertificationForm }> = ({\n    certification,\n  }) => (\n    <div className=\"bg-white border rounded-lg p-4 space-y-3\">\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-gray-900\">{certification.name}</h4>\n          <p className=\"text-sm text-gray-600\">{certification.issuingOrganization}</p>\n        </div>\n        <button\n          onClick={() => removeCertification(certification.id)}\n          className=\"text-red-500 hover:text-red-700\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n        <div>\n          <span className=\"text-gray-500\">颁发日期：</span>\n          <span className=\"text-gray-900\">{certification.issueDate}</span>\n        </div>\n        {certification.expiryDate && (\n          <div>\n            <span className=\"text-gray-500\">到期日期：</span>\n            <span className=\"text-gray-900\">{certification.expiryDate}</span>\n          </div>\n        )}\n        {certification.credentialId && (\n          <div>\n            <span className=\"text-gray-500\">证书编号：</span>\n            <span className=\"text-gray-900\">{certification.credentialId}</span>\n          </div>\n        )}\n      </div>\n\n      {certification.document && (\n        <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n          <FileText className=\"w-4 h-4\" />\n          <span>{certification.document.name}</span>\n        </div>\n      )}\n\n      {uploadProgress[certification.id] !== undefined && (\n        <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n          <div\n            className=\"bg-blue-600 h-1.5 rounded-full transition-all duration-300\"\n            style={{ width: `${uploadProgress[certification.id]}%` }}\n          />\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900\">专业认证说明</h3>\n            <p className=\"mt-1 text-sm text-blue-800\">\n              上传您的专业证书、资格认证或学历证明，这将帮助提高您的可信度和竞争力。\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Existing Certifications */}\n      {certifications.length > 0 && (\n        <div className=\"space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">已添加的证书</h3>\n          <div className=\"grid gap-3\">\n            {certifications.map(cert => (\n              <CertificationCard key={cert.id} certification={cert} />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add New Certification Form */}\n      {isAdding && (\n        <div className=\"bg-white border rounded-lg p-6 space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">添加专业证书</h3>\n\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                证书名称 *\n              </label>\n              <input\n                type=\"text\"\n                value={newCertification.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"例如：PMP项目管理认证\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                颁发机构 *\n              </label>\n              <input\n                type=\"text\"\n                value={newCertification.issuingOrganization}\n                onChange={(e) => handleInputChange('issuingOrganization', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"例如：Project Management Institute\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                颁发日期 *\n              </label>\n              <input\n                type=\"date\"\n                value={newCertification.issueDate}\n                onChange={(e) => handleInputChange('issueDate', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                到期日期\n              </label>\n              <input\n                type=\"date\"\n                value={newCertification.expiryDate}\n                onChange={(e) => handleInputChange('expiryDate', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                证书编号\n              </label>\n              <input\n                type=\"text\"\n                value={newCertification.credentialId}\n                onChange={(e) => handleInputChange('credentialId', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"证书上的唯一编号\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                验证链接\n              </label>\n              <input\n                type=\"url\"\n                value={newCertification.credentialUrl}\n                onChange={(e) => handleInputChange('credentialUrl', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://...\"\n              />\n            </div>\n          </div>\n\n          {/* Document Upload */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              证书文件 *\n            </label>\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n              <input\n                type=\"file\"\n                accept=\".pdf,image/jpeg,image/png,image/webp\"\n                onChange={(e) => e.target.files?.[0] && handleFileSelect(e.target.files[0])}\n                className=\"hidden\"\n                id=\"cert-file\"\n              />\n              <label\n                htmlFor=\"cert-file\"\n                className=\"cursor-pointer flex flex-col items-center justify-center py-4\"\n              >\n                <Upload className=\"w-8 h-8 text-gray-400 mb-2\" />\n                <span className=\"text-sm text-gray-600\">\n                  {newCertification.document ? newCertification.document.name : '点击上传证书文件'}\n                </span>\n                <span className=\"text-xs text-gray-500 mt-1\">\n                  支持 PDF、JPG、PNG、WebP 格式，最大 10MB\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              onClick={() => setIsAdding(false)}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              取消\n            </button>\n            <button\n              onClick={addCertification}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              添加证书\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add Button */}\n      {!isAdding && (\n        <button\n          onClick={() => setIsAdding(true)}\n          className=\"w-full py-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors flex items-center justify-center\"\n        >\n          <Plus className=\"w-5 h-5 mr-2\" />\n          添加专业证书\n        </button>\n      )}\n\n      {/* Upload Button */}\n      {certifications.length > 0 && (\n        <div className=\"flex justify-end\">\n          <button\n            onClick={uploadCertifications}\n            disabled={isUploading}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n          >\n            {isUploading ? '上传中...' : '提交所有证书'}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/components/verification/SkillsVerification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":60,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2326,2329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2326,2329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4416,4419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4416,4419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4984,4987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4984,4987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { CheckCircle, Clock, Star, Award, AlertCircle, Plus, X } from 'lucide-react';\nimport { verificationService } from '../../services/verification';\nimport { SkillItem } from '../../types';\n\ninterface SkillsVerificationProps {\n  onSkillsUpdate: (skills: SkillItem[]) => void;\n  onVerificationError: (error: string) => void;\n}\n\ninterface SkillForm {\n  id: string;\n  name: string;\n  category: string;\n  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  yearsExperience: number;\n  document?: File;\n}\n\nconst SKILL_CATEGORIES = [\n  { id: 'programming', name: '编程开发', icon: '💻' },\n  { id: 'design', name: '设计创意', icon: '🎨' },\n  { id: 'marketing', name: '市场营销', icon: '📈' },\n  { id: 'writing', name: '写作翻译', icon: '✍️' },\n  { id: 'data', name: '数据分析', icon: '📊' },\n  { id: 'management', name: '项目管理', icon: '📋' },\n  { id: 'video', name: '视频制作', icon: '🎬' },\n  { id: 'audio', name: '音频制作', icon: '🎵' },\n  { id: 'consulting', name: '商业咨询', icon: '💼' },\n  { id: 'other', name: '其他技能', icon: '⚡' },\n];\n\nconst LEVEL_DESCRIPTIONS = {\n  beginner: '初学者 - 基础了解，需要指导',\n  intermediate: '中级水平 - 可以独立完成任务',\n  advanced: '高级水平 - 经验丰富，能处理复杂问题',\n  expert: '专家级别 - 行业权威，可以指导他人',\n};\n\nconst COMMON_SKILLS = {\n  programming: ['JavaScript', 'Python', 'Java', 'React', 'Node.js', 'TypeScript', 'PHP', 'C++'],\n  design: ['UI设计', '平面设计', 'Photoshop', 'Figma', '插画', '3D建模', '品牌设计'],\n  marketing: ['SEO', 'SEM', '社交媒体营销', '内容营销', '邮件营销', '品牌营销'],\n  writing: ['文案写作', '技术写作', '翻译', '内容创作', '编辑校对', '博客写作'],\n  data: ['数据分析', 'Excel', 'SQL', 'Tableau', 'Python数据分析', '商业分析'],\n  management: ['项目管理', '敏捷开发', '团队管理', 'Scrum', '产品管理'],\n  video: ['视频剪辑', 'After Effects', 'Premiere Pro', '动画制作', '视频脚本'],\n  audio: ['音频编辑', '播客制作', '声音设计', '音乐制作', '配音'],\n  consulting: ['商业策略', '市场研究', '财务咨询', '技术咨询', '管理咨询'],\n  other: ['客户服务', '虚拟助理', '数据录入', '市场调研', '培训'],\n};\n\nexport const SkillsVerification: React.FC<SkillsVerificationProps> = ({\n  onSkillsUpdate,\n  onVerificationError,\n}) => {\n  const [skills, setSkills] = useState<SkillForm[]>([]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [assessmentResults, setAssessmentResults] = useState<any[]>([]);\n\n  const [newSkill, setNewSkill] = useState<SkillForm>({\n    id: Date.now().toString(),\n    name: '',\n    category: '',\n    level: 'intermediate',\n    yearsExperience: 1,\n  });\n\n  const handleInputChange = useCallback((\n    field: keyof SkillForm,\n    value: string | number | File\n  ) => {\n    setNewSkill(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  }, []);\n\n  const addSkill = useCallback(() => {\n    if (!newSkill.name.trim()) {\n      onVerificationError('请输入技能名称');\n      return;\n    }\n\n    if (!newSkill.category) {\n      onVerificationError('请选择技能分类');\n      return;\n    }\n\n    // Check for duplicates\n    if (skills.some(skill => skill.name.toLowerCase() === newSkill.name.toLowerCase())) {\n      onVerificationError('该技能已存在');\n      return;\n    }\n\n    setSkills(prev => [...prev, newSkill]);\n    setNewSkill({\n      id: Date.now().toString(),\n      name: '',\n      category: '',\n      level: 'intermediate',\n      yearsExperience: 1,\n    });\n    setSelectedCategory('');\n    setIsAdding(false);\n  }, [newSkill, skills, onVerificationError]);\n\n  const removeSkill = useCallback((id: string) => {\n    setSkills(prev => prev.filter(skill => skill.id !== id));\n  }, []);\n\n  const updateSkillLevel = useCallback((id: string, level: SkillForm['level']) => {\n    setSkills(prev => prev.map(skill =>\n      skill.id === id ? { ...skill, level } : skill\n    ));\n  }, []);\n\n  const updateSkillExperience = useCallback((id: string, yearsExperience: number) => {\n    setSkills(prev => prev.map(skill =>\n      skill.id === id ? { ...skill, yearsExperience } : skill\n    ));\n  }, []);\n\n  const assessSkills = useCallback(async () => {\n    if (skills.length === 0) {\n      onVerificationError('请先添加技能');\n      return;\n    }\n\n    try {\n      const assessmentData = skills.map(skill => ({\n        name: skill.name,\n        category: skill.category,\n        level: skill.level,\n        years_experience: skill.yearsExperience,\n      }));\n\n      const results = await verificationService.assessSkills(assessmentData);\n      setAssessmentResults(results);\n    } catch (error: any) {\n      onVerificationError(error.message || '技能评估失败');\n    }\n  }, [skills, onVerificationError]);\n\n  const submitSkills = useCallback(async () => {\n    if (skills.length === 0) {\n      onVerificationError('请至少添加一个技能');\n      return;\n    }\n\n    try {\n      const skillItems: SkillItem[] = skills.map(skill => ({\n        id: skill.id,\n        name: skill.name,\n        category: skill.category,\n        level: skill.level,\n        yearsExperience: skill.yearsExperience,\n        isVerified: false,\n      }));\n\n      onSkillsUpdate(skillItems);\n    } catch (error: any) {\n      onVerificationError(error.message || '提交失败');\n    }\n  }, [skills, onSkillsUpdate, onVerificationError]);\n\n  const getFilteredSkills = useCallback(() => {\n    if (!selectedCategory) return [];\n    return COMMON_SKILLS[selectedCategory as keyof typeof COMMON_SKILLS] || [];\n  }, [selectedCategory]);\n\n  const getLevelIcon = (level: SkillForm['level']) => {\n    switch (level) {\n      case 'beginner': return <Clock className=\"w-4 h-4 text-gray-500\" />;\n      case 'intermediate': return <Star className=\"w-4 h-4 text-blue-500\" />;\n      case 'advanced': return <Award className=\"w-4 h-4 text-purple-500\" />;\n      case 'expert': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n  };\n\n  const SkillCard: React.FC<{ skill: SkillForm }> = ({ skill }) => (\n    <div className=\"bg-white border rounded-lg p-4 space-y-3\">\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2\">\n            {getLevelIcon(skill.level)}\n            <h4 className=\"font-semibold text-gray-900\">{skill.name}</h4>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {SKILL_CATEGORIES.find(cat => cat.id === skill.category)?.name}\n          </p>\n        </div>\n        <button\n          onClick={() => removeSkill(skill.id)}\n          className=\"text-red-500 hover:text-red-700\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div>\n          <label className=\"text-xs text-gray-500 block mb-1\">熟练度</label>\n          <select\n            value={skill.level}\n            onChange={(e) => updateSkillLevel(skill.id, e.target.value as SkillForm['level'])}\n            className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            {Object.entries(LEVEL_DESCRIPTIONS).map(([value, label]) => (\n              <option key={value} value={value}>{label}</option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"text-xs text-gray-500 block mb-1\">经验年限</label>\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"20\"\n              value={skill.yearsExperience}\n              onChange={(e) => updateSkillExperience(skill.id, parseInt(e.target.value))}\n              className=\"flex-1\"\n            />\n            <span className=\"text-sm font-medium text-gray-700 w-12 text-right\">\n              {skill.yearsExperience}年\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {assessmentResults.find(r => r.skill === skill.name) && (\n        <div className=\"bg-green-50 border border-green-200 rounded p-2\">\n          <p className=\"text-xs text-green-800\">\n            ✓ 技能评估匹配度: {assessmentResults.find(r => r.skill === skill.name)?.match_score}%\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-blue-900\">技能验证说明</h3>\n            <p className=\"mt-1 text-sm text-blue-800\">\n              选择您擅长的技能，诚实评估您的熟练程度和经验年限。我们将通过专业评估来验证您的技能水平。\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Skills Grid */}\n      {skills.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">已添加的技能 ({skills.length})</h3>\n            {assessmentResults.length === 0 && (\n              <button\n                onClick={assessSkills}\n                className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n              >\n                评估技能匹配度\n              </button>\n            )}\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {skills.map(skill => (\n              <SkillCard key={skill.id} skill={skill} />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add New Skill Form */}\n      {isAdding && (\n        <div className=\"bg-white border rounded-lg p-6 space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">添加新技能</h3>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              技能分类 *\n            </label>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2\">\n              {SKILL_CATEGORIES.map(category => (\n                <button\n                  key={category.id}\n                  type=\"button\"\n                  onClick={() => {\n                    setSelectedCategory(category.id);\n                    handleInputChange('category', category.id);\n                  }}\n                  className={`p-3 rounded-lg border-2 transition-all ${\n                    selectedCategory === category.id\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"text-2xl mb-1\">{category.icon}</div>\n                  <div className=\"text-sm font-medium\">{category.name}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {selectedCategory && (\n            <>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  技能名称 *\n                </label>\n                <input\n                  type=\"text\"\n                  value={newSkill.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"输入您的技能名称\"\n                />\n\n                {/* Common Skills Suggestions */}\n                {getFilteredSkills().length > 0 && (\n                  <div className=\"mt-2\">\n                    <p className=\"text-xs text-gray-500 mb-1\">常见技能建议：</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {getFilteredSkills()\n                        .filter(skill => skill.toLowerCase().includes(searchTerm.toLowerCase()))\n                        .map(skill => (\n                          <button\n                            key={skill}\n                            type=\"button\"\n                            onClick={() => handleInputChange('name', skill)}\n                            className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full hover:bg-gray-200\"\n                          >\n                            {skill}\n                          </button>\n                        ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    熟练度 *\n                  </label>\n                  <select\n                    value={newSkill.level}\n                    onChange={(e) => handleInputChange('level', e.target.value as SkillForm['level'])}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    {Object.entries(LEVEL_DESCRIPTIONS).map(([value, label]) => (\n                      <option key={value} value={value}>{label.split(' - ')[0]}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    经验年限 *\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    value={newSkill.yearsExperience}\n                    onChange={(e) => handleInputChange('yearsExperience', parseInt(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n              </div>\n            </>\n          )}\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              onClick={() => {\n                setIsAdding(false);\n                setNewSkill({\n                  id: Date.now().toString(),\n                  name: '',\n                  category: '',\n                  level: 'intermediate',\n                  yearsExperience: 1,\n                });\n                setSelectedCategory('');\n              }}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              取消\n            </button>\n            <button\n              onClick={addSkill}\n              disabled={!selectedCategory || !newSkill.name.trim()}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n            >\n              添加技能\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add Skill Button */}\n      {!isAdding && (\n        <button\n          onClick={() => setIsAdding(true)}\n          className=\"w-full py-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors flex items-center justify-center\"\n        >\n          <Plus className=\"w-5 h-5 mr-2\" />\n          添加技能\n        </button>\n      )}\n\n      {/* Assessment Results */}\n      {assessmentResults.length > 0 && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n          <h4 className=\"text-sm font-semibold text-green-900 mb-2\">技能评估结果</h4>\n          <div className=\"space-y-1\">\n            {assessmentResults.map((result, index) => (\n              <div key={index} className=\"flex justify-between text-sm\">\n                <span className=\"text-green-800\">{result.skill}</span>\n                <span className=\"text-green-700 font-medium\">\n                  {result.match_score}% 匹配度\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Submit Button */}\n      {skills.length > 0 && (\n        <div className=\"flex justify-end\">\n          <button\n            onClick={submitSkills}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            提交技能列表\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/hooks/useAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTokens' is assigned a value but never used.","line":30,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearTokens' is assigned a value but never used.","line":32,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":16}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuthStore } from '@/store/authStore';\nimport { User, LoginCredentials, RegisterData, SocialAuthData } from '@/types';\nimport { ROUTES } from '@/constants';\n\n// Main authentication hook\nexport function useAuth() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const {\n    // State\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    refreshToken,\n    error,\n    socialLoginLoading,\n    loginForm,\n    registerForm,\n    forgotPasswordEmail,\n    resetPasswordToken,\n\n    // Actions\n    login,\n    register,\n    logout,\n    setTokens,\n    refreshAccessToken,\n    clearTokens,\n    socialLogin,\n    setUser,\n    updateUser,\n    updateLoginForm,\n    updateRegisterForm,\n    resetForms,\n    requestPasswordReset,\n    resetPassword,\n    setError,\n    clearError,\n    setLoading,\n    setSocialLoginLoading,\n    initializeAuth,\n    checkAuthStatus,\n  } = useAuthStore();\n\n  // Initialize auth on mount\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n\n  // Auto-refresh token periodically\n  useEffect(() => {\n    if (!accessToken || !refreshToken) return;\n\n    const refreshInterval = setInterval(() => {\n      refreshAccessToken();\n    }, 14 * 60 * 1000); // Refresh every 14 minutes (token expires in 15 minutes)\n\n    return () => clearInterval(refreshInterval);\n  }, [accessToken, refreshToken, refreshAccessToken]);\n\n  // Redirect logic\n  const requireAuth = useCallback((redirectTo = ROUTES.LOGIN) => {\n    if (!isAuthenticated && !isLoading) {\n      navigate(redirectTo, { state: { from: location } });\n      return false;\n    }\n    return true;\n  }, [isAuthenticated, isLoading, navigate, location]);\n\n  const requireGuest = useCallback((redirectTo = ROUTES.DASHBOARD) => {\n    if (isAuthenticated && !isLoading) {\n      navigate(redirectTo);\n      return false;\n    }\n    return true;\n  }, [isAuthenticated, isLoading, navigate]);\n\n  const requireRole = useCallback((requiredRole: 'client' | 'freelancer' | 'admin') => {\n    if (!isAuthenticated) {\n      navigate(ROUTES.LOGIN, { state: { from: location } });\n      return false;\n    }\n\n    if (user?.userType !== requiredRole && user?.userType !== 'admin') {\n      navigate(ROUTES.DASHBOARD);\n      return false;\n    }\n\n    return true;\n  }, [isAuthenticated, user, navigate, location]);\n\n  // Check if user has specific permissions\n  const hasPermission = useCallback((permission: string) => {\n    if (!user) return false;\n    if (user.userType === 'admin') return true;\n\n    switch (permission) {\n      case 'create_service':\n        return user.userType === 'freelancer';\n      case 'manage_orders':\n        return true; // Both clients and freelancers can manage orders\n      case 'view_analytics':\n        return user.userType === 'freelancer';\n      case 'manage_users':\n        return user.userType === 'admin';\n      case 'access_admin_panel':\n        return user.userType === 'admin';\n      default:\n        return false;\n    }\n  }, [user]);\n\n  // Get display name\n  const getDisplayName = useCallback(() => {\n    if (!user) return '';\n    return user.profile?.displayName || `${user.firstName} ${user.lastName}`;\n  }, [user]);\n\n  // Get avatar URL\n  const getAvatarUrl = useCallback(() => {\n    if (!user) return '';\n    return user.profile?.avatar || user.avatar || '';\n  }, [user]);\n\n  // Check if profile is complete\n  const isProfileComplete = useCallback(() => {\n    if (!user) return false;\n    const profile = user.profile;\n    return !!(\n      profile?.displayName &&\n      profile?.bio &&\n      profile?.skills &&\n      profile?.skills.length > 0\n    );\n  }, [user]);\n\n  // Memoized login function with error handling\n  const handleLogin = useCallback(async (credentials: LoginCredentials) => {\n    try {\n      await login(credentials);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '登录失败'\n      };\n    }\n  }, [login]);\n\n  // Memoized register function with error handling\n  const handleRegister = useCallback(async (data: RegisterData) => {\n    try {\n      await register(data);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '注册失败'\n      };\n    }\n  }, [register]);\n\n  // Memoized social login function\n  const handleSocialLogin = useCallback(async (provider: 'wechat' | 'qq' | 'alipay', data: SocialAuthData) => {\n    try {\n      await socialLogin(provider, data);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : `${provider}登录失败`\n      };\n    }\n  }, [socialLogin]);\n\n  // Memoized password reset request\n  const handlePasswordResetRequest = useCallback(async (email: string) => {\n    try {\n      await requestPasswordReset(email);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '发送重置邮件失败'\n      };\n    }\n  }, [requestPasswordReset]);\n\n  // Memoized password reset confirmation\n  const handlePasswordReset = useCallback(async (token: string, newPassword: string) => {\n    try {\n      await resetPassword(token, newPassword);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '密码重置失败'\n      };\n    }\n  }, [resetPassword]);\n\n  // Memoized logout function\n  const handleLogout = useCallback(() => {\n    logout();\n  }, [logout]);\n\n  // Memoized auth status check\n  const checkAuth = useCallback(async () => {\n    return await checkAuthStatus();\n  }, [checkAuthStatus]);\n\n  // Computed properties\n  const isClient = user?.userType === 'client';\n  const isFreelancer = user?.userType === 'freelancer';\n  const isAdmin = user?.userType === 'admin';\n  const isVerified = user?.isVerified || false;\n  const isActive = user?.isActive || false;\n\n  return {\n    // State\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    refreshToken,\n    error,\n    socialLoginLoading,\n    loginForm,\n    registerForm,\n    forgotPasswordEmail,\n    resetPasswordToken,\n\n    // Computed properties\n    isClient,\n    isFreelancer,\n    isAdmin,\n    isVerified,\n    isActive,\n\n    // Actions\n    login: handleLogin,\n    register: handleRegister,\n    socialLogin: handleSocialLogin,\n    logout: handleLogout,\n    passwordResetRequest: handlePasswordResetRequest,\n    resetPassword: handlePasswordReset,\n\n    // Form actions\n    updateLoginForm,\n    updateRegisterForm,\n    resetForms,\n\n    // User management\n    setUser,\n    updateUser,\n\n    // Error handling\n    setError,\n    clearError,\n\n    // Loading control\n    setLoading,\n    setSocialLoginLoading,\n\n    // Auth utilities\n    checkAuth,\n    refreshAccessToken,\n    requireAuth,\n    requireGuest,\n    requireRole,\n    hasPermission,\n    getDisplayName,\n    getAvatarUrl,\n    isProfileComplete,\n  };\n}\n\n// Hook for authentication guards\nexport const useAuthGuard = () => {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  return {\n    canAccess: isAuthenticated && !isLoading,\n    isLoading,\n    user,\n    requireAuth: () => {\n      if (!isAuthenticated && !isLoading) {\n        window.location.href = '/login';\n      }\n    },\n    requireRole: (requiredRole: 'client' | 'freelancer' | 'admin') => {\n      if (!isAuthenticated || !user) return false;\n      return user.userType === requiredRole;\n    },\n    requireVerification: () => {\n      return isAuthenticated && user?.isVerified;\n    },\n    requireActive: () => {\n      return isAuthenticated && user?.isActive;\n    },\n  };\n}\n\n// Hook for social login state management\nexport const useSocialLogin = () => {\n  const { socialLoginLoading, setSocialLoginLoading, socialLogin } = useAuth();\n\n  const initiateSocialLogin = useCallback(async (provider: 'wechat' | 'qq' | 'alipay') => {\n    setSocialLoginLoading(provider, true);\n\n    // For OAuth providers, redirect to the provider's authorization URL\n    const authUrls = {\n      wechat: '/api/auth/wechat/',\n      qq: '/api/auth/qq/',\n      alipay: '/api/auth/alipay/',\n    };\n\n    try {\n      // Store the current URL for redirect after login\n      sessionStorage.setItem('auth_redirect_url', window.location.pathname);\n\n      // Redirect to the provider's authorization endpoint\n      window.location.href = authUrls[provider];\n    } catch (error) {\n      setSocialLoginLoading(provider, false);\n      console.error(`${provider} login failed:`, error);\n    }\n  }, [setSocialLoginLoading]);\n\n  const handleSocialCallback = useCallback(async (provider: 'wechat' | 'qq' | 'alipay', data: SocialAuthData) => {\n    try {\n      await socialLogin(provider, data);\n\n      // Redirect to stored URL or dashboard\n      const redirectUrl = sessionStorage.getItem('auth_redirect_url') || '/dashboard';\n      sessionStorage.removeItem('auth_redirect_url');\n      window.location.href = redirectUrl;\n    } catch (error) {\n      console.error(`${provider} callback failed:`, error);\n    }\n  }, [socialLogin]);\n\n  return {\n    socialLoginLoading,\n    initiateSocialLogin,\n    handleSocialCallback,\n  };\n}\n\n// Hook for form validation\nexport const useAuthFormValidation = () => {\n  const { loginForm, registerForm, updateLoginForm, updateRegisterForm } = useAuthStore();\n\n  const validateEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const validatePassword = (password: string): { isValid: boolean; strength: 'weak' | 'medium' | 'strong' } => {\n    if (password.length < 8) {\n      return { isValid: false, strength: 'weak' };\n    }\n\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (/[a-z]/.test(password) && /[A-Z]/.test(password)) score++;\n    if (/\\d/.test(password)) score++;\n    if (/[^a-zA-Z\\d]/.test(password)) score++;\n\n    if (score <= 2) return { isValid: true, strength: 'weak' };\n    if (score <= 4) return { isValid: true, strength: 'medium' };\n    return { isValid: true, strength: 'strong' };\n  };\n\n  const validateLoginForm = (): { isValid: boolean; errors: Record<string, string> } => {\n    const errors: Record<string, string> = {};\n\n    if (!loginForm.email) {\n      errors.email = '请输入邮箱地址';\n    } else if (!validateEmail(loginForm.email)) {\n      errors.email = '请输入有效的邮箱地址';\n    }\n\n    if (!loginForm.password) {\n      errors.password = '请输入密码';\n    } else if (loginForm.password.length < 8) {\n      errors.password = '密码至少需要8个字符';\n    }\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors,\n    };\n  };\n\n  const validateRegisterForm = (): { isValid: boolean; errors: Record<string, string> } => {\n    const errors: Record<string, string> = {};\n\n    // Email validation\n    if (!registerForm.email) {\n      errors.email = '请输入邮箱地址';\n    } else if (!validateEmail(registerForm.email)) {\n      errors.email = '请输入有效的邮箱地址';\n    }\n\n    // Password validation\n    if (!registerForm.password) {\n      errors.password = '请输入密码';\n    } else {\n      const passwordValidation = validatePassword(registerForm.password);\n      if (!passwordValidation.isValid) {\n        errors.password = '密码至少需要8个字符';\n      }\n    }\n\n    // Confirm password validation\n    if (!registerForm.confirmPassword) {\n      errors.confirmPassword = '请确认密码';\n    } else if (registerForm.password !== registerForm.confirmPassword) {\n      errors.confirmPassword = '两次输入的密码不一致';\n    }\n\n    // Username validation\n    if (!registerForm.username) {\n      errors.username = '请输入用户名';\n    } else if (registerForm.username.length < 3) {\n      errors.username = '用户名至少需要3个字符';\n    } else if (!/^[a-zA-Z0-9_]+$/.test(registerForm.username)) {\n      errors.username = '用户名只能包含字母、数字和下划线';\n    }\n\n    // Name validation\n    if (!registerForm.firstName) {\n      errors.firstName = '请输入姓氏';\n    }\n\n    if (!registerForm.lastName) {\n      errors.lastName = '请输入名字';\n    }\n\n    // Terms validation\n    if (!registerForm.agreeToTerms) {\n      errors.agreeToTerms = '请同意服务条款和隐私政策';\n    }\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors,\n    };\n  };\n\n  return {\n    validateEmail,\n    validatePassword,\n    validateLoginForm,\n    validateRegisterForm,\n    loginForm,\n    registerForm,\n    updateLoginForm,\n    updateRegisterForm,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/hooks/useLocalStorage.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'readValue'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [readValue]","fix":{"range":[1911,1913],"text":"[readValue]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((val: T) => T)) => void, () => void] {\n  // Get from local storage then parse stored json or return initialValue\n  const readValue = (): T => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  };\n\n  // State to store our value\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Remove the item from storage\n  const removeValue = () => {\n    try {\n      if (typeof window !== 'undefined') {\n        window.localStorage.removeItem(key);\n      }\n      setStoredValue(initialValue);\n    } catch (error) {\n      console.warn(`Error removing localStorage key \"${key}\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    };\n\n    // this only works for other documents, not the current one\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  return [storedValue, setValue, removeValue];\n}","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/i18n/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1460,1463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1460,1463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// 导入中文翻译文件\nimport zhCN from '../locales/zh-CN.json';\n\n// 定义翻译资源的类型\nexport type TranslationResources = typeof zhCN;\n\n// 初始化 i18next\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: {\n      'zh-CN': {\n        translation: zhCN,\n      },\n    },\n    lng: 'zh-CN',\n    fallbackLng: 'zh-CN',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\n// 导出 i18n 实例\nexport default i18n;\n\n// 创建类型安全的翻译 hook\nexport const useTypedTranslation = () => {\n  const { t } = i18n;\n\n  return {\n    t: (key: string, options?: any) => t(key, options),\n    i18n,\n  };\n};\n\n// 翻译函数工具\nexport const translate = (key: string, options?: any): string => {\n  return i18n.t(key, options);\n};\n\n// 格式化数字\nexport const formatNumber = (num: number): string => {\n  return new Intl.NumberFormat('zh-CN').format(num);\n};\n\n// 格式化货币\nexport const formatCurrency = (amount: number, currency: string = 'CNY'): string => {\n  return new Intl.NumberFormat('zh-CN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n};\n\n// 格式化日期\nexport const formatDate = (date: string | Date): string => {\n  return new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  }).format(typeof date === 'string' ? new Date(date) : date);\n};\n\n// 创建React Context Provider\nimport { createContext, useContext, ReactNode } from 'react';\n\ninterface I18nContextType {\n  t: (key: string, options?: any) => string;\n  formatNumber: (num: number) => string;\n  formatCurrency: (amount: number, currency?: string) => string;\n  formatDate: (date: string | Date) => string;\n}\n\nconst I18nContext = createContext<I18nContextType | undefined>(undefined);\n\nexport const I18nProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { t } = useTypedTranslation();\n\n  const value: I18nContextType = {\n    t,\n    formatNumber,\n    formatCurrency,\n    formatDate,\n  };\n\n  return React.createElement(I18nContext.Provider, { value }, children);\n};\n\nexport const useI18n = (): I18nContextType => {\n  const context = useContext(I18nContext);\n  if (!context) {\n    throw new Error('useI18n must be used within an I18nProvider');\n  }\n  return context;\n};\n\n// 导出默认类型\nexport type { TranslationResources };","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/DesignDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Rate' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":2,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserOutlined' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StarOutlined' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShoppingCartOutlined' is defined but never used.","line":3,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HeartOutlined' is defined but never used.","line":3,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOutlined' is defined but never used.","line":3,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":86},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rating' is assigned a value but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRating' is assigned a value but never used.","line":10,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sampleServices' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2118,2121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2118,2121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Rate, Avatar, Badge, Tag, Form as AntdForm, Input as AntdInput, Select as AntdSelect } from 'antd';\nimport { UserOutlined, StarOutlined, ShoppingCartOutlined, HeartOutlined, EyeOutlined } from '@ant-design/icons';\nimport Button from '../components/ui/Button';\nimport Card from '../components/ui/Card';\nimport { ThemeToggle } from '../theme/ThemeProvider';\n\n// Design Demo Page\nconst DesignDemo: React.FC = () => {\n  const [rating, setRating] = useState(4);\n  const [form] = AntdForm.useForm();\n\n  // Service options for demo\n  const serviceOptions = [\n    { label: '网页设计与开发', value: 'web-design' },\n    { label: '移动应用开发', value: 'mobile-app' },\n    { label: 'UI/UX 设计', value: 'ui-ux' },\n    { label: '品牌设计', value: 'brand-design' },\n    { label: '内容创作', value: 'content' },\n    { label: '数字营销', value: 'marketing' },\n  ];\n\n  // Sample services data\n  const sampleServices = [\n    {\n      id: 1,\n      title: '专业网页设计',\n      provider: '设计工作室',\n      price: '¥2,999',\n      originalPrice: '¥4,999',\n      rating: 4.8,\n      reviews: 128,\n      category: '网页设计',\n      image: '/api/placeholder/300/200',\n      description: '专业的响应式网页设计，适配各种设备，提供现代化用户体验。',\n    },\n    {\n      id: 2,\n      title: '移动应用开发',\n      provider: '开发团队',\n      price: '¥15,999',\n      originalPrice: '¥25,999',\n      rating: 4.9,\n      reviews: 89,\n      category: '应用开发',\n      image: '/api/placeholder/300/200',\n      description: 'iOS和Android原生应用开发，提供完整的技术解决方案。',\n    },\n    {\n      id: 3,\n      title: '品牌视觉设计',\n      provider: '创意设计师',\n      price: '¥3,999',\n      originalPrice: null,\n      rating: 4.7,\n      reviews: 256,\n      category: '品牌设计',\n      image: '/api/placeholder/300/200',\n      description: '包括Logo设计、VI系统、宣传物料等完整品牌视觉方案。',\n    },\n    {\n      id: 4,\n      title: '内容营销策划',\n      provider: '营销专家',\n      price: '¥5,999',\n      originalPrice: '¥8,999',\n      rating: 4.6,\n      reviews: 67,\n      category: '数字营销',\n      image: '/api/placeholder/300/200',\n      description: '社交媒体内容策划、文案撰写、营销策略制定。',\n    },\n  ];\n\n  // Handle form submission\n  const handleFormSubmit = (values: any) => {\n    console.log('表单提交:', values);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\n      {/* Header */}\n      <div className=\"container mx-auto px-4 mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-2 text-chinese\">\n              中文设计系统演示\n            </h1>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400 text-chinese\">\n              展示为中文用户优化的界面设计和组件系统\n            </p>\n          </div>\n          <ThemeToggle showLabel />\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 mb-12\">\n        <Card variant=\"shadow\" className=\"text-center py-12\">\n          <Card.Body>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4 text-chinese\">\n              专业的中文自由职业平台\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-8 text-chinese-loose\">\n              连接优秀的中文服务提供者和企业，提供高质量的本地化服务体验\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button variant=\"primary\" size=\"lg\">\n                开始寻找服务\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                成为服务提供者\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n\n      {/* Button Showcase */}\n      <div className=\"container mx-auto px-4 mb-12\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6 text-chinese\">\n          按钮组件展示\n        </h2>\n        <Card>\n          <Card.Body>\n            <div className=\"space-y-6\">\n              {/* Button Variants */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4 text-chinese\">\n                  按钮变体\n                </h3>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button variant=\"primary\">主要按钮</Button>\n                  <Button variant=\"secondary\">次要按钮</Button>\n                  <Button variant=\"outline\">轮廓按钮</Button>\n                  <Button variant=\"ghost\">幽灵按钮</Button>\n                  <Button variant=\"danger\">危险按钮</Button>\n                  <Button variant=\"success\">成功按钮</Button>\n                </div>\n              </div>\n\n              {/* Button Sizes */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4 text-chinese\">\n                  按钮尺寸\n                </h3>\n                <div className=\"flex flex-wrap items-center gap-3\">\n                  <Button size=\"sm\">小按钮</Button>\n                  <Button size=\"md\">中等按钮</Button>\n                  <Button size=\"lg\">大按钮</Button>\n                </div>\n              </div>\n\n              {/* Button with Icons */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4 text-chinese\">\n                  带图标的按钮\n                </h3>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button variant=\"primary\">收藏服务</Button>\n                  <Button variant=\"outline\">查看详情</Button>\n                  <Button variant=\"ghost\">喜欢</Button>\n                </div>\n              </div>\n\n              {/* Button States */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4 text-chinese\">\n                  按钮状态\n                </h3>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button loading>加载中...</Button>\n                  <Button disabled>禁用状态</Button>\n                  <Button loading>提交表单</Button>\n                </div>\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n\n      {/* Form Showcase */}\n      <div className=\"container mx-auto px-4 mb-12\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6 text-chinese\">\n          表单组件展示\n        </h2>\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Registration Form */}\n          <Card>\n            <Card.Header title=\"用户注册表单\" />\n            <Card.Body>\n              <AntdForm\n                form={form}\n                layout=\"vertical\"\n                onFinish={handleFormSubmit}\n                className=\"text-chinese\"\n              >\n                <AntdForm.Item\n                  name=\"username\"\n                  label=\"用户名\"\n                  rules={[{ required: true, message: '请输入用户名' }]}\n                >\n                  <AntdInput placeholder=\"请输入用户名\" className=\"h-11\" />\n                </AntdForm.Item>\n\n                <AntdForm.Item\n                  name=\"email\"\n                  label=\"电子邮箱\"\n                  rules={[{ required: true, message: '请输入电子邮箱' }]}\n                >\n                  <AntdInput type=\"email\" placeholder=\"example@email.com\" className=\"h-11\" />\n                </AntdForm.Item>\n\n                <AntdForm.Item name=\"phone\" label=\"手机号码\">\n                  <AntdInput type=\"tel\" placeholder=\"请输入手机号\" className=\"h-11\" />\n                </AntdForm.Item>\n\n                <AntdForm.Item name=\"service\" label=\"感兴趣的服务\">\n                  <AntdSelect\n                    placeholder=\"请选择服务类型\"\n                    options={serviceOptions}\n                    showSearch\n                    className=\"w-full\"\n                  />\n                </AntdForm.Item>\n\n                <AntdForm.Item name=\"bio\" label=\"个人简介\">\n                  <AntdInput.TextArea\n                    rows={4}\n                    placeholder=\"请简单介绍一下自己...\"\n                    showCount\n                    maxLength={200}\n                  />\n                </AntdForm.Item>\n\n                <div className=\"flex gap-3\">\n                  <Button variant=\"primary\" type=\"submit\">\n                    立即注册\n                  </Button>\n                  <Button variant=\"outline\" type=\"reset\">\n                    重置表单\n                  </Button>\n                </div>\n              </AntdForm>\n            </Card.Body>\n          </Card>\n\n          {/* Service Request Form */}\n          <Card>\n            <Card.Header title=\"服务需求表单\" />\n            <Card.Body>\n              <AntdForm\n                layout=\"vertical\"\n                onFinish={handleFormSubmit}\n                className=\"text-chinese\"\n              >\n                <AntdForm.Item\n                  name=\"title\"\n                  label=\"项目标题\"\n                  rules={[{ required: true, message: '请输入项目标题' }]}\n                >\n                  <AntdInput placeholder=\"请描述您的项目需求\" className=\"h-11\" />\n                </AntdForm.Item>\n\n                <AntdForm.Item\n                  name=\"category\"\n                  label=\"服务类别\"\n                  rules={[{ required: true, message: '请选择服务类别' }]}\n                >\n                  <AntdSelect\n                    placeholder=\"选择服务类别\"\n                    options={serviceOptions}\n                    className=\"w-full\"\n                  />\n                </AntdForm.Item>\n\n                <AntdForm.Item name=\"budget\" label=\"预算范围\">\n                  <AntdSelect\n                    placeholder=\"选择预算范围\"\n                    options={[\n                      { label: '¥1,000 - ¥5,000', value: '1k-5k' },\n                      { label: '¥5,000 - ¥10,000', value: '5k-10k' },\n                      { label: '¥10,000 - ¥20,000', value: '10k-20k' },\n                      { label: '¥20,000+', value: '20k+' },\n                    ]}\n                    className=\"w-full\"\n                  />\n                </AntdForm.Item>\n\n                <AntdForm.Item name=\"requirements\" label=\"详细需求\">\n                  <AntdInput.TextArea\n                    rows={6}\n                    placeholder=\"请详细描述您的项目需求...\"\n                    showCount\n                    maxLength={500}\n                  />\n                </AntdForm.Item>\n\n                <div className=\"flex gap-3\">\n                  <Button variant=\"primary\" type=\"submit\">\n                    提交需求\n                  </Button>\n                  <Button variant=\"outline\" type=\"reset\">\n                    重置\n                  </Button>\n                </div>\n              </AntdForm>\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-100 dark:bg-gray-800 mt-16 py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <p className=\"text-gray-600 dark:text-gray-400 text-chinese\">\n            © 2024 中文自由职业平台 - 专为中文用户设计的本地化服务\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default DesignDemo;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/HomePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":11,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCategoryClick' is assigned a value but never used.","line":78,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport { SearchBar, FeaturedServices, TopSellers, CategoryCard } from '@/components/services';\nimport { Category } from '@/types';\nimport { cn } from '@/utils';\n\nexport const HomePage: React.FC = () => {\n  const navigate = useNavigate();\n  const { t, formatCurrency, formatNumber } = useI18n();\n  const { categories, fetchCategories, searchServices } = useServicesStore();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [email, setEmail] = useState('');\n\n  // Mock statistics\n  const stats = {\n    totalServices: 12580,\n    totalSellers: 3240,\n    totalOrders: 45680,\n    totalRevenue: 12850000,\n  };\n\n  // Mock testimonials\n  const testimonials = [\n    {\n      id: 1,\n      name: '张先生',\n      role: '创业公司CEO',\n      avatar: '/images/avatars/testimonial1.jpg',\n      content: '通过技能集市，我们找到了优秀的UI设计师，设计质量超出预期，交付速度很快。',\n      rating: 5,\n      service: 'UI/UX设计'\n    },\n    {\n      id: 2,\n      name: '李女士',\n      role: '市场营销经理',\n      avatar: '/images/avatars/testimonial2.jpg',\n      content: '这里的内容写作者非常专业，完全理解我们的需求，文章质量很高。',\n      rating: 5,\n      service: '内容写作'\n    },\n    {\n      id: 3,\n      name: '王先生',\n      role: '电商店主',\n      avatar: '/images/avatars/testimonial3.jpg',\n      content: '开发团队技术过硬，沟通顺畅，项目按时完成，价格合理。',\n      rating: 5,\n      service: '网站开发'\n    }\n  ];\n\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n      try {\n        await Promise.all([\n          fetchCategories(),\n        ]);\n      } catch (error) {\n        console.error('Failed to load homepage data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, [fetchCategories]);\n\n  const handleSearch = (query: string) => {\n    searchServices(query);\n    navigate('/services');\n  };\n\n  const handleCategoryClick = (category: Category) => {\n    navigate(`/categories/${category.slug}`);\n  };\n\n  const handleBrowseServices = () => {\n    navigate('/services');\n  };\n\n  const handleBecomeSeller = () => {\n    navigate('/become-seller');\n  };\n\n  const handleNewsletterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n    // Handle newsletter subscription\n    console.log('Newsletter subscription:', email);\n    setEmail('');\n    // Show success message\n  };\n\n  return (\n    <div className=\"space-y-16\">\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-blue-600 via-indigo-600 to-purple-700 text-white overflow-hidden\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute inset-0 bg-repeat\" style={{\n            backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`,\n          }}></div>\n        </div>\n\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 lg:py-32\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              发现专业人才\n              <span className=\"block text-yellow-300\">实现创意梦想</span>\n            </h1>\n            <p className=\"text-xl sm:text-2xl mb-8 text-blue-100 max-w-3xl mx-auto\">\n              连接千万级优秀技能服务提供者，为您提供设计、开发、营销、写作等全方位专业服务\n            </p>\n\n            {/* Search Bar */}\n            <div className=\"max-w-3xl mx-auto mb-8\">\n              <SearchBar\n                placeholder=\"搜索您需要的服务...\"\n                onSearch={handleSearch}\n                size=\"large\"\n                className=\"mb-4\"\n              />\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6\">\n              <button\n                onClick={handleBrowseServices}\n                className=\"px-8 py-4 bg-white text-blue-600 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-200 transform hover:scale-105 shadow-lg\"\n              >\n                浏览服务\n              </button>\n              <button\n                onClick={handleBecomeSeller}\n                className=\"px-8 py-4 bg-transparent border-2 border-white text-white rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-all duration-200 transform hover:scale-105\"\n              >\n                成为服务提供者\n              </button>\n            </div>\n\n            {/* Popular Searches */}\n            <div className=\"mt-8 text-sm text-blue-100\">\n              热门搜索:\n              <button className=\"ml-2 text-yellow-300 hover:text-white underline\">\n                logo设计\n              </button>\n              <span className=\"mx-2\">•</span>\n              <button className=\"ml-2 text-yellow-300 hover:text-white underline\">\n                网站开发\n              </button>\n              <span className=\"mx-2\">•</span>\n              <button className=\"ml-2 text-yellow-300 hover:text-white underline\">\n                内容写作\n              </button>\n              <span className=\"mx-2\">•</span>\n              <button className=\"ml-2 text-yellow-300 hover:text-white underline\">\n                视频剪辑\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Wave SVG */}\n        <div className=\"absolute bottom-0 left-0 right-0\">\n          <svg className=\"w-full h-20 text-gray-50\" fill=\"currentColor\" viewBox=\"0 0 1440 120\">\n            <path d=\"M0,64L80,69.3C160,75,320,85,480,80C640,75,800,53,960,48C1120,43,1280,53,1360,58.7L1440,64L1440,120L1360,120C1280,120,1120,120,960,120C800,120,640,120,480,120C320,120,160,120,80,120L0,120Z\"></path>\n          </svg>\n        </div>\n      </section>\n\n      {/* Statistics Section */}\n      <section className=\"bg-gray-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-blue-600 mb-2\">\n                {formatNumber(stats.totalServices)}+\n              </div>\n              <div className=\"text-gray-600\">优质服务</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-green-600 mb-2\">\n                {formatNumber(stats.totalSellers)}+\n              </div>\n              <div className=\"text-gray-600\">专业卖家</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-purple-600 mb-2\">\n                {formatNumber(stats.totalOrders)}+\n              </div>\n              <div className=\"text-gray-600\">成功订单</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-orange-600 mb-2\">\n                ¥{formatNumber(Math.floor(stats.totalRevenue / 10000))}万+\n              </div>\n              <div className=\"text-gray-600\">交易金额</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Categories Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              热门服务分类\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              涵盖设计、开发、营销、写作等多个领域，满足您的各种需求\n            </p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-white rounded-lg p-4 text-center\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-full mx-auto mb-3\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6\">\n              {categories.slice(0, 12).map((category) => (\n                <CategoryCard\n                  key={category.id}\n                  category={category}\n                  size=\"medium\"\n                />\n              ))}\n            </div>\n          )}\n\n          {/* View All Categories */}\n          <div className=\"text-center mt-12\">\n            <button\n              onClick={() => navigate('/categories')}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium\"\n            >\n              查看所有分类\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Services */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <FeaturedServices\n            title=\"推荐服务\"\n            limit={8}\n          />\n        </div>\n      </section>\n\n      {/* Top Sellers */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <TopSellers\n            title=\"顶级卖家\"\n            limit={8}\n          />\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-50 to-indigo-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              如何使用技能集市\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              简单四步，轻松获得专业服务\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {[\n              {\n                step: 1,\n                title: '发布需求',\n                description: '详细描述您的项目需求，设定预算和时间要求',\n                icon: 'M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'\n              },\n              {\n                step: 2,\n                title: '选择卖家',\n                description: '浏览卖家资料和评价，选择最适合的服务提供者',\n                icon: 'M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z'\n              },\n              {\n                step: 3,\n                title: '协作沟通',\n                description: '与卖家保持沟通，跟踪项目进度，确保质量符合预期',\n                icon: 'M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z'\n              },\n              {\n                step: 4,\n                title: '完成交易',\n                description: '确认收到满意的服务后完成付款，并给予评价',\n                icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'\n              }\n            ].map((item, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"relative w-16 h-16 bg-blue-600 text-white rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"absolute -top-2 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">\n                    {item.step}\n                  </span>\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={item.icon} />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  {item.title}\n                </h3>\n                <p className=\"text-gray-600 text-sm\">\n                  {item.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              客户评价\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              听听他们怎么说\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial) => (\n              <div key={testimonial.id} className=\"bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-300\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-gray-300 rounded-full mr-4 overflow-hidden\">\n                    {testimonial.avatar ? (\n                      <img src={testimonial.avatar} alt={testimonial.name} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <div className=\"w-full h-full bg-gradient-to-br from-blue-400 to-indigo-600 flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">\n                          {testimonial.name[0]}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">{testimonial.name}</h4>\n                    <p className=\"text-sm text-gray-600\">{testimonial.role}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <svg\n                      key={i}\n                      className={cn(\n                        'w-4 h-4',\n                        i < testimonial.rating ? 'text-yellow-400 fill-current' : 'text-gray-300 fill-current'\n                      )}\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\n                    </svg>\n                  ))}\n                </div>\n\n                <p className=\"text-gray-700 mb-3 italic\">\n                  \"{testimonial.content}\"\n                </p>\n\n                <div className=\"text-sm text-gray-500\">\n                  服务类型: {testimonial.service}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-16 bg-gradient-to-r from-purple-600 to-indigo-600 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">\n            订阅我们的资讯\n          </h2>\n          <p className=\"text-xl mb-8 text-purple-100\">\n            获取最新服务推荐、专业技巧和独家优惠\n          </p>\n\n          <form onSubmit={handleNewsletterSubmit} className=\"flex flex-col sm:flex-row max-w-md mx-auto space-y-4 sm:space-y-0 sm:space-x-4\">\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"输入您的邮箱\"\n              className=\"flex-1 px-4 py-3 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-yellow-400\"\n              required\n            />\n            <button\n              type=\"submit\"\n              className=\"px-6 py-3 bg-yellow-400 text-gray-900 rounded-lg font-semibold hover:bg-yellow-300 transition-colors duration-200\"\n            >\n              订阅\n            </button>\n          </form>\n\n          <p className=\"text-sm text-purple-200 mt-4\">\n            我们尊重您的隐私，随时可以取消订阅\n          </p>\n        </div>\n      </section>\n\n      {/* Mobile App Promotion */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-6\">\n                随时随地管理您的项目\n              </h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                下载我们的移动应用，随时随地与卖家沟通、跟踪项目进度、管理订单，让协作更加便捷高效。\n              </p>\n\n              <div className=\"space-y-4 mb-8\">\n                <div className=\"flex items-center space-x-3\">\n                  <svg className=\"w-6 h-6 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <span className=\"text-gray-700\">实时消息通知</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <svg className=\"w-6 h-6 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <span className=\"text-gray-700\">文件上传和分享</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <svg className=\"w-6 h-6 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <span className=\"text-gray-700\">安全的支付系统</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <svg className=\"w-6 h-6 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <span className=\"text-gray-700\">订单管理</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4\">\n                <button className=\"flex items-center justify-center px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200\">\n                  <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                  </svg>\n                  App Store\n                </button>\n                <button className=\"flex items-center justify-center px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200\">\n                  <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.61 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\" />\n                  </svg>\n                  Google Play\n                </button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-100 to-indigo-200 rounded-2xl p-8 text-center\">\n                <div className=\"w-32 h-32 mx-auto mb-4 bg-white rounded-2xl shadow-lg flex items-center justify-center\">\n                  <svg className=\"w-16 h-16 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n                <div className=\"text-lg font-semibold text-gray-800 mb-2\">\n                  技能集市 App\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  下载体验移动端便捷服务\n                </div>\n              </div>\n\n              {/* Floating Elements */}\n              <div className=\"absolute -top-4 -left-4 w-20 h-20 bg-yellow-400 rounded-full opacity-80 animate-pulse\"></div>\n              <div className=\"absolute -bottom-4 -right-4 w-16 h-16 bg-purple-400 rounded-full opacity-80 animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Final CTA */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-6\">\n            准备开始您的项目了吗？\n          </h2>\n          <p className=\"text-xl mb-8 text-blue-100\">\n            加入数万用户的选择，让专业人才为您的项目赋能\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6\">\n            <button\n              onClick={handleBrowseServices}\n              className=\"px-8 py-4 bg-white text-blue-600 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-200 transform hover:scale-105 shadow-lg\"\n            >\n              立即开始\n            </button>\n            <button\n              onClick={() => navigate('/help')}\n              className=\"px-8 py-4 bg-transparent border-2 border-white text-white rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-all duration-200 transform hover:scale-105\"\n            >\n              了解更多\n            </button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/NotFoundPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/Showcase.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":7,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport { useI18n } from '@/i18n';\n\nconst ShowcasePage: React.FC = () => {\n  const { t, formatCurrency } = useI18n();\n\n  // 模拟服务数据\n  const mockService = {\n    id: 1,\n    title: '专业Logo设计服务，为您的品牌打造独特形象',\n    description: '拥有10年设计经验的专业设计师，为您提供高质量、原创的Logo设计服务。包含多款初稿选择，无限修改直到满意为止。',\n    price: 299,\n    rating: 4.8,\n    reviews: 156,\n    imageUrl: '/api/placeholder/400/300',\n    seller: {\n      id: 1,\n      name: '张设计师',\n      level: '顶级卖家',\n      avatar: '/api/placeholder/40/40'\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4 leading-chinese\">\n            中文自由职业平台 - 组件展示\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto leading-chinese\">\n            基于 Tailwind CSS 构建的现代化中文用户界面组件库\n          </p>\n        </div>\n\n        {/* 按钮组件展示 */}\n        <Card className=\"mb-8\">\n          <Card.Header title=\"按钮组件展示\" />\n          <Card.Body>\n            <div className=\"flex flex-wrap gap-4 mb-6\">\n              <Button variant=\"primary\">主要按钮</Button>\n              <Button variant=\"secondary\">次要按钮</Button>\n              <Button variant=\"outline\">边框按钮</Button>\n              <Button variant=\"ghost\">幽灵按钮</Button>\n              <Button variant=\"danger\">危险按钮</Button>\n              <Button variant=\"success\">成功按钮</Button>\n            </div>\n\n            <div className=\"border-t pt-6 mb-6\">\n              <div className=\"flex flex-wrap gap-4\">\n                <Button size=\"sm\" variant=\"primary\">小按钮</Button>\n                <Button size=\"md\" variant=\"primary\">中按钮</Button>\n                <Button size=\"lg\" variant=\"primary\">大按钮</Button>\n              </div>\n            </div>\n\n            <div className=\"border-t pt-6\">\n              <div className=\"flex flex-wrap gap-4\">\n                <Button loading variant=\"primary\">加载中</Button>\n                <Button disabled variant=\"primary\">禁用状态</Button>\n                <Button fullWidth variant=\"primary\">全宽按钮</Button>\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n\n        {/* 卡片组件展示 */}\n        <Card className=\"mb-8\">\n          <Card.Header title=\"卡片组件展示\" />\n          <Card.Body>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card variant=\"default\" hover>\n                <Card.Header\n                  title=\"默认卡片\"\n                  subtitle=\"基础的卡片样式\"\n                />\n                <Card.Body>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    这是一个默认样式的卡片组件，基于 Tailwind CSS 构建。\n                  </p>\n                </Card.Body>\n                <Card.Footer>\n                  <Button size=\"sm\" variant=\"primary\">查看更多</Button>\n                </Card.Footer>\n              </Card>\n\n              <Card variant=\"shadow\" hover>\n                <Card.Header\n                  title=\"阴影卡片\"\n                  subtitle=\"带阴影效果的卡片\"\n                />\n                <Card.Body>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    这个卡片具有阴影效果，鼠标悬停时会有动画过渡。\n                  </p>\n                </Card.Body>\n                <Card.Footer>\n                  <Button size=\"sm\" variant=\"outline\">查看更多</Button>\n                </Card.Footer>\n              </Card>\n\n              <Card variant=\"elevated\" hover>\n                <Card.Header\n                  title=\"立体卡片\"\n                  subtitle=\"更明显的阴影效果\"\n                />\n                <Card.Body>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    这个卡片有更明显的阴影效果，适合突出重要内容。\n                  </p>\n                </Card.Body>\n                <Card.Footer>\n                  <Button size=\"sm\" variant=\"ghost\">查看更多</Button>\n                </Card.Footer>\n              </Card>\n            </div>\n          </Card.Body>\n        </Card>\n\n        {/* 服务卡片展示 */}\n        <Card className=\"mb-8\">\n          <Card.Header title=\"服务卡片展示\" />\n          <Card.Body>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card.Service\n                service={mockService}\n                onFavorite={(id) => console.log('收藏服务:', id)}\n                onContact={(sellerId) => console.log('联系卖家:', sellerId)}\n              />\n\n              <Card.Service\n                service={{\n                  ...mockService,\n                  id: 2,\n                  title: '专业网站开发，响应式设计',\n                  price: 1999,\n                  rating: 4.9,\n                  reviews: 89,\n                  seller: {\n                    ...mockService.seller,\n                    id: 2,\n                    name: '李开发',\n                    level: '专业卖家'\n                  }\n                }}\n                onFavorite={(id) => console.log('收藏服务:', id)}\n                onContact={(sellerId) => console.log('联系卖家:', sellerId)}\n              />\n\n              <Card.Service\n                service={{\n                  ...mockService,\n                  id: 3,\n                  title: '文案撰写，品牌故事创作',\n                  description: '专业的文案撰写服务，为您打造动人的品牌故事，提升品牌影响力。',\n                  price: 599,\n                  rating: 4.7,\n                  reviews: 234,\n                  seller: {\n                    ...mockService.seller,\n                    id: 3,\n                    name: '王文案',\n                    level: '优秀卖家'\n                  }\n                }}\n                onFavorite={(id) => console.log('收藏服务:', id)}\n                onContact={(sellerId) => console.log('联系卖家:', sellerId)}\n              />\n            </div>\n          </Card.Body>\n        </Card>\n\n        {/* 响应式布局展示 */}\n        <Card>\n          <Card.Header\n            title=\"响应式布局展示\"\n            subtitle=\"适配各种设备尺寸\"\n          />\n          <Card.Body>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3, 4, 5, 6].map((item) => (\n                <div\n                  key={item}\n                  className=\"bg-gradient-to-r from-red-50 to-pink-50 p-6 rounded-lg border border-red-100\"\n                >\n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"w-10 h-10 bg-red-500 rounded-full flex items-center justify-center text-white font-bold\">\n                      {item}\n                    </div>\n                    <div className=\"ml-3\">\n                      <span className=\"font-semibold text-gray-900\">响应式项目 {item}</span>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mb-3 leading-chinese\">\n                    这个项目会根据屏幕尺寸自动调整布局，在手机、平板和桌面设备上都能完美显示。\n                  </p>\n                  <Button size=\"sm\" variant=\"primary\" fullWidth>\n                    了解详情\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </Card.Body>\n        </Card>\n\n        {/* 设计系统特性 */}\n        <Card className=\"mt-8\">\n          <Card.Header\n            title=\"设计系统特性\"\n            subtitle=\"针对中文用户优化的设计系统\"\n          />\n          <Card.Body>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">中文字体优化</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    使用 PingFang SC、Microsoft YaHei 等中文字体，确保在各个平台上的最佳显示效果。\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">色彩搭配</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    采用中国红作为主色调，搭配金色和专业的灰色，符合中国用户的审美偏好。\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">间距和布局</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    针对中文内容的特点优化了行高、字间距和段落间距，提升阅读体验。\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">移动优先</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    采用移动优先的设计理念，确保在手机端有优秀的用户体验。\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">无障碍设计</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    遵循无障碍设计原则，确保所有用户都能方便地使用平台。\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">性能优化</h3>\n                  <p className=\"text-gray-600 leading-chinese\">\n                    使用 Tailwind CSS 的 JIT 模式和 Tree Shaking，确保最佳的加载性能。\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowcasePage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/auth/FreelancerRegistrationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2687,2690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2687,2690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleSubmitRegistration'. Either include it or remove the dependency array.","line":176,"column":6,"nodeType":"ArrayExpression","endLine":176,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [validateCurrentStep, currentStep, handleSubmitRegistration, handleNext]","fix":{"range":[5236,5282],"text":"[validateCurrentStep, currentStep, handleSubmitRegistration, handleNext]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5669,5672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5669,5672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9896,9899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9896,9899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, ArrowRight, CheckCircle, AlertCircle, User, Briefcase } from 'lucide-react';\nimport { ProgressBar } from '../../components/onboarding/ProgressBar';\nimport { IdentityVerification } from '../../components/verification/IdentityVerification';\nimport { PhoneVerification } from '../../components/verification/PhoneVerification';\nimport { SkillsVerification } from '../../components/verification/SkillsVerification';\nimport { PortfolioReview } from '../../components/verification/PortfolioReview';\nimport { ProfessionalCertification } from '../../components/verification/ProfessionalCertification';\nimport { verificationService } from '../../services/verification';\nimport { VerificationDocument, SkillItem, PortfolioItem, CertificationItem } from '../../types';\n\nconst REGISTRATION_STEPS = [\n  '基本信息',\n  '身份验证',\n  '手机验证',\n  '技能评估',\n  '作品集',\n  '专业认证',\n  '完成'\n];\n\ninterface RegistrationData {\n  // Basic info will be collected in step 1\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  username: string;\n  phone: string;\n  agreeToTerms: boolean;\n  // Verification data\n  identityDocuments: VerificationDocument[];\n  verifiedPhone: string;\n  skills: SkillItem[];\n  portfolio: PortfolioItem[];\n  certifications: CertificationItem[];\n}\n\nexport const FreelancerRegistrationPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [registrationData, setRegistrationData] = useState<RegistrationData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    username: '',\n    phone: '',\n    agreeToTerms: false,\n    identityDocuments: [],\n    verifiedPhone: '',\n    skills: [],\n    portfolio: [],\n    certifications: [],\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNext = useCallback(() => {\n    if (currentStep < REGISTRATION_STEPS.length) {\n      setCurrentStep(prev => prev + 1);\n      setErrors({});\n    }\n  }, [currentStep]);\n\n  const handlePrevious = useCallback(() => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n      setErrors({});\n    }\n  }, [currentStep]);\n\n  const handleStepClick = useCallback((stepIndex: number) => {\n    if (stepIndex < currentStep) {\n      setCurrentStep(stepIndex + 1);\n      setErrors({});\n    }\n  }, [currentStep]);\n\n  const handleVerificationComplete = useCallback((\n    type: 'identity' | 'phone' | 'skills' | 'portfolio' | 'certifications',\n    data: any\n  ) => {\n    setRegistrationData(prev => ({\n      ...prev,\n      [type === 'identity' ? 'identityDocuments' :\n       type === 'phone' ? 'verifiedPhone' :\n       type === 'skills' ? 'skills' :\n       type === 'portfolio' ? 'portfolio' :\n       'certifications']: data\n    }));\n  }, []);\n\n  const handleError = useCallback((error: string) => {\n    setErrors({ general: error });\n  }, []);\n\n  const validateCurrentStep = useCallback(() => {\n    const newErrors: Record<string, string> = {};\n\n    switch (currentStep) {\n      case 1:\n        if (!registrationData.firstName.trim()) {\n          newErrors.firstName = '请输入姓名';\n        }\n        if (!registrationData.lastName.trim()) {\n          newErrors.lastName = '请输入姓氏';\n        }\n        if (!registrationData.email.trim()) {\n          newErrors.email = '请输入邮箱';\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(registrationData.email)) {\n          newErrors.email = '请输入有效的邮箱地址';\n        }\n        if (!registrationData.password) {\n          newErrors.password = '请输入密码';\n        } else if (registrationData.password.length < 8) {\n          newErrors.password = '密码至少需要8个字符';\n        }\n        if (registrationData.password !== registrationData.confirmPassword) {\n          newErrors.confirmPassword = '密码确认不匹配';\n        }\n        if (!registrationData.username.trim()) {\n          newErrors.username = '请输入用户名';\n        } else if (registrationData.username.length < 3) {\n          newErrors.username = '用户名至少需要3个字符';\n        }\n        if (!registrationData.agreeToTerms) {\n          newErrors.agreeToTerms = '请同意服务条款';\n        }\n        break;\n\n      case 2:\n        if (registrationData.identityDocuments.length === 0) {\n          newErrors.identity = '请完成身份验证';\n        }\n        break;\n\n      case 3:\n        if (!registrationData.verifiedPhone) {\n          newErrors.phone = '请完成手机验证';\n        }\n        break;\n\n      case 4:\n        if (registrationData.skills.length === 0) {\n          newErrors.skills = '请至少添加一个技能';\n        }\n        break;\n\n      case 5:\n        if (registrationData.portfolio.length === 0) {\n          newErrors.portfolio = '请至少添加一个作品集项目';\n        }\n        break;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [currentStep, registrationData]);\n\n  const handleStepSubmit = useCallback(async () => {\n    if (!validateCurrentStep()) {\n      return;\n    }\n\n    if (currentStep === REGISTRATION_STEPS.length - 1) {\n      // Final submission\n      await handleSubmitRegistration();\n    } else {\n      handleNext();\n    }\n  }, [currentStep, validateCurrentStep, handleNext]);\n\n  const handleSubmitRegistration = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // Here you would integrate with your auth service\n      // For now, we'll just submit verification data\n      await verificationService.submitVerification();\n\n      // Redirect to dashboard or onboarding completion page\n      navigate('/dashboard/freelancer');\n    } catch (error: any) {\n      setErrors({ submit: error.message || '注册失败，请重试' });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]);\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return <BasicInfoStep data={registrationData} onChange={setRegistrationData} errors={errors} />;\n      case 2:\n        return (\n          <IdentityVerification\n            onVerificationComplete={(docs) => handleVerificationComplete('identity', docs)}\n            onVerificationError={handleError}\n          />\n        );\n      case 3:\n        return (\n          <PhoneVerification\n            initialPhone={registrationData.phone}\n            onVerificationComplete={(phone) => handleVerificationComplete('phone', phone)}\n            onVerificationError={handleError}\n          />\n        );\n      case 4:\n        return (\n          <SkillsVerification\n            onSkillsUpdate={(skills) => handleVerificationComplete('skills', skills)}\n            onVerificationError={handleError}\n          />\n        );\n      case 5:\n        return (\n          <PortfolioReview\n            onPortfolioUpdate={(portfolio) => handleVerificationComplete('portfolio', portfolio)}\n            onVerificationError={handleError}\n          />\n        );\n      case 6:\n        return (\n          <ProfessionalCertification\n            onCertificationsUpdate={(certs) => handleVerificationComplete('certifications', certs)}\n            onVerificationError={handleError}\n          />\n        );\n      case 7:\n        return <CompletionStep data={registrationData} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Briefcase className=\"w-12 h-12 text-blue-600 mr-3\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">自由职业者注册</h1>\n          </div>\n          <p className=\"text-gray-600\">\n            加入我们的平台，展示您的专业技能，开启自由职业生涯\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <ProgressBar\n            currentStep={currentStep}\n            totalSteps={REGISTRATION_STEPS.length}\n            stepTitles={REGISTRATION_STEPS}\n            onStepClick={handleStepClick}\n          />\n        </div>\n\n        {/* Error Alert */}\n        {errors.general && (\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-start\">\n              <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\" />\n              <p className=\"text-red-800\">{errors.general}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Step Content */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-8 mb-6\">\n          {renderStepContent()}\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center\">\n          <button\n            onClick={handlePrevious}\n            disabled={currentStep === 1}\n            className=\"flex items-center px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            上一步\n          </button>\n\n          <button\n            onClick={handleStepSubmit}\n            disabled={isLoading}\n            className=\"flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n          >\n            {isLoading ? '提交中...' : (\n              <>\n                {currentStep === REGISTRATION_STEPS.length ? '完成注册' : '下一步'}\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Basic Info Step Component\nconst BasicInfoStep: React.FC<{\n  data: RegistrationData;\n  onChange: (data: RegistrationData) => void;\n  errors: Record<string, string>;\n}> = ({ data, onChange, errors }) => {\n  const handleChange = (field: keyof RegistrationData, value: any) => {\n    onChange({ ...data, [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center mb-6\">\n        <User className=\"w-8 h-8 text-blue-600 mr-3\" />\n        <h2 className=\"text-2xl font-semibold text-gray-900\">基本信息</h2>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            姓名 *\n          </label>\n          <input\n            type=\"text\"\n            value={data.firstName}\n            onChange={(e) => handleChange('firstName', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.firstName ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"请输入您的姓名\"\n          />\n          {errors.firstName && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.firstName}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            姓氏 *\n          </label>\n          <input\n            type=\"text\"\n            value={data.lastName}\n            onChange={(e) => handleChange('lastName', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.lastName ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"请输入您的姓氏\"\n          />\n          {errors.lastName && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.lastName}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            邮箱地址 *\n          </label>\n          <input\n            type=\"email\"\n            value={data.email}\n            onChange={(e) => handleChange('email', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.email ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"your@email.com\"\n          />\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            用户名 *\n          </label>\n          <input\n            type=\"text\"\n            value={data.username}\n            onChange={(e) => handleChange('username', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.username ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"选择一个用户名\"\n          />\n          {errors.username && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.username}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            密码 *\n          </label>\n          <input\n            type=\"password\"\n            value={data.password}\n            onChange={(e) => handleChange('password', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.password ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"至少8个字符\"\n          />\n          {errors.password && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.password}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            确认密码 *\n          </label>\n          <input\n            type=\"password\"\n            value={data.confirmPassword}\n            onChange={(e) => handleChange('confirmPassword', e.target.value)}\n            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n              errors.confirmPassword ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"再次输入密码\"\n          />\n          {errors.confirmPassword && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.confirmPassword}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={data.agreeToTerms}\n            onChange={(e) => handleChange('agreeToTerms', e.target.checked)}\n            className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n          />\n          <span className=\"ml-2 text-sm text-gray-700\">\n            我同意{' '}\n            <a href=\"/terms\" className=\"text-blue-600 hover:text-blue-700\">\n              服务条款\n            </a>{' '}\n            和{' '}\n            <a href=\"/privacy\" className=\"text-blue-600 hover:text-blue-700\">\n              隐私政策\n            </a>\n          </span>\n        </label>\n        {errors.agreeToTerms && (\n          <p className=\"mt-1 text-sm text-red-600\">{errors.agreeToTerms}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Completion Step Component\nconst CompletionStep: React.FC<{ data: RegistrationData }> = ({ data }) => {\n  return (\n    <div className=\"text-center space-y-6\">\n      <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto\" />\n      <div>\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n          注册完成！\n        </h2>\n        <p className=\"text-gray-600\">\n          恭喜您完成自由职业者注册，您的信息正在审核中\n        </p>\n      </div>\n\n      <div className=\"bg-gray-50 rounded-lg p-6 text-left max-w-md mx-auto\">\n        <h3 className=\"font-semibold text-gray-900 mb-4\">注册摘要</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">姓名:</span>\n            <span className=\"font-medium\">{data.firstName} {data.lastName}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">邮箱:</span>\n            <span className=\"font-medium\">{data.email}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">用户名:</span>\n            <span className=\"font-medium\">{data.username}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">技能:</span>\n            <span className=\"font-medium\">{data.skills.length} 项</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">作品集:</span>\n            <span className=\"font-medium\">{data.portfolio.length} 个项目</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">认证:</span>\n            <span className=\"font-medium\">{data.certifications.length} 个证书</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <p className=\"text-sm text-blue-800\">\n          我们会在24-48小时内审核您的申请，审核通过后您将收到邮件通知\n        </p>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/auth/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":21,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":27,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":28,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showPassword' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowPassword' is assigned a value but never used.","line":37,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":19}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { AuthLayout } from '@/components/layout/AuthLayout';\nimport { Button } from '@/components/ui/Button';\nimport { Card } from '@/components/ui/Card';\nimport {\n  FormInput,\n  PasswordInput,\n  SocialLoginButton,\n  FormError,\n  LoadingSpinner,\n} from '@/components/auth';\nimport { useAuth, useAuthFormValidation } from '@/hooks/useAuth';\nimport { useI18n } from '@/i18n';\nimport { cn } from '@/utils';\nimport { ROUTES } from '@/constants';\n\nexport const LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { t } = useI18n();\n\n  const {\n    login,\n    loginForm,\n    updateLoginForm,\n    isLoading,\n    error,\n    clearError,\n    socialLoginLoading,\n    socialLogin,\n  } = useAuth();\n\n  const { validateLoginForm } = useAuthFormValidation();\n\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Get redirect path from location state\n  const from = location.state?.from?.pathname || ROUTES.DASHBOARD;\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    // This will be handled by the auth store's initialization\n  }, []);\n\n  // Handle form input changes\n  const handleInputChange = (field: string, value: any) => {\n    updateLoginForm({ [field]: value });\n    clearError();\n\n    // Clear field-specific error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearError();\n    setFormErrors({});\n\n    // Validate form\n    const validation = validateLoginForm();\n    if (!validation.isValid) {\n      setFormErrors(validation.errors);\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await login(loginForm);\n\n      if (result.success) {\n        // Redirect to intended page or dashboard\n        navigate(from, { replace: true });\n      } else {\n        setFormErrors({ general: result.error });\n      }\n    } catch (error) {\n      setFormErrors({\n        general: error instanceof Error ? error.message : '登录失败，请重试'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle social login\n  const handleSocialLogin = async (provider: 'wechat' | 'qq' | 'alipay') => {\n    try {\n      // For now, we'll simulate social login\n      // In a real implementation, this would redirect to OAuth provider\n      const result = await socialLogin(provider, { code: 'mock_code', state: 'login' });\n\n      if (result.success) {\n        navigate(from, { replace: true });\n      } else {\n        setFormErrors({ general: result.error });\n      }\n    } catch (error) {\n      setFormErrors({\n        general: `${provider}登录失败，请重试`\n      });\n    }\n  };\n\n  // Handle forgot password\n  const handleForgotPassword = () => {\n    navigate(ROUTES.FORGOT_PASSWORD);\n  };\n\n  return (\n    <AuthLayout>\n      <Card className=\"w-full max-w-md\" variant=\"default\">\n        <Card.Body className=\"p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              欢迎回来\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              登录您的技能集市账户，开启自由职业之旅\n            </p>\n          </div>\n\n          {/* General Error */}\n          {formErrors.general && (\n            <div className=\"mb-6\">\n              <FormError error={formErrors.general} onDismiss={() => setFormErrors({})} />\n            </div>\n          )}\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Email Field */}\n            <FormInput\n              id=\"email\"\n              type=\"email\"\n              label=\"邮箱地址\"\n              placeholder=\"请输入您的邮箱地址\"\n              value={loginForm.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              error={formErrors.email}\n              required\n              leftIcon={\n                <svg className=\"w-5 h-5\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n              }\n              autoComplete=\"email\"\n            />\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <PasswordInput\n                id=\"password\"\n                label=\"密码\"\n                placeholder=\"请输入您的密码\"\n                value={loginForm.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                error={formErrors.password}\n                required\n                leftIcon={\n                  <svg className=\"w-5 h-5\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                  </svg>\n                }\n                autoComplete=\"current-password\"\n              />\n            </div>\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={loginForm.rememberMe}\n                  onChange={(e) => handleInputChange('rememberMe', e.target.checked)}\n                  className=\"w-4 h-4 text-red-500 border-gray-300 rounded focus:ring-red-500 focus:ring-2\"\n                />\n                <span className=\"ml-2 text-sm text-gray-600\">记住我</span>\n              </label>\n\n              <button\n                type=\"button\"\n                onClick={handleForgotPassword}\n                className=\"text-sm text-red-500 hover:text-red-600 transition-colors\"\n              >\n                忘记密码？\n              </button>\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              loading={isSubmitting}\n              disabled={isSubmitting}\n              fullWidth\n              size=\"lg\"\n              className=\"py-3\"\n            >\n              {isSubmitting ? '登录中...' : '登录'}\n            </Button>\n          </form>\n\n          {/* Divider */}\n          <div className=\"relative my-6\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-4 bg-white text-gray-500\">或使用以下方式登录</span>\n            </div>\n          </div>\n\n          {/* Social Login Buttons */}\n          <div className=\"grid grid-cols-3 gap-3\">\n            <SocialLoginButton\n              provider=\"wechat\"\n              onClick={() => handleSocialLogin('wechat')}\n              loading={socialLoginLoading.wechat}\n            />\n            <SocialLoginButton\n              provider=\"qq\"\n              onClick={() => handleSocialLogin('qq')}\n              loading={socialLoginLoading.qq}\n            />\n            <SocialLoginButton\n              provider=\"alipay\"\n              onClick={() => handleSocialLogin('alipay')}\n              loading={socialLoginLoading.alipay}\n            />\n          </div>\n\n          {/* Register Link */}\n          <div className=\"text-center pt-6 border-t border-gray-100\">\n            <p className=\"text-sm text-gray-600\">\n              还没有账号？{' '}\n              <Link\n                to={ROUTES.REGISTER}\n                className=\"font-medium text-red-500 hover:text-red-600 transition-colors\"\n              >\n                立即注册\n              </Link>\n            </p>\n          </div>\n        </Card.Body>\n      </Card>\n    </AuthLayout>\n  );\n};\n\nexport default LoginPage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/auth/RegisterPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSpinner' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":28,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":29,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateRegisterForm' is assigned a value but never used.","line":35,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'passwordStrength' is assigned a value but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1728,1731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1728,1731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":180,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":19}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { AuthLayout } from '@/components/layout/AuthLayout';\nimport { Button } from '@/components/ui/Button';\nimport { Card } from '@/components/ui/Card';\nimport {\n  FormInput,\n  PasswordInput,\n  PhoneInput,\n  SocialLoginButton,\n  FormError,\n  LoadingSpinner,\n  EmailVerification,\n} from '@/components/auth';\nimport { useAuth, useAuthFormValidation } from '@/hooks/useAuth';\nimport { useI18n } from '@/i18n';\nimport { cn } from '@/utils';\nimport { ROUTES } from '@/constants';\n\nexport const RegisterPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { t } = useI18n();\n\n  const {\n    register,\n    registerForm,\n    updateRegisterForm,\n    isLoading,\n    error,\n    clearError,\n    socialLoginLoading,\n    socialLogin,\n  } = useAuth();\n\n  const { validateRegisterForm, validatePassword } = useAuthFormValidation();\n\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [passwordStrength, setPasswordStrength] = useState<'weak' | 'medium' | 'strong'>('weak');\n  const [showEmailVerification, setShowEmailVerification] = useState(false);\n\n  // Registration steps\n  const steps = [\n    { id: 1, title: '基本信息', description: '创建您的账户' },\n    { id: 2, title: '个人资料', description: '完善您的个人信息' },\n    { id: 3, title: '邮箱验证', description: '验证您的邮箱地址' },\n  ];\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    // This will be handled by the auth store's initialization\n  }, []);\n\n  // Handle form input changes\n  const handleInputChange = (field: string, value: any) => {\n    updateRegisterForm({ [field]: value });\n    clearError();\n\n    // Clear field-specific error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  // Validate current step\n  const validateCurrentStep = (): boolean => {\n    const errors: Record<string, string> = {};\n\n    switch (currentStep) {\n      case 1:\n        // Basic information validation\n        if (!registerForm.email) {\n          errors.email = '请输入邮箱地址';\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(registerForm.email)) {\n          errors.email = '请输入有效的邮箱地址';\n        }\n\n        if (!registerForm.password) {\n          errors.password = '请输入密码';\n        } else {\n          const passwordValidation = validatePassword(registerForm.password);\n          if (!passwordValidation.isValid) {\n            errors.password = '密码至少需要8个字符';\n          }\n        }\n\n        if (!registerForm.confirmPassword) {\n          errors.confirmPassword = '请确认密码';\n        } else if (registerForm.password !== registerForm.confirmPassword) {\n          errors.confirmPassword = '两次输入的密码不一致';\n        }\n\n        if (!registerForm.username) {\n          errors.username = '请输入用户名';\n        } else if (registerForm.username.length < 3) {\n          errors.username = '用户名至少需要3个字符';\n        } else if (!/^[a-zA-Z0-9_]+$/.test(registerForm.username)) {\n          errors.username = '用户名只能包含字母、数字和下划线';\n        }\n\n        if (!registerForm.userType) {\n          errors.userType = '请选择账户类型';\n        }\n        break;\n\n      case 2:\n        // Personal information validation\n        if (!registerForm.firstName) {\n          errors.firstName = '请输入姓氏';\n        }\n\n        if (!registerForm.lastName) {\n          errors.lastName = '请输入名字';\n        }\n\n        if (registerForm.phone && !/^1[3-9]\\d{9}$/.test(registerForm.phone)) {\n          errors.phone = '请输入有效的手机号码';\n        }\n        break;\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // Handle next step\n  const handleNext = () => {\n    if (validateCurrentStep()) {\n      if (currentStep < 3) {\n        setCurrentStep(currentStep + 1);\n      }\n    }\n  };\n\n  // Handle previous step\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    if (!validateCurrentStep()) return;\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await register(registerForm);\n\n      if (result.success) {\n        setShowEmailVerification(true);\n      } else {\n        setFormErrors({ general: result.error });\n      }\n    } catch (error) {\n      setFormErrors({\n        general: error instanceof Error ? error.message : '注册失败，请重试'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle social login\n  const handleSocialLogin = async (provider: 'wechat' | 'qq' | 'alipay') => {\n    try {\n      const result = await socialLogin(provider, { code: 'mock_code', state: 'register' });\n\n      if (result.success) {\n        navigate(ROUTES.DASHBOARD, { replace: true });\n      } else {\n        setFormErrors({ general: result.error });\n      }\n    } catch (error) {\n      setFormErrors({\n        general: `${provider}登录失败，请重试`\n      });\n    }\n  };\n\n  // Handle email verification success\n  const handleEmailVerificationSuccess = () => {\n    navigate(ROUTES.DASHBOARD, { replace: true });\n  };\n\n  // Handle password strength change\n  const handlePasswordStrengthChange = (strength: 'weak' | 'medium' | 'strong') => {\n    setPasswordStrength(strength);\n  };\n\n  // Email verification success state\n  if (showEmailVerification) {\n    return (\n      <AuthLayout>\n        <Card className=\"w-full max-w-md\" variant=\"default\">\n          <Card.Body className=\"p-8\">\n            <EmailVerification\n              email={registerForm.email}\n              onVerificationSuccess={handleEmailVerificationSuccess}\n            />\n          </Card.Body>\n        </Card>\n      </AuthLayout>\n    );\n  }\n\n  return (\n    <AuthLayout>\n      <Card className=\"w-full max-w-md\" variant=\"default\">\n        <Card.Body className=\"p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              创建账户\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              加入技能集市，让您的技能发挥价值\n            </p>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              {steps.map((step, index) => (\n                <div\n                  key={step.id}\n                  className=\"flex items-center\"\n                >\n                  <div className={cn(\n                    'w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors',\n                    currentStep >= step.id\n                      ? 'bg-red-500 text-white'\n                      : 'bg-gray-200 text-gray-500'\n                  )}>\n                    {step.id}\n                  </div>\n                  <div className={cn(\n                    'ml-2 text-sm',\n                    currentStep >= step.id ? 'text-red-500' : 'text-gray-500'\n                  )}>\n                    {step.title}\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className={cn(\n                      'flex-1 h-1 mx-4 rounded',\n                      currentStep > step.id ? 'bg-red-500' : 'bg-gray-200'\n                    )} />\n                  )}\n                </div>\n              ))}\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2 text-center\">\n              {steps[currentStep - 1].description}\n            </p>\n          </div>\n\n          {/* General Error */}\n          {formErrors.general && (\n            <div className=\"mb-6\">\n              <FormError error={formErrors.general} onDismiss={() => setFormErrors({})} />\n            </div>\n          )}\n\n          {/* Registration Form */}\n          <div className=\"space-y-6\">\n            {/* Step 1: Basic Information */}\n            {currentStep === 1 && (\n              <div className=\"space-y-4\">\n                <FormInput\n                  id=\"email\"\n                  type=\"email\"\n                  label=\"邮箱地址\"\n                  placeholder=\"请输入您的邮箱地址\"\n                  value={registerForm.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  error={formErrors.email}\n                  required\n                  leftIcon={\n                    <svg className=\"w-5 h-5\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                    </svg>\n                  }\n                  autoComplete=\"email\"\n                />\n\n                <PasswordInput\n                  id=\"password\"\n                  label=\"密码\"\n                  placeholder=\"请设置密码\"\n                  value={registerForm.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  error={formErrors.password}\n                  showStrengthIndicator\n                  onStrengthChange={handlePasswordStrengthChange}\n                  required\n                  autoComplete=\"new-password\"\n                />\n\n                <PasswordInput\n                  id=\"confirmPassword\"\n                  label=\"确认密码\"\n                  placeholder=\"请再次输入密码\"\n                  value={registerForm.confirmPassword}\n                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                  error={formErrors.confirmPassword}\n                  required\n                  autoComplete=\"new-password\"\n                />\n\n                <FormInput\n                  id=\"username\"\n                  type=\"text\"\n                  label=\"用户名\"\n                  placeholder=\"请输入用户名\"\n                  value={registerForm.username}\n                  onChange={(e) => handleInputChange('username', e.target.value)}\n                  error={formErrors.username}\n                  required\n                  helperText=\"用户名将作为您的唯一标识，只能包含字母、数字和下划线\"\n                  autoComplete=\"username\"\n                />\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    账户类型 <span className=\"text-red-500\">*</span>\n                  </label>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <button\n                      type=\"button\"\n                      onClick={() => handleInputChange('userType', 'client')}\n                      className={cn(\n                        'p-3 border-2 rounded-lg text-sm font-medium transition-all',\n                        registerForm.userType === 'client'\n                          ? 'border-red-500 bg-red-50 text-red-700'\n                          : 'border-gray-200 hover:border-gray-300 text-gray-700'\n                      )}\n                    >\n                      <div className=\"font-medium\">买家</div>\n                      <div className=\"text-xs text-gray-500 mt-1\">寻找技能服务</div>\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleInputChange('userType', 'freelancer')}\n                      className={cn(\n                        'p-3 border-2 rounded-lg text-sm font-medium transition-all',\n                        registerForm.userType === 'freelancer'\n                          ? 'border-red-500 bg-red-50 text-red-700'\n                          : 'border-gray-200 hover:border-gray-300 text-gray-700'\n                      )}\n                    >\n                      <div className=\"font-medium\">卖家</div>\n                      <div className=\"text-xs text-gray-500 mt-1\">提供技能服务</div>\n                    </button>\n                  </div>\n                  {formErrors.userType && (\n                    <p className=\"text-xs text-red-500 mt-1\">{formErrors.userType}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Personal Information */}\n            {currentStep === 2 && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormInput\n                    id=\"lastName\"\n                    type=\"text\"\n                    label=\"姓氏\"\n                    placeholder=\"姓\"\n                    value={registerForm.lastName}\n                    onChange={(e) => handleInputChange('lastName', e.target.value)}\n                    error={formErrors.lastName}\n                    required\n                    autoComplete=\"family-name\"\n                  />\n                  <FormInput\n                    id=\"firstName\"\n                    type=\"text\"\n                    label=\"名字\"\n                    placeholder=\"名\"\n                    value={registerForm.firstName}\n                    onChange={(e) => handleInputChange('firstName', e.target.value)}\n                    error={formErrors.firstName}\n                    required\n                    autoComplete=\"given-name\"\n                  />\n                </div>\n\n                <PhoneInput\n                  id=\"phone\"\n                  label=\"手机号码（选填）\"\n                  placeholder=\"请输入手机号码\"\n                  value={registerForm.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  error={formErrors.phone}\n                  helperText=\"用于账户安全验证和重要通知\"\n                  defaultCountry=\"CN\"\n                  autoComplete=\"tel\"\n                />\n\n                <div>\n                  <label className=\"flex items-start space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={registerForm.agreeToTerms}\n                      onChange={(e) => handleInputChange('agreeToTerms', e.target.checked)}\n                      className=\"mt-0.5 w-4 h-4 text-red-500 border-gray-300 rounded focus:ring-red-500 focus:ring-2\"\n                    />\n                    <span className=\"text-sm text-gray-600 leading-chinese\">\n                      我已阅读并同意\n                      <Link to=\"/terms\" className=\"text-red-500 hover:text-red-600 mx-1\">\n                        服务条款\n                      </Link>\n                      和\n                      <Link to=\"/privacy\" className=\"text-red-500 hover:text-red-600 mx-1\">\n                        隐私政策\n                      </Link>\n                    </span>\n                  </label>\n                  {formErrors.agreeToTerms && (\n                    <p className=\"text-xs text-red-500 mt-1\">{formErrors.agreeToTerms}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex space-x-3\">\n              {currentStep > 1 && (\n                <Button\n                  type=\"button\"\n                  onClick={handlePrevious}\n                  variant=\"outline\"\n                  disabled={isSubmitting}\n                  className=\"flex-1\"\n                >\n                  上一步\n                </Button>\n              )}\n\n              {currentStep < 2 && (\n                <Button\n                  type=\"button\"\n                  onClick={handleNext}\n                  disabled={isSubmitting}\n                  className=\"flex-1\"\n                >\n                  下一步\n                </Button>\n              )}\n\n              {currentStep === 2 && (\n                <Button\n                  type=\"button\"\n                  onClick={handleSubmit}\n                  loading={isSubmitting}\n                  disabled={isSubmitting}\n                  className=\"flex-1\"\n                >\n                  {isSubmitting ? '注册中...' : '完成注册'}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Divider */}\n          <div className=\"relative my-6\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-4 bg-white text-gray-500\">或使用以下方式注册</span>\n            </div>\n          </div>\n\n          {/* Social Login Buttons */}\n          <div className=\"grid grid-cols-3 gap-3\">\n            <SocialLoginButton\n              provider=\"wechat\"\n              onClick={() => handleSocialLogin('wechat')}\n              loading={socialLoginLoading.wechat}\n            />\n            <SocialLoginButton\n              provider=\"qq\"\n              onClick={() => handleSocialLogin('qq')}\n              loading={socialLoginLoading.qq}\n            />\n            <SocialLoginButton\n              provider=\"alipay\"\n              onClick={() => handleSocialLogin('alipay')}\n              loading={socialLoginLoading.alipay}\n            />\n          </div>\n\n          {/* Login Link */}\n          <div className=\"text-center pt-6 border-t border-gray-100\">\n            <p className=\"text-sm text-gray-600\">\n              已有账号？{' '}\n              <Link\n                to={ROUTES.LOGIN}\n                className=\"font-medium text-red-500 hover:text-red-600 transition-colors\"\n              >\n                立即登录\n              </Link>\n            </p>\n          </div>\n        </Card.Body>\n      </Card>\n    </AuthLayout>\n  );\n};\n\nexport default RegisterPage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/dashboard/ClientDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalyticsFilters' is defined but never used.","line":12,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserCheck' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Briefcase' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedFilters' is assigned a value but never used.","line":326,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedFilters' is assigned a value but never used.","line":326,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":45}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  StatsCard,\n  OrderStatusCard,\n  MessagePreview,\n  QuickAction,\n  NotificationPanel,\n  CalendarWidget,\n  RecentActivity,\n} from '@/components/dashboard';\nimport { DateRangeSelector, ExportData, AnalyticsFilters, PieChart, BarChart } from '@/components/analytics';\nimport {\n  DollarSign,\n  Users,\n  Star,\n  TrendingUp,\n  ShoppingBag,\n  MessageSquare,\n  Calendar,\n  Plus,\n  Eye,\n  Edit,\n  Search,\n  Filter,\n  Heart,\n  FileText,\n  BarChart3,\n  Target,\n  Clock,\n  AlertCircle,\n  UserCheck,\n  Briefcase,\n} from 'lucide-react';\n\n// Mock data - in a real app, this would come from API\nconst mockStats = [\n  {\n    title: '本月支出',\n    value: '¥15,200',\n    change: { value: -5.3, type: 'decrease' as const, period: '上月' },\n    icon: DollarSign,\n    iconColor: 'text-red-600',\n    bgColor: 'bg-red-50',\n  },\n  {\n    title: '活跃项目',\n    value: '8',\n    change: { value: 14.2, type: 'increase' as const, period: '上周' },\n    icon: ShoppingBag,\n    iconColor: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n  },\n  {\n    title: '合作自由职业者',\n    value: '24',\n    change: { value: 8.7, type: 'increase' as const, period: '上月' },\n    icon: Users,\n    iconColor: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n  },\n  {\n    title: '完成项目',\n    value: '47',\n    change: { value: 12.1, type: 'increase' as const, period: '上月' },\n    icon: Target,\n    iconColor: 'text-green-600',\n    bgColor: 'bg-green-50',\n  },\n];\n\nconst mockSpendingData = [\n  { date: '01-01', spending: 2800, projects: 2, avgProjectValue: 1400 },\n  { date: '01-02', spending: 1200, projects: 1, avgProjectValue: 1200 },\n  { date: '01-03', spending: 4500, projects: 3, avgProjectValue: 1500 },\n  { date: '01-04', spending: 2100, projects: 2, avgProjectValue: 1050 },\n  { date: '01-05', spending: 3300, projects: 2, avgProjectValue: 1650 },\n  { date: '01-06', spending: 1800, projects: 1, avgProjectValue: 1800 },\n  { date: '01-07', spending: 3900, projects: 3, avgProjectValue: 1300 },\n];\n\nconst mockOrderStatus = [\n  { status: 'pending' as const, count: 2, value: 6000, change: 0 },\n  { status: 'in_progress' as const, count: 6, value: 25000, change: 8.5 },\n  { status: 'completed' as const, count: 47, value: 186000, change: 12.3 },\n  { status: 'cancelled' as const, count: 1, value: 2000, change: -50 },\n];\n\nconst mockMessages = [\n  {\n    id: '1',\n    senderName: '张明',\n    content: '项目进展顺利，已完成第一阶段的开发工作',\n    timestamp: new Date(Date.now() - 30 * 60 * 1000),\n    isRead: false,\n    conversationId: 'conv_1',\n    type: 'order' as const,\n    priority: 'high' as const,\n  },\n  {\n    id: '2',\n    senderName: '李设计师',\n    content: 'UI设计稿已更新，请查看最新版本',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    isRead: false,\n    conversationId: 'conv_2',\n    type: 'order' as const,\n    priority: 'medium' as const,\n  },\n  {\n    id: '3',\n    senderName: '王开发者',\n    content: '需要确认一些技术细节',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    isRead: true,\n    conversationId: 'conv_3',\n    type: 'order' as const,\n  },\n];\n\nconst mockQuickActions = [\n  {\n    id: '1',\n    label: '发布新项目',\n    description: '创建新的项目需求',\n    icon: Plus,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n    href: '/projects/create',\n  },\n  {\n    id: '2',\n    label: '寻找自由职业者',\n    description: '浏览和搜索专业人才',\n    icon: Search,\n    color: 'text-green-600',\n    bgColor: 'bg-green-50',\n    href: '/freelancers',\n  },\n  {\n    id: '3',\n    label: '管理项目',\n    description: '查看所有项目状态',\n    icon: ShoppingBag,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n    href: '/projects',\n    badge: 2,\n  },\n  {\n    id: '4',\n    label: '收藏列表',\n    description: '查看收藏的服务',\n    icon: Heart,\n    color: 'text-red-600',\n    bgColor: 'bg-red-50',\n    href: '/favorites',\n    badge: 5,\n  },\n  {\n    id: '5',\n    label: '消息中心',\n    description: '与自由职业者沟通',\n    icon: MessageSquare,\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-50',\n    href: '/messages',\n    badge: 2,\n  },\n  {\n    id: '6',\n    label: '财务报表',\n    description: '查看支出统计',\n    icon: BarChart3,\n    color: 'text-cyan-600',\n    bgColor: 'bg-cyan-50',\n    href: '/analytics',\n  },\n];\n\nconst mockNotifications = [\n  {\n    id: '1',\n    type: 'success' as const,\n    title: '项目交付',\n    message: '张明已提交网站开发项目的最终版本',\n    timestamp: new Date(Date.now() - 30 * 60 * 1000),\n    read: false,\n    action: {\n      label: '查看项目',\n      url: '/projects/12345',\n    },\n  },\n  {\n    id: '2',\n    type: 'info' as const,\n    title: '新的申请',\n    message: '有5位自由职业者申请了您的UI设计项目',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    read: false,\n    metadata: {\n      projectId: 'design_123',\n    },\n  },\n  {\n    id: '3',\n    type: 'warning' as const,\n    title: '预算提醒',\n    message: '本月的支出已达到预算的80%',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    read: true,\n  },\n];\n\nconst mockCalendarEvents = [\n  {\n    id: '1',\n    title: '项目评审会议',\n    date: new Date(),\n    time: '15:00',\n    type: 'meeting' as const,\n    description: '与开发团队讨论项目进度',\n    location: '线上会议',\n  },\n  {\n    id: '2',\n    title: '设计稿验收',\n    date: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),\n    time: '10:00',\n    type: 'deadline' as const,\n    description: 'UI设计最终稿验收',\n  },\n  {\n    id: '3',\n    title: '项目启动',\n    date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n    time: '14:00',\n    type: 'milestone' as const,\n    description: '新移动应用项目启动',\n  },\n];\n\nconst mockRecentActivities = [\n  {\n    id: '1',\n    type: 'order' as const,\n    title: '创建新项目',\n    description: '发布了移动应用开发项目',\n    timestamp: new Date(Date.now() - 15 * 60 * 1000),\n    status: 'pending' as const,\n    amount: 25000,\n    metadata: {\n      projectId: 'proj_001',\n    },\n  },\n  {\n    id: '2',\n    type: 'message' as const,\n    title: '项目沟通',\n    description: '与张明讨论了技术方案',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    user: {\n      name: '张明',\n      id: 'freelancer_1',\n    },\n    metadata: {\n      projectId: 'proj_002',\n    },\n  },\n  {\n    id: '3',\n    type: 'payment' as const,\n    title: '支付款项',\n    description: '支付了设计项目的首付款',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    amount: 5000,\n    metadata: {\n      projectId: 'proj_003',\n    },\n  },\n];\n\nconst mockSpendingByCategory = [\n  { name: 'Web开发', value: 45000 },\n  { name: 'UI/UX设计', value: 28000 },\n  { name: '移动应用', value: 32000 },\n  { name: '内容创作', value: 15000 },\n  { name: '市场营销', value: 12000 },\n];\n\nconst mockFavoriteFreelancers = [\n  {\n    id: '1',\n    name: '张明',\n    title: '全栈开发工程师',\n    avatar: '/api/placeholder/200/200',\n    rating: 4.9,\n    completedOrders: 156,\n    hourlyRate: 350,\n    skills: ['React', 'Node.js', 'TypeScript'],\n  },\n  {\n    id: '2',\n    name: '李设计师',\n    title: 'UI/UX设计师',\n    avatar: '/api/placeholder/200/200',\n    rating: 4.8,\n    completedOrders: 89,\n    hourlyRate: 280,\n    skills: ['Figma', 'Sketch', 'Adobe XD'],\n  },\n  {\n    id: '3',\n    name: '王营销',\n    title: '数字营销专家',\n    avatar: '/api/placeholder/200/200',\n    rating: 4.7,\n    completedOrders: 67,\n    hourlyRate: 200,\n    skills: ['SEO', 'SEM', '社交媒体营销'],\n  },\n];\n\nconst ClientDashboard: React.FC = () => {\n  const [dateRange, setDateRange] = useState({ label: '最近30天', value: '30d' });\n  const [selectedFilters, setSelectedFilters] = useState({});\n\n  useEffect(() => {\n    // Simulate real-time data updates\n    const interval = setInterval(() => {\n      // Update stats, notifications, etc.\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">客户仪表板</h1>\n            <p className=\"text-gray-600\">管理您的项目和自由职业者合作</p>\n          </div>\n\n          <div className=\"flex items-center gap-3 mt-4 lg:mt-0\">\n            <DateRangeSelector\n              selectedValue={dateRange.value}\n              onChange={(option) => setDateRange(option)}\n            />\n            <ExportData\n              data={mockSpendingData}\n              filename={`spending_${dateRange.value}`}\n            />\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {mockStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              {...stat}\n              onClick={() => console.log('View details for:', stat.title)}\n            />\n          ))}\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Spending Analytics */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">支出分析</h3>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 mb-3\">支出趋势</h4>\n                  <BarChart\n                    data={mockSpendingData}\n                    bars={[\n                      { dataKey: 'spending', fill: '#ef4444', name: '支出' },\n                    ]}\n                    xAxisDataKey=\"date\"\n                    height={250}\n                    showGrid={true}\n                    showLegend={false}\n                  />\n                </div>\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 mb-3\">分类支出</h4>\n                  <PieChart\n                    data={mockSpendingByCategory}\n                    height={250}\n                    showLegend={true}\n                    showLabels={true}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <QuickAction\n              actions={mockQuickActions}\n              title=\"快速操作\"\n              columns={3}\n              variant=\"grid\"\n            />\n\n            {/* Favorite Freelancers */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">收藏的自由职业者</h3>\n                <Link\n                  to=\"/freelancers\"\n                  className=\"text-sm text-red-600 hover:text-red-700 font-medium\"\n                >\n                  查看全部\n                </Link>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {mockFavoriteFreelancers.map((freelancer) => (\n                  <div\n                    key={freelancer.id}\n                    className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors duration-200\"\n                  >\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-full overflow-hidden\">\n                      <img\n                        src={freelancer.avatar}\n                        alt={freelancer.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-medium text-gray-900 truncate\">\n                        {freelancer.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 truncate\">\n                        {freelancer.title}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <div className=\"flex items-center gap-0.5\">\n                          <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                          <span className=\"text-xs text-gray-600\">\n                            {freelancer.rating}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-gray-500\">\n                          {freelancer.completedOrders} 个项目\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        ¥{freelancer.hourlyRate}/h\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-8\">\n            {/* Order Status */}\n            <OrderStatusCard\n              orders={mockOrderStatus}\n              title=\"项目状态\"\n              showValues={true}\n              onStatusClick={(status) => console.log('Filter by status:', status)}\n            />\n\n            {/* Messages */}\n            <MessagePreview\n              messages={mockMessages}\n              title=\"最新消息\"\n              maxItems={5}\n              onMessageClick={(messageId, conversationId) =>\n                console.log('Open conversation:', conversationId)\n              }\n            />\n\n            {/* Notifications */}\n            <NotificationPanel\n              notifications={mockNotifications}\n              title=\"通知\"\n              maxItems={5}\n              onNotificationClick={(notification) =>\n                console.log('Open notification:', notification)\n              }\n            />\n          </div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n          {/* Calendar */}\n          <CalendarWidget\n            events={mockCalendarEvents}\n            title=\"项目日程\"\n            view=\"month\"\n            onEventClick={(event) => console.log('Open event:', event)}\n          />\n\n          {/* Recent Activity */}\n          <RecentActivity\n            activities={mockRecentActivities}\n            title=\"最近活动\"\n            maxItems={8}\n            onActivityClick={(activity) => console.log('Open activity:', activity)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClientDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/dashboard/DashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/dashboard/FreelancerDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalyticsFilters' is defined but never used.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedFilters' is assigned a value but never used.","line":330,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":330,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedFilters' is assigned a value but never used.","line":330,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":330,"endColumn":45}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  StatsCard,\n  RevenueChart,\n  OrderStatusCard,\n  MessagePreview,\n  QuickAction,\n  PerformanceMetrics,\n  NotificationPanel,\n  CalendarWidget,\n  RecentActivity,\n} from '@/components/dashboard';\nimport { DateRangeSelector, ExportData, AnalyticsFilters } from '@/components/analytics';\nimport {\n  DollarSign,\n  Users,\n  Star,\n  TrendingUp,\n  ShoppingBag,\n  MessageSquare,\n  Calendar,\n  Plus,\n  Eye,\n  Edit,\n  Settings,\n  FileText,\n  BarChart3,\n  Target,\n  Award,\n  Clock,\n  AlertCircle,\n} from 'lucide-react';\n\n// Mock data - in a real app, this would come from API\nconst mockStats = [\n  {\n    title: '本月收入',\n    value: '¥28,500',\n    change: { value: 15.3, type: 'increase' as const, period: '上月' },\n    icon: DollarSign,\n    iconColor: 'text-green-600',\n    bgColor: 'bg-green-50',\n  },\n  {\n    title: '活跃订单',\n    value: '12',\n    change: { value: -8.2, type: 'decrease' as const, period: '上周' },\n    icon: ShoppingBag,\n    iconColor: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n  },\n  {\n    title: '客户数量',\n    value: '186',\n    change: { value: 12.1, type: 'increase' as const, period: '上月' },\n    icon: Users,\n    iconColor: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n  },\n  {\n    title: '平均评分',\n    value: '4.9',\n    change: { value: 2.1, type: 'increase' as const, period: '上月' },\n    icon: Star,\n    iconColor: 'text-yellow-600',\n    bgColor: 'bg-yellow-50',\n  },\n];\n\nconst mockRevenueData = [\n  { date: '01-01', revenue: 4500, orders: 8, avgOrderValue: 562.5 },\n  { date: '01-02', revenue: 3200, orders: 5, avgOrderValue: 640 },\n  { date: '01-03', revenue: 5800, orders: 12, avgOrderValue: 483.3 },\n  { date: '01-04', revenue: 4100, orders: 7, avgOrderValue: 585.7 },\n  { date: '01-05', revenue: 6300, orders: 15, avgOrderValue: 420 },\n  { date: '01-06', revenue: 5200, orders: 9, avgOrderValue: 577.8 },\n  { date: '01-07', revenue: 7100, orders: 18, avgOrderValue: 394.4 },\n];\n\nconst mockOrderStatus = [\n  { status: 'pending' as const, count: 3, value: 15000, change: 0 },\n  { status: 'in_progress' as const, count: 8, value: 45000, change: 12.5 },\n  { status: 'completed' as const, count: 156, value: 890000, change: 8.3 },\n  { status: 'cancelled' as const, count: 2, value: 8000, change: -25 },\n];\n\nconst mockMessages = [\n  {\n    id: '1',\n    senderName: '李经理',\n    content: '项目进展如何？我们需要提前了解当前的进度',\n    timestamp: new Date(Date.now() - 30 * 60 * 1000),\n    isRead: false,\n    conversationId: 'conv_1',\n    type: 'order' as const,\n    priority: 'high' as const,\n  },\n  {\n    id: '2',\n    senderName: '王总',\n    content: '新的需求文档已发送，请查收',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    isRead: false,\n    conversationId: 'conv_2',\n    type: 'inquiry' as const,\n    priority: 'medium' as const,\n  },\n  {\n    id: '3',\n    senderName: '系统通知',\n    content: '您有一个新的订单待确认',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    isRead: true,\n    conversationId: 'conv_3',\n    type: 'system' as const,\n  },\n];\n\nconst mockQuickActions = [\n  {\n    id: '1',\n    label: '创建新服务',\n    description: '发布新的服务项目',\n    icon: Plus,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n    href: '/services/create',\n  },\n  {\n    id: '2',\n    label: '查看订单',\n    description: '管理所有订单',\n    icon: ShoppingBag,\n    color: 'text-green-600',\n    bgColor: 'bg-green-50',\n    href: '/orders',\n    badge: 3,\n  },\n  {\n    id: '3',\n    label: '消息中心',\n    description: '回复客户消息',\n    icon: MessageSquare,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n    href: '/messages',\n    badge: 2,\n  },\n  {\n    id: '4',\n    label: '财务管理',\n    description: '查看收入统计',\n    icon: DollarSign,\n    color: 'text-red-600',\n    bgColor: 'bg-red-50',\n    href: '/wallet',\n  },\n  {\n    id: '5',\n    label: '个人资料',\n    description: '编辑个人信息',\n    icon: Edit,\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-50',\n    href: '/profile/edit',\n  },\n  {\n    id: '6',\n    label: '数据分析',\n    description: '查看详细报表',\n    icon: BarChart3,\n    color: 'text-cyan-600',\n    bgColor: 'bg-cyan-50',\n    href: '/analytics',\n  },\n];\n\nconst mockPerformanceMetrics = [\n  {\n    label: '本月收入',\n    value: 28500,\n    previousValue: 24700,\n    target: 30000,\n    unit: '¥',\n    icon: <DollarSign className=\"w-5 h-5\" />,\n  },\n  {\n    label: '完成订单',\n    value: 42,\n    previousValue: 38,\n    target: 50,\n    icon: <ShoppingBag className=\"w-5 h-5\" />,\n  },\n  {\n    label: '客户满意度',\n    value: 98,\n    target: 95,\n    unit: '%',\n    icon: <Star className=\"w-5 h-5\" />,\n  },\n  {\n    label: '响应时间',\n    value: 1.2,\n    previousValue: 1.8,\n    target: 1,\n    unit: 'h',\n    icon: <Clock className=\"w-5 h-5\" />,\n  },\n];\n\nconst mockPerformanceData = [\n  { month: '1月', revenue: 45000, orders: 38, clients: 25, rating: 4.8 },\n  { month: '2月', revenue: 52000, orders: 42, clients: 29, rating: 4.9 },\n  { month: '3月', revenue: 48000, orders: 35, clients: 31, rating: 4.7 },\n  { month: '4月', revenue: 61000, orders: 48, clients: 35, rating: 4.9 },\n  { month: '5月', revenue: 58000, orders: 45, clients: 38, rating: 4.8 },\n  { month: '6月', revenue: 67000, orders: 52, clients: 42, rating: 4.9 },\n];\n\nconst mockNotifications = [\n  {\n    id: '1',\n    type: 'success' as const,\n    title: '订单完成',\n    message: '订单 #12345 已完成，客户给出了5星好评！',\n    timestamp: new Date(Date.now() - 30 * 60 * 1000),\n    read: false,\n    action: {\n      label: '查看订单',\n      url: '/orders/12345',\n    },\n  },\n  {\n    id: '2',\n    type: 'warning' as const,\n    title: '截止日期提醒',\n    message: '订单 #12347 将在2天后到期，请及时完成',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    read: false,\n    metadata: {\n      orderId: '12347',\n    },\n  },\n  {\n    id: '3',\n    type: 'info' as const,\n    title: '平台公告',\n    message: '平台将进行系统维护，期间部分功能可能无法使用',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    read: true,\n  },\n];\n\nconst mockCalendarEvents = [\n  {\n    id: '1',\n    title: '项目启动会议',\n    date: new Date(),\n    time: '14:00',\n    type: 'meeting' as const,\n    description: '与客户讨论新项目需求',\n    location: '线上会议',\n  },\n  {\n    id: '2',\n    title: '项目交付',\n    date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),\n    time: '18:00',\n    type: 'deadline' as const,\n    description: '网站开发项目交付',\n  },\n  {\n    id: '3',\n    title: '客户电话',\n    date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n    time: '10:00',\n    type: 'reminder' as const,\n    description: '跟进项目反馈',\n  },\n];\n\nconst mockRecentActivities = [\n  {\n    id: '1',\n    type: 'order' as const,\n    title: '新订单 #12349',\n    description: '客户购买了React开发服务',\n    timestamp: new Date(Date.now() - 15 * 60 * 1000),\n    user: {\n      name: '李经理',\n      id: 'user_1',\n    },\n    status: 'pending' as const,\n    amount: 5500,\n    metadata: {\n      orderId: '12349',\n    },\n  },\n  {\n    id: '2',\n    type: 'review' as const,\n    title: '收到5星好评',\n    description: '客户对UI设计服务非常满意',\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    user: {\n      name: '王总',\n      id: 'user_2',\n    },\n    rating: 5,\n    metadata: {\n      orderId: '12345',\n    },\n  },\n  {\n    id: '3',\n    type: 'payment' as const,\n    title: '收到付款',\n    description: '订单 #12346 尾款已到账',\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    amount: 3000,\n    metadata: {\n      orderId: '12346',\n    },\n  },\n];\n\nconst FreelancerDashboard: React.FC = () => {\n  const [dateRange, setDateRange] = useState({ label: '最近30天', value: '30d' });\n  const [selectedFilters, setSelectedFilters] = useState({});\n\n  useEffect(() => {\n    // Simulate real-time data updates\n    const interval = setInterval(() => {\n      // Update stats, notifications, etc.\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">自由职业者仪表板</h1>\n            <p className=\"text-gray-600\">欢迎回来！这是您的业务概览</p>\n          </div>\n\n          <div className=\"flex items-center gap-3 mt-4 lg:mt-0\">\n            <DateRangeSelector\n              selectedValue={dateRange.value}\n              onChange={(option) => setDateRange(option)}\n            />\n            <ExportData\n              data={mockRevenueData}\n              filename={`revenue_${dateRange.value}`}\n            />\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {mockStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              {...stat}\n              onClick={() => console.log('View details for:', stat.title)}\n            />\n          ))}\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Revenue Chart */}\n            <RevenueChart\n              data={mockRevenueData}\n              title=\"收入趋势\"\n              height={350}\n              onDateRangeChange={(option) => setDateRange(option)}\n            />\n\n            {/* Quick Actions */}\n            <QuickAction\n              actions={mockQuickActions}\n              title=\"快速操作\"\n              columns={3}\n              variant=\"grid\"\n            />\n\n            {/* Performance Metrics */}\n            <PerformanceMetrics\n              metrics={mockPerformanceMetrics}\n              chartData={mockPerformanceData}\n              title=\"绩效指标\"\n              showChart={true}\n              showTargets={true}\n            />\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-8\">\n            {/* Order Status */}\n            <OrderStatusCard\n              orders={mockOrderStatus}\n              title=\"订单状态\"\n              showValues={true}\n              onStatusClick={(status) => console.log('Filter by status:', status)}\n            />\n\n            {/* Messages */}\n            <MessagePreview\n              messages={mockMessages}\n              title=\"最新消息\"\n              maxItems={5}\n              onMessageClick={(messageId, conversationId) =>\n                console.log('Open conversation:', conversationId)\n              }\n            />\n\n            {/* Notifications */}\n            <NotificationPanel\n              notifications={mockNotifications}\n              title=\"通知\"\n              maxItems={5}\n              onNotificationClick={(notification) =>\n                console.log('Open notification:', notification)\n              }\n            />\n          </div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n          {/* Calendar */}\n          <CalendarWidget\n            events={mockCalendarEvents}\n            title=\"日程安排\"\n            view=\"month\"\n            onEventClick={(event) => console.log('Open event:', event)}\n          />\n\n          {/* Recent Activity */}\n          <RecentActivity\n            activities={mockRecentActivities}\n            title=\"最近活动\"\n            maxItems={8}\n            onActivityClick={(activity) => console.log('Open activity:', activity)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FreelancerDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/messages/ConversationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/messages/MessagesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/onboarding/FreelancerOnboardingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VerificationStep' is defined but never used.","line":11,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3004,3007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3004,3007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5558,5561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5558,5561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLastStep' is assigned a value but never used.","line":186,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":415,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":415,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":428,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":428,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isCompleted' is defined but never used.","line":428,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":428,"endColumn":26}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Save, ArrowLeft, ArrowRight, CheckCircle, AlertCircle, Building, User } from 'lucide-react';\nimport { StepGuide } from '../../components/onboarding/StepGuide';\nimport { ProgressBar } from '../../components/onboarding/ProgressBar';\nimport { ProfessionalInfoForm } from '../../components/onboarding/ProfessionalInfoForm';\nimport { SkillAssessment } from '../../components/onboarding/SkillAssessment';\nimport { PortfolioUpload } from '../../components/onboarding/PortfolioUpload';\nimport { PricingWizard } from '../../components/onboarding/PricingWizard';\nimport { verificationService } from '../../services/verification';\nimport { FreelancerProfile, OnboardingProgress, VerificationStep } from '../../types';\n\nconst ONBOARDING_STEPS = [\n  { id: 'account_type', title: '账户类型', description: '选择个人或企业账户', type: 'required' as const, order: 1, estimatedTime: 5 },\n  { id: 'professional_info', title: '专业信息', description: '完善个人或企业资料', type: 'required' as const, order: 2, estimatedTime: 15 },\n  { id: 'skills_assessment', title: '技能评估', description: '选择和评估您的专业技能', type: 'required' as const, order: 3, estimatedTime: 20 },\n  { id: 'portfolio', title: '作品集', description: '上传和展示您的作品', type: 'required' as const, order: 4, estimatedTime: 30 },\n  { id: 'pricing', title: '定价策略', description: '设置服务价格和套餐', type: 'required' as const, order: 5, estimatedTime: 15 },\n  { id: 'verification', title: '身份验证', description: '完成身份和专业认证', type: 'required' as const, order: 6, estimatedTime: 20 },\n  { id: 'review', title: '最终审核', description: '检查并提交申请', type: 'required' as const, order: 7, estimatedTime: 10 },\n];\n\nexport const FreelancerOnboardingPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState('account_type');\n  const [profileData, setProfileData] = useState<Partial<FreelancerProfile>>({});\n  const [onboardingProgress, setOnboardingProgress] = useState<OnboardingProgress>({\n    currentStep: 'account_type',\n    completedSteps: [],\n    savedData: {},\n    isCompleted: false,\n    startedAt: new Date().toISOString(),\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n  const [errors, setErrors] = useState<string[]>([]);\n\n  // Load saved progress on mount\n  useEffect(() => {\n    const loadProgress = async () => {\n      try {\n        const progress = await verificationService.getOnboardingProgress();\n        setOnboardingProgress(progress);\n        if (progress.currentStep) {\n          setCurrentStep(progress.currentStep);\n        }\n        if (progress.savedData) {\n          setProfileData(progress.savedData);\n        }\n      } catch (error) {\n        console.error('Failed to load onboarding progress:', error);\n      }\n    };\n    loadProgress();\n  }, []);\n\n  const saveProgress = useCallback(async (stepData?: Record<string, any>) => {\n    setSaveStatus('saving');\n    try {\n      const dataToSave = stepData || profileData;\n      await verificationService.saveOnboardingProgress(currentStep, dataToSave);\n\n      setOnboardingProgress(prev => ({\n        ...prev,\n        currentStep,\n        completedSteps: prev.completedSteps.includes(currentStep)\n          ? prev.completedSteps\n          : [...prev.completedSteps, currentStep],\n        savedData: { ...prev.savedData, ...dataToSave },\n      }));\n\n      setSaveStatus('saved');\n      setTimeout(() => setSaveStatus('idle'), 2000);\n    } catch (error) {\n      setSaveStatus('error');\n      console.error('Failed to save progress:', error);\n    }\n  }, [currentStep, profileData]);\n\n  const handleStepChange = useCallback((stepId: string) => {\n    const currentStepIndex = ONBOARDING_STEPS.findIndex(step => step.id === currentStep);\n    const targetStepIndex = ONBOARDING_STEPS.findIndex(step => step.id === stepId);\n\n    // Only allow moving forward or to completed steps\n    if (targetStepIndex <= currentStepIndex || onboardingProgress.completedSteps.includes(stepId)) {\n      setCurrentStep(stepId);\n    }\n  }, [currentStep, onboardingProgress.completedSteps]);\n\n  const handleNext = useCallback(async () => {\n    await saveProgress();\n\n    const currentIndex = ONBOARDING_STEPS.findIndex(step => step.id === currentStep);\n    if (currentIndex < ONBOARDING_STEPS.length - 1) {\n      const nextStep = ONBOARDING_STEPS[currentIndex + 1];\n      setCurrentStep(nextStep.id);\n    }\n  }, [currentStep, saveProgress]);\n\n  const handlePrevious = useCallback(() => {\n    const currentIndex = ONBOARDING_STEPS.findIndex(step => step.id === currentStep);\n    if (currentIndex > 0) {\n      const prevStep = ONBOARDING_STEPS[currentIndex - 1];\n      setCurrentStep(prevStep.id);\n    }\n  }, [currentStep]);\n\n  const handleDataUpdate = useCallback((data: Partial<FreelancerProfile>) => {\n    setProfileData(prev => ({ ...prev, ...data }));\n  }, []);\n\n  const handleSubmitApplication = useCallback(async () => {\n    setIsLoading(true);\n    setErrors([]);\n\n    try {\n      // Complete onboarding\n      await verificationService.completeOnboarding();\n\n      // Submit freelancer profile\n      if (Object.keys(profileData).length > 0) {\n        await verificationService.updateFreelancerProfile(profileData as FreelancerProfile);\n      }\n\n      setOnboardingProgress(prev => ({\n        ...prev,\n        isCompleted: true,\n        completedAt: new Date().toISOString(),\n      }));\n\n      navigate('/dashboard/freelancer');\n    } catch (error: any) {\n      setErrors([error.message || '提交失败，请重试']);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [profileData, navigate]);\n\n  const validateCurrentStep = useCallback(() => {\n    const validationErrors: string[] = [];\n\n    switch (currentStep) {\n      case 'account_type':\n        if (!profileData.accountType) {\n          validationErrors.push('请选择账户类型');\n        }\n        if (profileData.accountType === 'company' && !profileData.companyName) {\n          validationErrors.push('请输入公司名称');\n        }\n        break;\n\n      case 'professional_info':\n        if (!profileData.professionalTitle) {\n          validationErrors.push('请输入职业头衔');\n        }\n        if (!profileData.bio || profileData.bio.length < 50) {\n          validationErrors.push('个人简介至少需要50个字符');\n        }\n        break;\n\n      case 'skills_assessment':\n        if (!profileData.skills || profileData.skills.length === 0) {\n          validationErrors.push('请至少添加一个技能');\n        }\n        break;\n\n      case 'portfolio':\n        if (!profileData.portfolio || profileData.portfolio.length === 0) {\n          validationErrors.push('请至少添加一个作品集项目');\n        }\n        break;\n\n      case 'pricing':\n        if (!profileData.hourlyRate || profileData.hourlyRate <= 0) {\n          validationErrors.push('请设置有效的小时费率');\n        }\n        break;\n    }\n\n    setErrors(validationErrors);\n    return validationErrors.length === 0;\n  }, [currentStep, profileData]);\n\n  const renderStepContent = () => {\n    const stepIndex = ONBOARDING_STEPS.findIndex(step => step.id === currentStep);\n    const isLastStep = stepIndex === ONBOARDING_STEPS.length - 1;\n\n    switch (currentStep) {\n      case 'account_type':\n        return <AccountTypeSelection data={profileData} onUpdate={handleDataUpdate} />;\n      case 'professional_info':\n        return <ProfessionalInfoForm data={profileData} onUpdate={handleDataUpdate} />;\n      case 'skills_assessment':\n        return <SkillAssessment data={profileData} onUpdate={handleDataUpdate} />;\n      case 'portfolio':\n        return <PortfolioUpload data={profileData} onUpdate={handleDataUpdate} />;\n      case 'pricing':\n        return <PricingWizard data={profileData} onUpdate={handleDataUpdate} />;\n      case 'verification':\n        return <VerificationSummary data={profileData} onUpdate={handleDataUpdate} />;\n      case 'review':\n        return <FinalReview data={profileData} isCompleted={onboardingProgress.isCompleted} />;\n      default:\n        return null;\n    }\n  };\n\n  const canProceed = () => {\n    return validateCurrentStep();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">自由职业者入驻</h1>\n          <p className=\"text-gray-600\">\n            完成以下步骤，建立您的专业档案，开始接单\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Sidebar - Step Guide */}\n          <div className=\"lg:col-span-1\">\n            <StepGuide\n              steps={ONBOARDING_STEPS}\n              currentStep={currentStep}\n              completedSteps={onboardingProgress.completedSteps}\n              onStepClick={handleStepChange}\n            />\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Progress Bar */}\n            <div className=\"mb-6\">\n              <ProgressBar\n                currentStep={ONBOARDING_STEPS.findIndex(step => step.id === currentStep) + 1}\n                totalSteps={ONBOARDING_STEPS.length}\n                stepTitles={ONBOARDING_STEPS.map(step => step.title)}\n                onStepClick={(index) => handleStepChange(ONBOARDING_STEPS[index - 1]?.id)}\n              />\n            </div>\n\n            {/* Save Status Indicator */}\n            <div className=\"flex justify-end mb-4\">\n              {saveStatus === 'saving' && (\n                <span className=\"text-sm text-blue-600 flex items-center\">\n                  <Save className=\"w-4 h-4 mr-1 animate-spin\" />\n                  保存中...\n                </span>\n              )}\n              {saveStatus === 'saved' && (\n                <span className=\"text-sm text-green-600 flex items-center\">\n                  <CheckCircle className=\"w-4 h-4 mr-1\" />\n                  已保存\n                </span>\n              )}\n              {saveStatus === 'error' && (\n                <span className=\"text-sm text-red-600 flex items-center\">\n                  <AlertCircle className=\"w-4 h-4 mr-1\" />\n                  保存失败\n                </span>\n              )}\n            </div>\n\n            {/* Errors */}\n            {errors.length > 0 && (\n              <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\n                <div className=\"flex items-start\">\n                  <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-sm font-semibold text-red-900 mb-1\">请完成以下必填项</h3>\n                    <ul className=\"text-sm text-red-800 space-y-1\">\n                      {errors.map((error, index) => (\n                        <li key={index}>• {error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step Content */}\n            <div className=\"bg-white rounded-lg shadow-sm border p-8 mb-6\">\n              {renderStepContent()}\n            </div>\n\n            {/* Navigation */}\n            <div className=\"flex justify-between items-center\">\n              <button\n                onClick={handlePrevious}\n                disabled={currentStep === 'account_type'}\n                className=\"flex items-center px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                上一步\n              </button>\n\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={() => saveProgress()}\n                  className=\"px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  保存进度\n                </button>\n\n                {currentStep === 'review' ? (\n                  <button\n                    onClick={handleSubmitApplication}\n                    disabled={isLoading || !canProceed()}\n                    className=\"flex items-center px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    {isLoading ? '提交中...' : '提交申请'}\n                  </button>\n                ) : (\n                  <button\n                    onClick={handleNext}\n                    disabled={!canProceed()}\n                    className=\"flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    下一步\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Account Type Selection Component\nconst AccountTypeSelection: React.FC<{\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}> = ({ data, onUpdate }) => {\n  const handleAccountTypeSelect = (type: 'individual' | 'company') => {\n    onUpdate({ ...data, accountType: type });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">选择账户类型</h2>\n        <p className=\"text-gray-600\">请选择适合您的账户类型</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <button\n          onClick={() => handleAccountTypeSelect('individual')}\n          className={`p-6 border-2 rounded-lg transition-all ${\n            data.accountType === 'individual'\n              ? 'border-blue-500 bg-blue-50'\n              : 'border-gray-200 hover:border-gray-300'\n          }`}\n        >\n          <User className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">个人账户</h3>\n          <p className=\"text-sm text-gray-600 text-left\">\n            适合自由职业者、独立设计师、开发者等个人专业人士\n          </p>\n          <ul className=\"text-sm text-gray-600 text-left mt-3 space-y-1\">\n            <li>• 个人税务处理</li>\n            <li>• 个人品牌展示</li>\n            <li>• 简单快捷的认证流程</li>\n          </ul>\n        </button>\n\n        <button\n          onClick={() => handleAccountTypeSelect('company')}\n          className={`p-6 border-2 rounded-lg transition-all ${\n            data.accountType === 'company'\n              ? 'border-blue-500 bg-blue-50'\n              : 'border-gray-200 hover:border-gray-300'\n          }`}\n        >\n          <Building className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">企业账户</h3>\n          <p className=\"text-sm text-gray-600 text-left\">\n            适合工作室、设计公司、技术服务企业等商业实体\n          </p>\n          <ul className=\"text-sm text-gray-600 text-left mt-3 space-y-1\">\n            <li>• 企业税务处理</li>\n            <li>• 企业品牌展示</li>\n            <li>• 团队协作功能</li>\n            <li>• 需要营业执照等企业资质</li>\n          </ul>\n        </button>\n      </div>\n\n      {data.accountType === 'company' && (\n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">企业账户需要准备</h3>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• 营业执照</li>\n            <li>• 法定代表人身份证明</li>\n            <li>• 企业银行账户信息</li>\n            <li>• 公司简介和服务范围</li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Placeholder components that would be implemented\nconst VerificationSummary: React.FC<{\n  data: Partial<FreelancerProfile>;\n  onUpdate: (data: Partial<FreelancerProfile>) => void;\n}> = ({ data }) => (\n  <div className=\"space-y-6\">\n    <h2 className=\"text-2xl font-semibold text-gray-900\">身份验证</h2>\n    <p className=\"text-gray-600\">\n      请完成身份验证，这将有助于建立客户信任\n    </p>\n    {/* Identity verification components would go here */}\n  </div>\n);\n\nconst FinalReview: React.FC<{\n  data: Partial<FreelancerProfile>;\n  isCompleted: boolean;\n}> = ({ data, isCompleted }) => (\n  <div className=\"space-y-6\">\n    <h2 className=\"text-2xl font-semibold text-gray-900\">最终审核</h2>\n    <p className=\"text-gray-600\">\n      请检查您的信息是否准确无误\n    </p>\n    {/* Review summary would go here */}\n  </div>\n);","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/orders/OrderDetailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/orders/OrdersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/profile/AccountSettingsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RefreshCw' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Progress' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":18},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":151,"column":9,"nodeType":"Literal","messageId":"unexpected","endLine":151,"endColumn":13},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":152,"column":9,"nodeType":"Literal","messageId":"unexpected","endLine":152,"endColumn":14}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Settings,\n  Shield,\n  Bell,\n  Globe,\n  Smartphone,\n  User,\n  CreditCard,\n  Trash2,\n  AlertTriangle,\n  Check,\n  Save,\n  Eye,\n  EyeOff,\n  Key,\n  Clock,\n  Download,\n  Upload,\n  RefreshCw\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from 'sonner';\n\n// Import settings components\nimport { AccountSettings } from '@/components/profile/AccountSettings';\nimport { PrivacySettings } from '@/components/profile/PrivacySettings';\n\nimport type { User } from '@/types';\nimport type { ProfileSettings, PrivacySettings as PrivacySettingsType } from '@/types/profile';\n\ninterface AccountSettingsPageProps {\n  user: User;\n  onSave?: (settings: Partial<ProfileSettings & PrivacySettingsType>) => Promise<void>;\n}\n\nexport const AccountSettingsPage: React.FC<AccountSettingsPageProps> = ({\n  user,\n  onSave\n}) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState('general');\n  const [hasChanges, setHasChanges] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [showExportDialog, setShowExportDialog] = useState(false);\n\n  // Initialize settings with default values\n  const [profileSettings, setProfileSettings] = useState<ProfileSettings>({\n    privacy: {\n      profileVisibility: 'public',\n      showEmail: false,\n      showPhone: false,\n      showLocation: true,\n      showWebsite: true,\n      showSocialMedia: true,\n      showPortfolio: true,\n      allowSearch: true,\n      allowRecommendations: true\n    },\n    notifications: {\n      emailNotifications: true,\n      pushNotifications: true,\n      smsNotifications: false,\n      marketingEmails: false,\n      projectUpdates: true,\n      messageAlerts: true,\n      reviewNotifications: true,\n      promotionalEmails: false,\n      newOrderAlerts: true,\n      orderStatusChanges: true,\n      paymentNotifications: true,\n      reviewRequests: true,\n      newsletterSubscription: false\n    },\n    language: 'zh-CN',\n    timezone: 'Asia/Shanghai',\n    currency: 'CNY',\n    profileVisibility: 'public',\n    showContactInfo: false,\n    allowMessages: true\n  });\n\n  const [privacySettings, setPrivacySettings] = useState<PrivacySettingsType>({\n    profileVisibility: 'public',\n    showEmail: false,\n    showPhone: false,\n    showLocation: true,\n    showWebsite: true,\n    showSocialMedia: true,\n    showPortfolio: true,\n    allowSearch: true,\n    allowRecommendations: true\n  });\n\n  // Track changes\n  useEffect(() => {\n    setHasChanges(true);\n  }, [profileSettings, privacySettings]);\n\n  const handleProfileSettingsChange = useCallback((newSettings: ProfileSettings) => {\n    setProfileSettings(newSettings);\n  }, []);\n\n  const handlePrivacySettingsChange = useCallback((newSettings: PrivacySettingsType) => {\n    setPrivacySettings(newSettings);\n  }, []);\n\n  const handleSaveAll = useCallback(async () => {\n    if (!onSave) return;\n\n    try {\n      setIsSaving(true);\n      await onSave({\n        ...profileSettings,\n        privacy: privacySettings\n      });\n      setHasChanges(false);\n      toast.success(t('profile.settings.saveSuccess'));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      toast.error(t('profile.settings.saveError'));\n    } finally {\n      setIsSaving(false);\n    }\n  }, [profileSettings, privacySettings, onSave, t]);\n\n  const handleExportData = useCallback(() => {\n    // TODO: Implement data export\n    setShowExportDialog(false);\n    toast.success(t('profile.settings.exportStarted'));\n  }, [t]);\n\n  const handleDeleteAccount = useCallback(() => {\n    // TODO: Implement account deletion\n    setShowDeleteDialog(false);\n    toast.success(t('profile.settings.deletionRequested'));\n  }, [t]);\n\n  const getSecurityLevel = () => {\n    // Calculate security level based on various factors\n    let score = 0;\n    if (true) score++; // Password strength (mock)\n    if (false) score++; // 2FA enabled (mock)\n    if (profileSettings.privacy.profileVisibility !== 'public') score++; // Privacy settings\n    if (profileSettings.notifications.emailNotifications) score++; // Email alerts\n\n    if (score >= 3) return { level: 'high', color: 'text-green-600', text: t('profile.settings.security.high') };\n    if (score >= 2) return { level: 'medium', color: 'text-yellow-600', text: t('profile.settings.security.medium') };\n    return { level: 'low', color: 'text-red-600', text: t('profile.settings.security.low') };\n  };\n\n  const security = getSecurityLevel();\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            {t('profile.settings.title')}\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            {t('profile.settings.description')}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Security Level Indicator */}\n          <Badge variant=\"outline\" className=\"flex items-center gap-2\">\n            <Shield className={`h-4 w-4 ${security.color}`} />\n            <span className={security.color}>{security.text}</span>\n          </Badge>\n\n          {hasChanges && (\n            <Button\n              onClick={handleSaveAll}\n              disabled={isSaving}\n              className=\"flex items-center gap-2\"\n            >\n              {isSaving ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              ) : (\n                <Save className=\"h-4 w-4\" />\n              )}\n              {t('common.save')}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Overview Card */}\n      <Card className=\"border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {t('profile.settings.overview')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Account Info */}\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <User className=\"h-5 w-5 text-blue-600\" />\n                <span className=\"font-medium\">{t('profile.settings.account')}</span>\n              </div>\n              <div className=\"space-y-1 text-sm\">\n                <div>{user.firstName} {user.lastName}</div>\n                <div className=\"text-gray-600\">{user.email}</div>\n                <div className=\"text-gray-600\">{user.userType}</div>\n              </div>\n            </div>\n\n            {/* Security Info */}\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Shield className=\"h-5 w-5 text-green-600\" />\n                <span className=\"font-medium\">{t('profile.settings.security')}</span>\n              </div>\n              <div className=\"space-y-1 text-sm\">\n                <div>{t('profile.settings.securityLevel')}: <span className={security.color}>{security.text}</span></div>\n                <div className=\"text-gray-600\">2FA: {t('profile.settings.disabled')}</div>\n                <div className=\"text-gray-600\">{t('profile.settings.lastLogin')}: 2小时前</div>\n              </div>\n            </div>\n\n            {/* Activity Info */}\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Clock className=\"h-5 w-5 text-purple-600\" />\n                <span className=\"font-medium\">{t('profile.settings.activity')}</span>\n              </div>\n              <div className=\"space-y-1 text-sm\">\n                <div>{t('profile.settings.memberSince')}: {new Date(user.createdAt).toLocaleDateString()}</div>\n                <div className=\"text-gray-600\">{t('profile.settings.lastActive')}: 30分钟前</div>\n                <div className=\"text-gray-600\">{t('profile.settings.activeStatus')}: {t('profile.settings.online')}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Key className=\"h-4 w-4 mr-2\" />\n              {t('profile.settings.changePassword')}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Smartphone className=\"h-4 w-4 mr-2\" />\n              {t('profile.settings.enable2FA')}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              {t('profile.settings.exportData')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Settings */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            {t('profile.settings.tabs.general')}\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            {t('profile.settings.tabs.privacy')}\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            {t('profile.settings.tabs.notifications')}\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Key className=\"h-4 w-4\" />\n            {t('profile.settings.tabs.security')}\n          </TabsTrigger>\n          <TabsTrigger value=\"danger\" className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            {t('profile.settings.tabs.danger')}\n          </TabsTrigger>\n        </TabsList>\n\n        {/* General Settings */}\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <AccountSettings\n            settings={profileSettings}\n            onChange={handleProfileSettingsChange}\n            showDangerZone={false}\n          />\n        </TabsContent>\n\n        {/* Privacy Settings */}\n        <TabsContent value=\"privacy\" className=\"space-y-6\">\n          <PrivacySettings\n            settings={privacySettings}\n            onChange={handlePrivacySettingsChange}\n            showAdvanced={true}\n          />\n        </TabsContent>\n\n        {/* Notifications - Simplified View */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                {t('profile.settings.notifications')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">{t('profile.settings.communication')}</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.emailNotifications')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.emailNotifications.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.emailNotifications} />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.pushNotifications')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.pushNotifications.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.pushNotifications} />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.smsNotifications')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.smsNotifications.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.smsNotifications} />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">{t('profile.settings.content')}</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.projectUpdates')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.projectUpdates.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.projectUpdates} />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.messageAlerts')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.messageAlerts.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.messageAlerts} />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{t('profile.settings.reviewNotifications')}</div>\n                        <div className=\"text-sm text-gray-600\">{t('profile.settings.reviewNotifications.description')}</div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked={profileSettings.notifications.reviewNotifications} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Settings */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                {t('profile.settings.security')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Password */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">{t('profile.settings.password')}</div>\n                    <div className=\"text-sm text-gray-600\">{t('profile.settings.password.description')}</div>\n                  </div>\n                  <Button variant=\"outline\">\n                    <Key className=\"h-4 w-4 mr-2\" />\n                    {t('profile.settings.changePassword')}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Two-Factor Authentication */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">{t('profile.settings.twoFactorAuth')}</div>\n                    <div className=\"text-sm text-gray-600\">{t('profile.settings.twoFactorAuth.description')}</div>\n                  </div>\n                  <Button variant=\"outline\">\n                    <Smartphone className=\"h-4 w-4 mr-2\" />\n                    {t('profile.settings.enable2FA')}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Active Sessions */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">{t('profile.settings.activeSessions')}</div>\n                    <div className=\"text-sm text-gray-600\">\n                      {t('profile.settings.currentSession')}: Chrome on Windows • 北京, 中国\n                    </div>\n                  </div>\n                  <Button variant=\"outline\">\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    {t('profile.settings.viewAll')}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Danger Zone */}\n        <TabsContent value=\"danger\" className=\"space-y-6\">\n          <Card className=\"border-red-200\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-red-600\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                {t('profile.settings.dangerZone')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t('profile.settings.dangerZone.warning')}\n                </AlertDescription>\n              </Alert>\n\n              {/* Export Data */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">{t('profile.settings.exportData')}</div>\n                    <div className=\"text-sm text-gray-600\">{t('profile.settings.exportData.description')}</div>\n                  </div>\n                  <Dialog open={showExportDialog} onOpenChange={setShowExportDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        {t('profile.settings.exportData')}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>{t('profile.settings.exportData')}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <p className=\"text-sm text-gray-600\">\n                          {t('profile.settings.exportData.confirmation')}\n                        </p>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowExportDialog(false)}>\n                            {t('common.cancel')}\n                          </Button>\n                          <Button onClick={handleExportData}>\n                            {t('profile.settings.exportData.start')}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {/* Delete Account */}\n              <div className=\"p-4 border border-red-200 rounded-lg bg-red-50\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium text-red-600\">{t('profile.settings.deleteAccount')}</div>\n                    <div className=\"text-sm text-gray-600\">{t('profile.settings.deleteAccount.description')}</div>\n                  </div>\n                  <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"destructive\">\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        {t('profile.settings.deleteAccount')}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle className=\"text-red-600\">\n                          {t('profile.settings.deleteAccount.confirmation')}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <Alert variant=\"destructive\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            {t('profile.settings.deleteAccount.warning')}\n                          </AlertDescription>\n                        </Alert>\n\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">\n                            {t('profile.settings.deleteAccount.reason')}\n                          </label>\n                          <textarea\n                            className=\"w-full p-2 border rounded-md\"\n                            rows={3}\n                            placeholder={t('profile.settings.deleteAccount.reason.placeholder')}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)}>\n                            {t('common.cancel')}\n                          </Button>\n                          <Button variant=\"destructive\" onClick={handleDeleteAccount}>\n                            {t('profile.settings.deleteAccount.confirm')}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Tips */}\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">{t('profile.settings.tips.title')}:</p>\n            <ul className=\"space-y-1 text-sm\">\n              <li>• {t('profile.settings.tips.reviewRegularly')}</li>\n              <li>• {t('profile.settings.tips.enable2FA')}</li>\n              <li>• {t('profile.settings.tips.stayUpdated')}</li>\n              <li>• {t('profile.settings.tips.backupData')}</li>\n            </ul>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/profile/EditProfilePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContactInfoEditor' is defined but never used.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProfileCompletion' is defined but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateProfileCompletion'. Either include it or remove the dependency array.","line":193,"column":6,"nodeType":"ArrayExpression","endLine":193,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [calculateProfileCompletion, profileData]","fix":{"range":[6835,6848],"text":"[calculateProfileCompletion, profileData]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":218,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8526,8529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8526,8529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  User,\n  Briefcase,\n  GraduationCap,\n  Image as ImageIcon,\n  Share2,\n  Settings,\n  Shield,\n  Save,\n  Eye,\n  EyeOff,\n  CheckCircle,\n  AlertCircle,\n  Upload,\n  X\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { toast } from 'sonner';\n\n// Import profile components\nimport { ProfileAvatarUpload } from '@/components/profile/ProfileAvatarUpload';\nimport { BioEditor } from '@/components/profile/BioEditor';\nimport { SkillsManager } from '@/components/profile/SkillsManager';\nimport { ExperienceManager } from '@/components/profile/ExperienceManager';\nimport { EducationManager } from '@/components/profile/EducationManager';\nimport { PortfolioManager } from '@/components/profile/PortfolioManager';\nimport { SocialMediaLinks } from '@/components/profile/SocialMediaLinks';\nimport { ContactInfoEditor } from '@/components/profile/ContactInfoEditor';\nimport { AccountSettings } from '@/components/profile/AccountSettings';\nimport { PrivacySettings } from '@/components/profile/PrivacySettings';\nimport { ProfileCompletion } from '@/components/profile/ProfileCompletion';\n\nimport type {\n  ProfileEditState,\n  ProfileCompletion as ProfileCompletionType,\n  ValidationError\n} from '@/types/profile';\nimport type { User as UserType } from '@/types';\n\ninterface EditProfilePageProps {\n  user: UserType;\n  onSave: (profile: ProfileEditState) => Promise<void>;\n  onPreview?: (profile: ProfileEditState) => void;\n}\n\nexport const EditProfilePage: React.FC<EditProfilePageProps> = ({\n  user,\n  onSave,\n  onPreview\n}) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState('basic');\n  const [profileData, setProfileData] = useState<ProfileEditState | null>(null);\n  const [originalData, setOriginalData] = useState<ProfileEditState | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);\n  const [completionStatus, setCompletionStatus] = useState<ProfileCompletionType | null>(null);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [autoSaveStatus, setAutoSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n\n  // Initialize profile data\n  useEffect(() => {\n    const initializeProfile = async () => {\n      try {\n        setIsLoading(true);\n        // TODO: Fetch profile data from API\n        const initialData: ProfileEditState = {\n          basicInfo: {\n            displayName: user.firstName + ' ' + user.lastName,\n            avatar: user.avatar,\n            bio: user.bio,\n            title: user.profile.displayName,\n            location: {\n              country: '',\n              province: '',\n              city: '',\n              timezone: ''\n            },\n            website: user.profile.website,\n            languages: user.profile.languages\n          },\n          professionalInfo: {\n            professionalTitle: user.profile.displayName,\n            hourlyRate: user.profile.hourlyRate || 0,\n            currency: 'CNY',\n            availabilityStatus: user.profile.availability ? 'available' : 'unavailable',\n            responseTime: user.profile.responseTime,\n            totalEarnings: user.profile.totalEarnings,\n            completedProjects: user.profile.completedProjects,\n            accountType: 'individual'\n          },\n          contactInfo: {\n            email: user.email,\n            phone: user.phone,\n            timezone: 'Asia/Shanghai'\n          },\n          socialMedia: user.profile.socialLinks.map(link => ({\n            platform: link.platform,\n            url: link.url,\n            username: link.username,\n            followers: 0,\n            isVerified: false\n          })),\n          portfolio: user.profile.portfolio,\n          skills: user.profile.skills.map((skill, index) => ({\n            id: `skill-${index}`,\n            name: skill,\n            category: 'general',\n            level: 'intermediate' as const,\n            yearsExperience: 1,\n            isVerified: false\n          })),\n          experience: [],\n          education: [],\n          languages: user.profile.languages.map(lang => ({\n            language: lang,\n            proficiency: 'professional' as const\n          })),\n          certifications: [],\n          settings: {\n            privacy: {\n              profileVisibility: 'public',\n              showEmail: false,\n              showPhone: false,\n              showLocation: true,\n              showWebsite: true,\n              showSocialMedia: true,\n              showPortfolio: true,\n              allowSearch: true,\n              allowRecommendations: true\n            },\n            notifications: {\n              emailNotifications: true,\n              pushNotifications: true,\n              smsNotifications: false,\n              marketingEmails: false,\n              projectUpdates: true,\n              messageAlerts: true,\n              reviewNotifications: true,\n              promotionalEmails: false,\n              newOrderAlerts: true,\n              orderStatusChanges: true,\n              paymentNotifications: true,\n              reviewRequests: true,\n              newsletterSubscription: false\n            },\n            language: 'zh-CN',\n            timezone: 'Asia/Shanghai',\n            currency: 'CNY',\n            profileVisibility: 'public',\n            showContactInfo: false,\n            allowMessages: true,\n            emailNotifications: true,\n            pushNotifications: true,\n            smsNotifications: false,\n            marketingEmails: false,\n            projectUpdates: true,\n            messageAlerts: true,\n            reviewNotifications: true,\n            promotionalEmails: false\n          }\n        };\n\n        setProfileData(initialData);\n        setOriginalData(JSON.parse(JSON.stringify(initialData)));\n      } catch (error) {\n        console.error('Error initializing profile:', error);\n        toast.error(t('profile.edit.loadError'));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeProfile();\n  }, [user, t]);\n\n  // Calculate profile completion\n  useEffect(() => {\n    if (profileData) {\n      const completion = calculateProfileCompletion(profileData);\n      setCompletionStatus(completion);\n    }\n  }, [profileData]);\n\n  // Track unsaved changes\n  useEffect(() => {\n    if (originalData && profileData) {\n      const hasChanges = JSON.stringify(profileData) !== JSON.stringify(originalData);\n      setHasUnsavedChanges(hasChanges);\n    }\n  }, [profileData, originalData]);\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (!hasUnsavedChanges || isPreviewMode) return;\n\n    const autoSaveTimer = setTimeout(async () => {\n      try {\n        setAutoSaveStatus('saving');\n        // TODO: Implement auto-save API call\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n        setAutoSaveStatus('saved');\n        setOriginalData(JSON.parse(JSON.stringify(profileData)));\n\n        setTimeout(() => {\n          setAutoSaveStatus('idle');\n        }, 2000);\n      } catch (error) {\n        setAutoSaveStatus('error');\n        setTimeout(() => {\n          setAutoSaveStatus('idle');\n        }, 3000);\n      }\n    }, 5000); // Auto-save after 5 seconds of inactivity\n\n    return () => clearTimeout(autoSaveTimer);\n  }, [profileData, hasUnsavedChanges, isPreviewMode]);\n\n  const calculateProfileCompletion = (data: ProfileEditState): ProfileCompletionType => {\n    const sections = [\n      { key: 'basicInfo', weight: 20 },\n      { key: 'professionalInfo', weight: 15 },\n      { key: 'contactInfo', weight: 10 },\n      { key: 'skills', weight: 15 },\n      { key: 'experience', weight: 15 },\n      { key: 'education', weight: 10 },\n      { key: 'portfolio', weight: 10 },\n      { key: 'socialMedia', weight: 5 }\n    ];\n\n    let totalPercentage = 0;\n    const completedSections: string[] = [];\n    const incompleteSections: string[] = [];\n    const suggestions: any[] = [];\n\n    sections.forEach(section => {\n      const isComplete = checkSectionCompletion(section.key, data);\n      if (isComplete) {\n        completedSections.push(section.key);\n        totalPercentage += section.weight;\n      } else {\n        incompleteSections.push(section.key);\n        suggestions.push({\n          section: section.key,\n          message: t(`profile.completion.suggestions.${section.key}`),\n          priority: section.weight >= 15 ? 'high' : 'medium'\n        });\n      }\n    });\n\n    return {\n      percentage: totalPercentage,\n      completedSections,\n      incompleteSections,\n      suggestions\n    };\n  };\n\n  const checkSectionCompletion = (section: string, data: ProfileEditState): boolean => {\n    switch (section) {\n      case 'basicInfo':\n        return !!(data.basicInfo.displayName && data.basicInfo.avatar && data.basicInfo.bio);\n      case 'professionalInfo':\n        return !!(data.professionalInfo.professionalTitle && data.professionalInfo.hourlyRate);\n      case 'contactInfo':\n        return !!(data.contactInfo.email && data.contactInfo.phone);\n      case 'skills':\n        return data.skills.length > 0;\n      case 'experience':\n        return data.experience.length > 0;\n      case 'education':\n        return data.education.length > 0;\n      case 'portfolio':\n        return data.portfolio.length > 0;\n      case 'socialMedia':\n        return data.socialMedia.length > 0;\n      default:\n        return false;\n    }\n  };\n\n  const handleSave = async () => {\n    if (!profileData) return;\n\n    try {\n      setIsSaving(true);\n      const errors = validateProfile(profileData);\n\n      if (errors.length > 0) {\n        setValidationErrors(errors);\n        toast.error(t('profile.edit.validationError'));\n        return;\n      }\n\n      await onSave(profileData);\n      setOriginalData(JSON.parse(JSON.stringify(profileData)));\n      setHasUnsavedChanges(false);\n      toast.success(t('profile.edit.saveSuccess'));\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast.error(t('profile.edit.saveError'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const validateProfile = (data: ProfileEditState): ValidationError[] => {\n    const errors: ValidationError[] = [];\n\n    if (!data.basicInfo.displayName.trim()) {\n      errors.push({\n        field: 'displayName',\n        message: t('profile.validation.displayName.required'),\n        type: 'error'\n      });\n    }\n\n    if (data.basicInfo.displayName.length > 100) {\n      errors.push({\n        field: 'displayName',\n        message: t('profile.validation.displayName.tooLong'),\n        type: 'error'\n      });\n    }\n\n    if (!data.contactInfo.email.trim()) {\n      errors.push({\n        field: 'email',\n        message: t('profile.validation.email.required'),\n        type: 'error'\n      });\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (data.contactInfo.email && !emailRegex.test(data.contactInfo.email)) {\n      errors.push({\n        field: 'email',\n        message: t('profile.validation.email.invalid'),\n        type: 'error'\n      });\n    }\n\n    return errors;\n  };\n\n  const handleTabChange = (value: string) => {\n    if (hasUnsavedChanges) {\n      // TODO: Show confirmation dialog\n    }\n    setActiveTab(value);\n  };\n\n  const togglePreview = () => {\n    setIsPreviewMode(!isPreviewMode);\n    if (!isPreviewMode && onPreview && profileData) {\n      onPreview(profileData);\n    }\n  };\n\n  const handleReset = () => {\n    if (originalData) {\n      setProfileData(JSON.parse(JSON.stringify(originalData)));\n      setValidationErrors([]);\n      toast.success(t('profile.edit.resetSuccess'));\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!profileData) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {t('profile.edit.loadError')}\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  const profileSections = [\n    { id: 'basic', label: t('profile.tabs.basic'), icon: User },\n    { id: 'professional', label: t('profile.tabs.professional'), icon: Briefcase },\n    { id: 'skills', label: t('profile.tabs.skills'), icon: Shield },\n    { id: 'experience', label: t('profile.tabs.experience'), icon: Briefcase },\n    { id: 'education', label: t('profile.tabs.education'), icon: GraduationCap },\n    { id: 'portfolio', label: t('profile.tabs.portfolio'), icon: ImageIcon },\n    { id: 'social', label: t('profile.tabs.social'), icon: Share2 },\n    { id: 'settings', label: t('profile.tabs.settings'), icon: Settings }\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            {t('profile.edit.title')}\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            {t('profile.edit.description')}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Auto-save status */}\n          {autoSaveStatus !== 'idle' && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              {autoSaveStatus === 'saving' && (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n              )}\n              {autoSaveStatus === 'saved' && (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              )}\n              {autoSaveStatus === 'error' && (\n                <AlertCircle className=\"h-4 w-4 text-red-600\" />\n              )}\n              <span className={\n                autoSaveStatus === 'saved' ? 'text-green-600' :\n                autoSaveStatus === 'error' ? 'text-red-600' : 'text-gray-600'\n              }>\n                {t(`profile.edit.autoSave.${autoSaveStatus}`)}\n              </span>\n            </div>\n          )}\n\n          {/* Action buttons */}\n          <Button\n            variant=\"outline\"\n            onClick={togglePreview}\n            className=\"flex items-center gap-2\"\n          >\n            {isPreviewMode ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            {isPreviewMode ? t('profile.edit.exitPreview') : t('profile.edit.preview')}\n          </Button>\n\n          {hasUnsavedChanges && (\n            <Button\n              variant=\"outline\"\n              onClick={handleReset}\n              disabled={isSaving}\n            >\n              {t('common.reset')}\n            </Button>\n          )}\n\n          <Button\n            onClick={handleSave}\n            disabled={isSaving || !hasUnsavedChanges}\n            className=\"flex items-center gap-2\"\n          >\n            {isSaving ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n            ) : (\n              <Save className=\"h-4 w-4\" />\n            )}\n            {t('common.save')}\n          </Button>\n        </div>\n      </div>\n\n      {/* Profile Completion Card */}\n      {completionStatus && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n              {t('profile.completion.title')}\n            </CardTitle>\n            <CardDescription>\n              {t('profile.completion.description', { percentage: completionStatus.percentage })}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Progress value={completionStatus.percentage} className=\"h-2\" />\n            <div className=\"mt-4 flex flex-wrap gap-2\">\n              {completionStatus.completedSections.map(section => (\n                <Badge key={section} variant=\"default\" className=\"bg-green-100 text-green-800\">\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  {t(`profile.sections.${section}`)}\n                </Badge>\n              ))}\n              {completionStatus.incompleteSections.map(section => (\n                <Badge key={section} variant=\"outline\" className=\"text-gray-600\">\n                  {t(`profile.sections.${section}`)}\n                </Badge>\n              ))}\n            </div>\n            {completionStatus.suggestions.length > 0 && (\n              <div className=\"mt-4 space-y-2\">\n                {completionStatus.suggestions.map((suggestion, index) => (\n                  <Alert key={index}>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription className=\"text-sm\">\n                      {suggestion.message}\n                    </AlertDescription>\n                  </Alert>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Validation Errors */}\n      {validationErrors.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <div className=\"space-y-1\">\n              {validationErrors.map((error, index) => (\n                <div key={index} className=\"text-sm\">\n                  {error.message}\n                </div>\n              ))}\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Sidebar Navigation */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">{t('profile.edit.sections')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <nav className=\"space-y-1\">\n                {profileSections.map(section => {\n                  const Icon = section.icon;\n                  const isActive = activeTab === section.id;\n                  const isCompleted = completionStatus?.completedSections.includes(section.id);\n\n                  return (\n                    <button\n                      key={section.id}\n                      onClick={() => handleTabChange(section.id)}\n                      className={`w-full flex items-center gap-3 px-4 py-3 text-left transition-colors ${\n                        isActive\n                          ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-600'\n                          : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                      }`}\n                    >\n                      <Icon className=\"h-5 w-5\" />\n                      <span className=\"flex-1\">{section.label}</span>\n                      {isCompleted && (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      )}\n                    </button>\n                  );\n                })}\n              </nav>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"lg:col-span-3\">\n          <Tabs value={activeTab} onValueChange={handleTabChange} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-8\">\n              {profileSections.map(section => (\n                <TabsTrigger\n                  key={section.id}\n                  value={section.id}\n                  className=\"hidden lg:flex\"\n                >\n                  {section.label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n\n            <TabsContent value=\"basic\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('profile.basic.title')}</CardTitle>\n                  <CardDescription>{t('profile.basic.description')}</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <ProfileAvatarUpload\n                    value={profileData.basicInfo.avatar}\n                    onChange={(avatar) => setProfileData(prev => prev ? ({\n                      ...prev,\n                      basicInfo: { ...prev.basicInfo, avatar }\n                    }) : null)}\n                  />\n                  <BioEditor\n                    value={profileData.basicInfo}\n                    onChange={(basicInfo) => setProfileData(prev => prev ? ({\n                      ...prev,\n                      basicInfo\n                    }) : null)}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"professional\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('profile.professional.title')}</CardTitle>\n                  <CardDescription>{t('profile.professional.description')}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {/* Professional info editor will be added here */}\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Professional info editor coming soon...\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"skills\" className=\"space-y-6\">\n              <SkillsManager\n                skills={profileData.skills}\n                onChange={(skills) => setProfileData(prev => prev ? ({\n                  ...prev,\n                  skills\n                }) : null)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"experience\" className=\"space-y-6\">\n              <ExperienceManager\n                experience={profileData.experience}\n                onChange={(experience) => setProfileData(prev => prev ? ({\n                  ...prev,\n                  experience\n                }) : null)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"education\" className=\"space-y-6\">\n              <EducationManager\n                education={profileData.education}\n                onChange={(education) => setProfileData(prev => prev ? ({\n                  ...prev,\n                  education\n                }) : null)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"portfolio\" className=\"space-y-6\">\n              <PortfolioManager\n                portfolio={profileData.portfolio}\n                onChange={(portfolio) => setProfileData(prev => prev ? ({\n                  ...prev,\n                  portfolio\n                }) : null)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"social\" className=\"space-y-6\">\n              <SocialMediaLinks\n                socialLinks={profileData.socialMedia}\n                onChange={(socialMedia) => setProfileData(prev => prev ? ({\n                  ...prev,\n                  socialMedia\n                }) : null)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-6\">\n              <div className=\"grid gap-6\">\n                <PrivacySettings\n                  settings={profileData.settings.privacy}\n                  onChange={(privacy) => setProfileData(prev => prev ? ({\n                    ...prev,\n                    settings: { ...prev.settings, privacy }\n                  }) : null)}\n                />\n                <AccountSettings\n                  settings={profileData.settings}\n                  onChange={(settings) => setProfileData(prev => prev ? ({\n                    ...prev,\n                    settings\n                  }) : null)}\n                />\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Floating Action Button for mobile */}\n      <div className=\"lg:hidden fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={handleSave}\n          disabled={isSaving || !hasUnsavedChanges}\n          size=\"lg\"\n          className=\"rounded-full shadow-lg\"\n        >\n          {isSaving ? (\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n          ) : (\n            <Save className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/profile/ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/profile/UserProfilePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":5,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":5,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":5,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is assigned a value but never used.","line":297,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":13}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ProfileHeader, ServiceShowcase, PortfolioGallery, ReviewSummary, ContactCard, VerificationBadges, SkillsDisplay, SocialProof } from '@/components/profile/public';\nimport { StatsCard } from '@/components/dashboard';\nimport { DollarSign, Users, Star, TrendingUp, Eye, Heart, MessageCircle, Share2, Bookmark, Flag } from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\n\n// Mock data - in a real app, this would come from API\nconst mockProfileData = {\n  name: '张明',\n  title: '全栈开发工程师 & UI/UX 设计师',\n  avatar: '/api/placeholder/200/200',\n  coverImage: '/api/placeholder/1200/400',\n  bio: '我是一名经验丰富的全栈开发工程师，拥有8年以上的开发经验。专注于React、Node.js和云原生应用开发。同时我也是一名UI/UX设计师，注重用户体验和界面美观。已成功完成200+项目，帮助客户实现他们的数字化目标。',\n  location: '北京, 中国',\n  joinedDate: new Date('2020-03-15'),\n  rating: 4.9,\n  totalReviews: 156,\n  completedOrders: 234,\n  responseTime: '1小时内',\n  languages: ['中文', '英语', '日语'],\n  verificationStatus: {\n    email: true,\n    phone: true,\n    identity: true,\n    professional: true,\n  },\n  badges: [\n    {\n      type: 'top_rated' as const,\n      label: '顶级卖家',\n      description: '平台评分最高的卖家之一',\n    },\n    {\n      type: 'expert' as const,\n      label: '专家认证',\n      description: '经过专业认证的高级开发者',\n    },\n  ],\n  contact: {\n    email: 'zhangming@example.com',\n    website: 'https://zhangming.dev',\n  },\n  totalEarnings: 1250000,\n  totalClients: 189,\n  repeatClientRate: 78,\n  averageOrderValue: 5350,\n  memberSince: new Date('2020-03-15'),\n  certifications: ['AWS认证架构师', 'Google Cloud专业认证', 'Scrum Master认证'],\n  featuredIn: ['科技日报', '创业邦', '36氪'],\n};\n\nconst mockServices = [\n  {\n    id: '1',\n    title: 'React应用开发 - 从零到部署',\n    description: '专业的React应用开发服务，包括需求分析、设计、开发、测试和部署全流程',\n    price: 5000,\n    originalPrice: 6000,\n    imageUrl: '/api/placeholder/400/300',\n    category: 'Web开发',\n    rating: 4.9,\n    reviews: 45,\n    orders: 67,\n    deliveryTime: '7天',\n    features: ['React Hooks', 'TypeScript', 'Redux', '响应式设计'],\n    tags: ['React', 'TypeScript', 'Node.js'],\n    isFeatured: true,\n    seller: {\n      name: '张明',\n      avatar: '/api/placeholder/200/200',\n      level: '顶级卖家',\n    },\n  },\n  {\n    id: '2',\n    title: 'UI/UX设计服务',\n    description: '专业的用户界面和用户体验设计，打造美观实用的产品',\n    price: 3000,\n    imageUrl: '/api/placeholder/400/300',\n    category: '设计',\n    rating: 4.8,\n    reviews: 23,\n    orders: 34,\n    deliveryTime: '5天',\n    features: ['Figma设计', '原型制作', '设计系统'],\n    tags: ['UI设计', 'UX设计', 'Figma'],\n    seller: {\n      name: '张明',\n      avatar: '/api/placeholder/200/200',\n      level: '顶级卖家',\n    },\n  },\n  {\n    id: '3',\n    title: 'Node.js后端API开发',\n    description: '高性能的Node.js后端API开发，支持微服务架构',\n    price: 4500,\n    imageUrl: '/api/placeholder/400/300',\n    category: '后端开发',\n    rating: 4.9,\n    reviews: 31,\n    orders: 42,\n    deliveryTime: '10天',\n    features: ['Express.js', 'MongoDB', 'JWT认证', 'API文档'],\n    tags: ['Node.js', 'Express', 'MongoDB'],\n    seller: {\n      name: '张明',\n      avatar: '/api/placeholder/200/200',\n      level: '顶级卖家',\n    },\n  },\n];\n\nconst mockPortfolios = [\n  {\n    id: '1',\n    title: '电商平台开发',\n    description: '为某知名品牌开发的现代化电商平台，支持多语言、多货币',\n    imageUrl: '/api/placeholder/600/400',\n    category: 'Web开发',\n    tags: ['React', 'Node.js', 'MongoDB', '电商'],\n    projectUrl: 'https://example-ecommerce.com',\n    client: '时尚品牌有限公司',\n    completionDate: new Date('2024-01-15'),\n    featured: true,\n    likes: 45,\n    views: 234,\n  },\n  {\n    id: '2',\n    title: '金融科技仪表板',\n    description: '实时数据可视化的金融分析平台，支持多种图表和报表',\n    imageUrl: '/api/placeholder/600/400',\n    category: '数据可视化',\n    tags: ['React', 'D3.js', 'WebSocket', '金融'],\n    client: '金融科技创业公司',\n    completionDate: new Date('2024-02-20'),\n    likes: 38,\n    views: 189,\n  },\n  {\n    id: '3',\n    title: '社交媒体应用设计',\n    description: '为创业公司设计的全新社交媒体应用，注重用户体验',\n    imageUrl: '/api/placeholder/600/400',\n    category: 'UI/UX设计',\n    tags: ['UI设计', 'UX研究', '移动端', '社交'],\n    client: '科技创业公司',\n    completionDate: new Date('2024-03-10'),\n    likes: 52,\n    views: 312,\n  },\n];\n\nconst mockReviews = [\n  {\n    id: '1',\n    rating: 5,\n    title: '非常专业的开发体验',\n    content: '张明是一位非常专业的开发者，技术过硬，沟通顺畅。项目按时交付，质量超出预期。强烈推荐！',\n    reviewer: {\n      name: '李经理',\n      level: '金牌买家',\n    },\n    serviceTitle: 'React应用开发 - 从零到部署',\n    date: new Date('2024-03-15'),\n    helpful: 12,\n    verified: true,\n    response: {\n      content: '感谢您的信任和好评！很高兴能为您完成这个项目，期待未来的合作机会。',\n      date: new Date('2024-03-16'),\n    },\n  },\n  {\n    id: '2',\n    rating: 5,\n    title: '设计水平很高',\n    content: '设计作品非常有创意，很好地理解了我们的需求。修改也很及时，合作愉快！',\n    reviewer: {\n      name: '王总',\n      level: '银牌买家',\n    },\n    serviceTitle: 'UI/UX设计服务',\n    date: new Date('2024-03-10'),\n    helpful: 8,\n    verified: true,\n  },\n  {\n    id: '3',\n    rating: 4,\n    title: '技术实力强',\n    content: '技术能力很强，代码质量很好。希望能在项目沟通方面更主动一些。',\n    reviewer: {\n      name: '陈总',\n      level: '铜牌买家',\n    },\n    serviceTitle: 'Node.js后端API开发',\n    date: new Date('2024-03-05'),\n    helpful: 6,\n    verified: true,\n    response: {\n      content: '感谢您的反馈！我会注意加强项目沟通，确保信息同步及时。',\n      date: new Date('2024-03-06'),\n    },\n  },\n];\n\nconst mockSkills = [\n  {\n    id: '1',\n    name: 'React.js',\n    level: 5,\n    category: '前端开发',\n    experience: '5年以上',\n    description: '精通React生态系统，包括Hooks、Redux、Next.js等',\n    endorsements: 23,\n    featured: true,\n  },\n  {\n    id: '2',\n    name: 'Node.js',\n    level: 5,\n    category: '后端开发',\n    experience: '4年以上',\n    description: '熟练使用Node.js构建高性能后端服务',\n    endorsements: 18,\n  },\n  {\n    id: '3',\n    name: 'TypeScript',\n    level: 4,\n    category: '编程语言',\n    experience: '3年以上',\n    description: '熟练使用TypeScript进行类型安全的开发',\n    endorsements: 15,\n  },\n  {\n    id: '4',\n    name: 'UI/UX设计',\n    level: 4,\n    category: '设计',\n    experience: '3年以上',\n    description: '具备良好的设计审美和用户体验思维',\n    endorsements: 12,\n  },\n  {\n    id: '5',\n    name: 'MongoDB',\n    level: 4,\n    category: '数据库',\n    experience: '3年以上',\n    description: '熟练使用MongoDB进行数据建模和优化',\n    endorsements: 10,\n  },\n];\n\nconst mockBadges = [\n  {\n    type: 'identity' as const,\n    label: '身份认证',\n    description: '已通过实名认证',\n    verified: true,\n    verifiedDate: new Date('2020-03-20'),\n  },\n  {\n    type: 'email' as const,\n    label: '邮箱认证',\n    description: '已验证邮箱地址',\n    verified: true,\n    verifiedDate: new Date('2020-03-15'),\n  },\n  {\n    type: 'phone' as const,\n    label: '手机认证',\n    description: '已验证手机号码',\n    verified: true,\n    verifiedDate: new Date('2020-03-16'),\n  },\n  {\n    type: 'professional' as const,\n    label: '专业认证',\n    description: '已通过专业技能认证',\n    verified: true,\n    verifiedDate: new Date('2020-06-15'),\n  },\n  {\n    type: 'top_rated' as const,\n    label: '顶级卖家',\n    description: '平台评分最高的卖家之一',\n    verified: true,\n    verifiedDate: new Date('2023-01-01'),\n  },\n];\n\nconst UserProfilePage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [activeTab, setActiveTab] = useState<'services' | 'portfolio' | 'reviews'>('services');\n\n  // In a real app, fetch user data based on id\n  const profileData = mockProfileData;\n\n  const handleContactClick = () => {\n    // Handle contact action\n    console.log('Contact seller');\n  };\n\n  const handleFollowClick = () => {\n    setIsFollowing(!isFollowing);\n  };\n\n  const handleShare = () => {\n    // Handle share action\n    if (navigator.share) {\n      navigator.share({\n        title: `${profileData.name} - ${profileData.title}`,\n        text: profileData.bio,\n        url: window.location.href,\n      });\n    }\n  };\n\n  const handleBookmark = () => {\n    // Handle bookmark action\n    console.log('Bookmark profile');\n  };\n\n  const handleReport = () => {\n    // Handle report action\n    console.log('Report profile');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* SEO Meta Tags */}\n      <Helmet>\n        <title>{profileData.name} - {profileData.title} | 自由职业者平台</title>\n        <meta name=\"description\" content={profileData.bio} />\n        <meta name=\"keywords\" content={`${profileData.name}, ${profileData.title}, 全栈开发, UI设计, React, Node.js`} />\n        <meta property=\"og:title\" content={`${profileData.name} - ${profileData.title}`} />\n        <meta property=\"og:description\" content={profileData.bio} />\n        <meta property=\"og:image\" content={profileData.avatar} />\n        <meta property=\"og:url\" content={window.location.href} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Helmet>\n\n      {/* Profile Header */}\n      <ProfileHeader\n        profile={profileData}\n        onContactClick={handleContactClick}\n        onFollowClick={handleFollowClick}\n        isFollowing={isFollowing}\n        isOwnProfile={false}\n      />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Contact Card */}\n            <ContactCard\n              profile={{\n                name: profileData.name,\n                avatar: profileData.avatar,\n                responseTime: profileData.responseTime,\n                lastOnline: new Date(),\n                languages: profileData.languages,\n                contactMethods: {\n                  email: true,\n                  phone: true,\n                  chat: true,\n                },\n              }}\n              onContactClick={handleContactClick}\n            />\n\n            {/* Stats Overview */}\n            <div className=\"space-y-4\">\n              <StatsCard\n                title=\"总收入\"\n                value={`¥${(profileData.totalEarnings! / 10000).toFixed(1)}万`}\n                icon={DollarSign}\n                iconColor=\"text-green-600\"\n                bgColor=\"bg-green-50\"\n              />\n              <StatsCard\n                title=\"服务客户\"\n                value={profileData.totalClients!}\n                icon={Users}\n                iconColor=\"text-blue-600\"\n                bgColor=\"bg-blue-50\"\n              />\n              <StatsCard\n                title=\"评分\"\n                value={profileData.rating.toFixed(1)}\n                icon={Star}\n                iconColor=\"text-yellow-600\"\n                bgColor=\"bg-yellow-50\"\n              />\n              <StatsCard\n                title=\"回头客率\"\n                value={`${profileData.repeatClientRate}%`}\n                icon={TrendingUp}\n                iconColor=\"text-purple-600\"\n                bgColor=\"bg-purple-50\"\n              />\n            </div>\n\n            {/* Verification Badges */}\n            <VerificationBadges\n              badges={mockBadges}\n              layout=\"compact\"\n              showUnverified={false}\n            />\n\n            {/* Social Proof */}\n            <SocialProof\n              profile={profileData}\n              layout=\"compact\"\n              showEarnings={true}\n            />\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3 space-y-8\">\n            {/* Action Bar */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={() => setActiveTab('services')}\n                    className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${\n                      activeTab === 'services'\n                        ? 'bg-red-500 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    服务 ({mockServices.length})\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('portfolio')}\n                    className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${\n                      activeTab === 'portfolio'\n                        ? 'bg-red-500 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    作品集 ({mockPortfolios.length})\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('reviews')}\n                    className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${\n                      activeTab === 'reviews'\n                        ? 'bg-red-500 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    评价 ({mockReviews.length})\n                  </button>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={handleShare}\n                    className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n                  >\n                    <Share2 className=\"w-5 h-5\" />\n                  </button>\n                  <button\n                    onClick={handleBookmark}\n                    className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n                  >\n                    <Bookmark className=\"w-5 h-5\" />\n                  </button>\n                  <button\n                    onClick={handleReport}\n                    className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n                  >\n                    <Flag className=\"w-5 h-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* Skills Display */}\n            <SkillsDisplay\n              skills={mockSkills}\n              title=\"技能专长\"\n              showEndorsements={true}\n              showLevel={true}\n              groupByCategory={true}\n            />\n\n            {/* Tab Content */}\n            {activeTab === 'services' && (\n              <ServiceShowcase\n                services={mockServices}\n                title=\"提供服务\"\n                showSearch={true}\n                showFilters={true}\n                onServiceClick={(service) => console.log('View service:', service)}\n                onContactClick={(seller) => console.log('Contact seller:', seller)}\n              />\n            )}\n\n            {activeTab === 'portfolio' && (\n              <PortfolioGallery\n                portfolios={mockPortfolios}\n                title=\"作品展示\"\n                showFilters={true}\n                showCategories={true}\n                onPortfolioClick={(portfolio) => console.log('View portfolio:', portfolio)}\n              />\n            )}\n\n            {activeTab === 'reviews' && (\n              <ReviewSummary\n                reviews={mockReviews}\n                title=\"客户评价\"\n                showFilters={true}\n                showSearch={true}\n                onReviewClick={(review) => console.log('View review:', review)}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfilePage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/services/CreateServicePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleAutoSave'. Either include it or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [formData, handleAutoSave]","fix":{"range":[4023,4033],"text":"[formData, handleAutoSave]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":193,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":349,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":349,"endColumn":39},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'steps'. Either include it or remove the dependency array.","line":386,"column":6,"nodeType":"ArrayExpression","endLine":386,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [formData, currentStep, steps]","fix":{"range":[10533,10556],"text":"[formData, currentStep, steps]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { cn } from '@/utils';\nimport { ServiceFormData, FormValidationError, ServiceDraft, ServiceCategory } from '@/types/services';\nimport {\n  BasicInfoForm,\n  PricingPackages,\n  RequirementsForm,\n  MediaUpload,\n  SEOSettings,\n  ReviewAndPublish,\n  FormProgress,\n  DraftManager,\n  ServicePreview\n} from '@/components/services/creation';\nimport Button from '@/components/ui/Button';\nimport { storage } from '@/utils';\n\n// Mock data - in real app, this would come from API\nconst mockCategories: ServiceCategory[] = [\n  {\n    id: 'design',\n    name: '设计服务',\n    icon: '🎨',\n    subcategories: [\n      { id: 'logo', name: 'Logo设计', parentId: 'design' },\n      { id: 'ui', name: 'UI/UX设计', parentId: 'design' },\n      { id: 'graphic', name: '平面设计', parentId: 'design' },\n      { id: 'web', name: '网页设计', parentId: 'design' }\n    ]\n  },\n  {\n    id: 'development',\n    name: '开发服务',\n    icon: '💻',\n    subcategories: [\n      { id: 'web-dev', name: '网站开发', parentId: 'development' },\n      { id: 'mobile', name: '移动应用', parentId: 'development' },\n      { id: 'backend', name: '后端开发', parentId: 'development' },\n      { id: 'database', name: '数据库', parentId: 'development' }\n    ]\n  },\n  {\n    id: 'content',\n    name: '内容创作',\n    icon: '✍️',\n    subcategories: [\n      { id: 'writing', name: '文案写作', parentId: 'content' },\n      { id: 'translation', name: '翻译服务', parentId: 'content' },\n      { id: 'video', name: '视频制作', parentId: 'content' },\n      { id: 'audio', name: '音频制作', parentId: 'content' }\n    ]\n  },\n  {\n    id: 'marketing',\n    name: '营销推广',\n    icon: '📱',\n    subcategories: [\n      { id: 'seo', name: 'SEO优化', parentId: 'marketing' },\n      { id: 'social', name: '社交媒体', parentId: 'marketing' },\n      { id: 'ads', name: '广告投放', parentId: 'marketing' },\n      { id: 'email', name: '邮件营销', parentId: 'marketing' }\n    ]\n  }\n];\n\nconst CreateServicePage: React.FC = () => {\n  const navigate = useNavigate();\n\n  // Form state\n  const [currentStep, setCurrentStep] = useState(0);\n  const [formData, setFormData] = useState<Partial<ServiceFormData>>({});\n  const [drafts, setDrafts] = useState<ServiceDraft[]>([]);\n  const [isAutoSaving, setIsAutoSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [errors, setErrors] = useState<FormValidationError[]>([]);\n  const [warnings, setWarnings] = useState<FormValidationError[]>([]);\n  const [isValid, setIsValid] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Steps configuration\n  const steps = [\n    {\n      id: 'basic',\n      title: '基本信息',\n      description: '标题、分类、描述',\n      component: BasicInfoForm,\n      validation: validateBasicInfo\n    },\n    {\n      id: 'pricing',\n      title: '定价套餐',\n      description: '价格、交付时间',\n      component: PricingPackages,\n      validation: validatePricing\n    },\n    {\n      id: 'requirements',\n      title: '需求交付',\n      description: '需求清单、交付物',\n      component: RequirementsForm,\n      validation: validateRequirements\n    },\n    {\n      id: 'media',\n      title: '媒体资料',\n      description: '图片、视频、文档',\n      component: MediaUpload,\n      validation: validateMedia\n    },\n    {\n      id: 'seo',\n      title: 'SEO优化',\n      description: '标题、描述、关键词',\n      component: SEOSettings,\n      validation: validateSEO\n    },\n    {\n      id: 'review',\n      title: '审核发布',\n      description: '预览、确认、发布',\n      component: ReviewAndPublish,\n      validation: () => []\n    }\n  ];\n\n  // Load drafts from localStorage on mount\n  useEffect(() => {\n    const savedDrafts = storage.get<ServiceDraft[]>('service_drafts', []);\n    setDrafts(savedDrafts);\n  }, []);\n\n  // Auto-save functionality\n  useEffect(() => {\n    const autoSaveInterval = setInterval(() => {\n      if (formData.title || formData.description) {\n        handleAutoSave();\n      }\n    }, 30000); // Auto-save every 30 seconds\n\n    return () => clearInterval(autoSaveInterval);\n  }, [formData]);\n\n  // Validation functions\n  function validateBasicInfo(data: Partial<ServiceFormData>): FormValidationError[] {\n    const validationErrors: FormValidationError[] = [];\n\n    if (!data.title || data.title.trim().length < 10) {\n      validationErrors.push({\n        field: 'title',\n        message: '服务标题至少需要10个字符',\n        type: 'error'\n      });\n    }\n\n    if (!data.category) {\n      validationErrors.push({\n        field: 'category',\n        message: '请选择服务分类',\n        type: 'error'\n      });\n    }\n\n    if (!data.subcategory) {\n      validationErrors.push({\n        field: 'subcategory',\n        message: '请选择服务子分类',\n        type: 'error'\n      });\n    }\n\n    if (!data.description || data.description.replace(/<[^>]*>/g, '').length < 50) {\n      validationErrors.push({\n        field: 'description',\n        message: '服务描述至少需要50个字符',\n        type: 'error'\n      });\n    }\n\n    return validationErrors;\n  }\n\n  function validatePricing(data: Partial<ServiceFormData>): FormValidationError[] {\n    const validationErrors: FormValidationError[] = [];\n\n    if (!data.packages || data.packages.length === 0) {\n      validationErrors.push({\n        field: 'packages',\n        message: '至少需要设置一个定价套餐',\n        type: 'error'\n      });\n    } else {\n      data.packages.forEach((pkg, index) => {\n        if (!pkg.name || pkg.name.trim().length < 2) {\n          validationErrors.push({\n            field: `packages.${pkg.id}.name`,\n            message: '套餐名称不能为空',\n            type: 'error'\n          });\n        }\n\n        if (pkg.price <= 0) {\n          validationErrors.push({\n            field: `packages.${pkg.id}.price`,\n            message: '套餐价格必须大于0',\n            type: 'error'\n          });\n        }\n\n        if (pkg.deliveryTime <= 0) {\n          validationErrors.push({\n            field: `packages.${pkg.id}.deliveryTime`,\n            message: '交付时间必须大于0',\n            type: 'error'\n          });\n        }\n      });\n    }\n\n    return validationErrors;\n  }\n\n  function validateRequirements(data: Partial<ServiceFormData>): FormValidationError[] {\n    const validationErrors: FormValidationError[] = [];\n\n    if (!data.requirements || data.requirements.length === 0) {\n      validationErrors.push({\n        field: 'requirements',\n        message: '请至少添加一个客户需求',\n        type: 'warning'\n      });\n    }\n\n    if (!data.deliverables || data.deliverables.length === 0) {\n      validationErrors.push({\n        field: 'deliverables',\n        message: '请至少添加一个交付物',\n        type: 'warning'\n      });\n    }\n\n    return validationErrors;\n  }\n\n  function validateMedia(data: Partial<ServiceFormData>): FormValidationError[] {\n    const validationErrors: FormValidationError[] = [];\n\n    if (!data.images || data.images.length === 0) {\n      validationErrors.push({\n        field: 'images',\n        message: '建议至少上传一张服务展示图片',\n        type: 'warning'\n      });\n    }\n\n    return validationErrors;\n  }\n\n  function validateSEO(data: Partial<ServiceFormData>): FormValidationError[] {\n    const validationErrors: FormValidationError[] = [];\n\n    if (!data.seoTitle || data.seoTitle.length < 30) {\n      validationErrors.push({\n        field: 'seoTitle',\n        message: 'SEO标题建议至少30个字符',\n        type: 'warning'\n      });\n    }\n\n    if (!data.seoDescription || data.seoDescription.length < 120) {\n      validationErrors.push({\n        field: 'seoDescription',\n        message: 'SEO描述建议至少120个字符',\n        type: 'warning'\n      });\n    }\n\n    if (!data.keywords || data.keywords.length < 3) {\n      validationErrors.push({\n        field: 'keywords',\n        message: '建议至少添加3个SEO关键词',\n        type: 'warning'\n      });\n    }\n\n    return validationErrors;\n  }\n\n  // Form operations\n  const handleAutoSave = useCallback(async () => {\n    setIsAutoSaving(true);\n    try {\n      const draft: ServiceDraft = {\n        id: `draft_${Date.now()}`,\n        title: formData.title || '未命名草稿',\n        data: formData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        step: currentStep\n      };\n\n      // Keep only the latest 10 drafts\n      const updatedDrafts = [draft, ...drafts.filter(d => d.id !== draft.id)].slice(0, 10);\n      setDrafts(updatedDrafts);\n      storage.set('service_drafts', updatedDrafts);\n      setLastSaved(new Date());\n    } finally {\n      setIsAutoSaving(false);\n    }\n  }, [formData, currentStep, drafts]);\n\n  const handleLoadDraft = (draft: ServiceDraft) => {\n    setFormData(draft.data);\n    setCurrentStep(draft.step);\n  };\n\n  const handleDeleteDraft = (draftId: string) => {\n    const updatedDrafts = drafts.filter(d => d.id !== draftId);\n    setDrafts(updatedDrafts);\n    storage.set('service_drafts', updatedDrafts);\n  };\n\n  const handleStepChange = (stepIndex: number) => {\n    // Validate current step before moving\n    const currentValidation = steps[currentStep].validation(formData);\n    const stepErrors = currentValidation.filter(e => e.type === 'error');\n\n    if (stepErrors.length > 0 && stepIndex > currentStep) {\n      setErrors(stepErrors);\n      return;\n    }\n\n    setCurrentStep(stepIndex);\n    setErrors([]);\n  };\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      handleStepChange(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      handleStepChange(currentStep - 1);\n    }\n  };\n\n  const handlePublish = async (options: { publishImmediately: boolean; publishAt?: Date; status: 'active' | 'draft' | 'paused' }) => {\n    setIsSubmitting(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Clear drafts after successful publish\n      storage.remove('service_drafts');\n      setDrafts([]);\n\n      // Navigate to service management page\n      navigate('/services/manage', {\n        state: { message: '服务发布成功！' }\n      });\n    } catch (error) {\n      console.error('Publish failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSaveDraft = () => {\n    handleAutoSave();\n  };\n\n  // Validate current step\n  useEffect(() => {\n    const currentValidation = steps[currentStep].validation(formData);\n    setErrors(currentValidation.filter(e => e.type === 'error'));\n    setWarnings(currentValidation.filter(e => e.type === 'warning'));\n\n    // Check if form is overall valid\n    const allErrors: FormValidationError[] = [];\n    steps.forEach(step => {\n      allErrors.push(...step.validation(formData).filter(e => e.type === 'error'));\n    });\n    setIsValid(allErrors.length === 0);\n  }, [formData, currentStep]);\n\n  // Render current step component\n  const CurrentStepComponent = steps[currentStep].component;\n  const formProgressSteps = steps.map((step, index) => ({\n    id: step.id,\n    title: step.title,\n    description: step.description,\n    isCompleted: index < currentStep,\n    isCurrent: index === currentStep,\n    isValid: index < currentStep || step.validation(formData).filter(e => e.type === 'error').length === 0,\n    hasError: index === currentStep && errors.length > 0\n  }));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                type=\"button\"\n                onClick={() => navigate(-1)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n              </button>\n              <h1 className=\"text-xl font-semibold text-gray-900\">创建新服务</h1>\n            </div>\n\n            <DraftManager\n              drafts={drafts}\n              onLoadDraft={handleLoadDraft}\n              onDeleteDraft={handleDeleteDraft}\n              onSaveDraft={handleSaveDraft}\n              currentData={formData}\n              autoSave={true}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Progress */}\n        <div className=\"mb-8\">\n          <FormProgress\n            steps={formProgressSteps}\n            currentStep={currentStep}\n            onStepClick={handleStepChange}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Form */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n              <div className=\"p-6\">\n                <CurrentStepComponent\n                  data={formData}\n                  onChange={setFormData}\n                  categories={mockCategories}\n                  errors={errors}\n                  warnings={warnings}\n                  isValid={isValid}\n                  onPublish={handlePublish}\n                  onSaveDraft={handleSaveDraft}\n                  disabled={isSubmitting}\n                />\n              </div>\n\n              {/* Navigation */}\n              {currentStep !== steps.length - 1 && (\n                <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-lg\">\n                  <div className=\"flex justify-between\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={handlePrevious}\n                      disabled={currentStep === 0 || isSubmitting}\n                    >\n                      上一步\n                    </Button>\n\n                    <div className=\"flex items-center space-x-4\">\n                      {isAutoSaving && (\n                        <span className=\"text-sm text-gray-500\">自动保存中...</span>\n                      )}\n                      {lastSaved && !isAutoSaving && (\n                        <span className=\"text-sm text-gray-500\">\n                          已保存 {lastSaved.toLocaleTimeString()}\n                        </span>\n                      )}\n                    </div>\n\n                    <Button\n                      onClick={handleNext}\n                      disabled={errors.length > 0 || isSubmitting}\n                    >\n                      {currentStep === steps.length - 2 ? '去发布' : '下一步'}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Preview Panel */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-8\">\n              <ServicePreview\n                service={formData as ServiceFormData}\n                preview={{\n                  service: formData as ServiceFormData,\n                  isValid,\n                  errors,\n                  warnings,\n                  suggestions: []\n                }}\n                onEdit={handleStepChange}\n                disabled={isSubmitting}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateServicePage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/services/ManageServicesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServiceDraft' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is defined but never used.","line":5,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { cn } from '@/utils';\nimport { ServiceFormData, ServiceDraft } from '@/types/services';\nimport { formatCurrency, formatDate, formatRelativeTime } from '@/utils';\nimport Button from '@/components/ui/Button';\n\n// Mock data - in real app, this would come from API\ninterface Service extends ServiceFormData {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  views: number;\n  orders: number;\n  rating: number;\n  reviews: number;\n  revenue: number;\n}\n\nconst mockServices: Service[] = [\n  {\n    id: '1',\n    title: '专业Logo设计服务',\n    category: '设计服务',\n    subcategory: 'Logo设计',\n    description: '提供专业的品牌Logo设计服务，包含多个设计方案和修改机会。',\n    tags: ['Logo设计', '品牌设计', 'VI设计'],\n    packages: [\n      {\n        id: 'pkg1',\n        name: '基础版',\n        description: '2个设计方案，3次修改',\n        price: 299,\n        deliveryTime: 3,\n        revisions: 3,\n        features: ['2个原创设计', '3次修改机会', '源文件提供', '商用授权'],\n        isPopular: false\n      },\n      {\n        id: 'pkg2',\n        name: '标准版',\n        description: '5个设计方案，无限修改',\n        price: 599,\n        deliveryTime: 5,\n        revisions: 10,\n        features: ['5个原创设计', '无限修改', '全套VI文件', '品牌指导手册', '优先支持'],\n        isPopular: true\n      }\n    ],\n    requirements: ['公司名称', '行业类型', '设计风格偏好', '参考案例'],\n    deliverables: ['AI源文件', 'PNG文件', 'PDF文件', '使用说明'],\n    revisionCount: 3,\n    deliveryTime: 3,\n    images: [],\n    videos: [],\n    documents: [],\n    seoTitle: '专业Logo设计服务 - 品牌标识定制设计',\n    seoDescription: '专业的Logo设计服务，提供多个原创设计方案，支持多次修改，包含源文件和商用授权。',\n    keywords: ['Logo设计', '品牌设计', 'VI设计', '商标设计'],\n    status: 'active',\n    featured: true,\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2024-01-20'),\n    views: 1250,\n    orders: 45,\n    rating: 4.8,\n    reviews: 23,\n    revenue: 18900\n  },\n  {\n    id: '2',\n    title: '网站UI/UX设计服务',\n    category: '设计服务',\n    subcategory: 'UI/UX设计',\n    description: '专业的网站界面设计服务，注重用户体验和视觉效果。',\n    tags: ['UI设计', 'UX设计', '网页设计'],\n    packages: [\n      {\n        id: 'pkg3',\n        name: '企业官网',\n        description: '5个页面设计，响应式布局',\n        price: 2999,\n        deliveryTime: 7,\n        revisions: 3,\n        features: ['首页设计', '关于页面', '服务页面', '联系页面', '响应式设计'],\n        isPopular: true\n      }\n    ],\n    requirements: ['网站类型', '目标用户', '功能需求', '参考网站'],\n    deliverables: ['设计稿文件', '交互原型', '设计规范'],\n    revisionCount: 3,\n    deliveryTime: 7,\n    images: [],\n    videos: [],\n    documents: [],\n    seoTitle: '网站UI/UX设计服务 - 专业界面设计',\n    seoDescription: '专业的网站UI/UX设计服务，提供完整的界面设计方案，包含响应式设计和交互原型。',\n    keywords: ['UI设计', 'UX设计', '网页设计', '界面设计'],\n    status: 'active',\n    featured: false,\n    createdAt: new Date('2024-01-10'),\n    updatedAt: new Date('2024-01-18'),\n    views: 890,\n    orders: 12,\n    rating: 4.9,\n    reviews: 8,\n    revenue: 35988\n  },\n  {\n    id: '3',\n    title: '移动应用开发服务',\n    category: '开发服务',\n    subcategory: '移动应用',\n    description: 'iOS和Android原生应用开发服务。',\n    tags: ['APP开发', 'iOS开发', 'Android开发'],\n    packages: [\n      {\n        id: 'pkg4',\n        name: '基础版',\n        description: '单平台应用开发',\n        price: 15000,\n        deliveryTime: 30,\n        revisions: 2,\n        features: ['iOS或Android开发', '基础功能实现', '应用上架支持'],\n        isPopular: false\n      }\n    ],\n    requirements: ['应用功能需求', '设计稿', '目标平台'],\n    deliverables: ['APP安装包', '源代码', '技术文档'],\n    revisionCount: 2,\n    deliveryTime: 30,\n    images: [],\n    videos: [],\n    documents: [],\n    seoTitle: '移动应用开发服务 - iOS/Android APP开发',\n    seoDescription: '专业的移动应用开发服务，支持iOS和Android平台，提供完整的应用开发和技术支持。',\n    keywords: ['APP开发', 'iOS开发', 'Android开发', '移动应用'],\n    status: 'draft',\n    featured: false,\n    createdAt: new Date('2024-01-05'),\n    updatedAt: new Date('2024-01-05'),\n    views: 120,\n    orders: 0,\n    rating: 0,\n    reviews: 0,\n    revenue: 0\n  }\n];\n\ntype SortOption = 'newest' | 'oldest' | 'popular' | 'revenue' | 'rating';\ntype FilterOption = 'all' | 'active' | 'draft' | 'paused' | 'inactive';\n\nconst ManageServicesPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [services, setServices] = useState<Service[]>(mockServices);\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<FilterOption>('all');\n  const [sortBy, setSortBy] = useState<SortOption>('newest');\n  const [showBulkActions, setShowBulkActions] = useState(false);\n\n  // Show success message if coming from create page\n  const [showMessage, setShowMessage] = useState(false);\n  useEffect(() => {\n    if (location.state?.message) {\n      setShowMessage(true);\n      const timer = setTimeout(() => setShowMessage(false), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [location.state]);\n\n  // Filter and sort services\n  const filteredServices = services\n    .filter(service => {\n      // Search filter\n      if (searchTerm && !service.title.toLowerCase().includes(searchTerm.toLowerCase()) &&\n          !service.description.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return false;\n      }\n\n      // Status filter\n      if (filterStatus !== 'all' && service.status !== filterStatus) {\n        return false;\n      }\n\n      return true;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return b.updatedAt.getTime() - a.updatedAt.getTime();\n        case 'oldest':\n          return a.updatedAt.getTime() - b.updatedAt.getTime();\n        case 'popular':\n          return b.views - a.views;\n        case 'revenue':\n          return b.revenue - a.revenue;\n        case 'rating':\n          return b.rating - a.rating;\n        default:\n          return 0;\n      }\n    });\n\n  // Calculate statistics\n  const stats = {\n    total: services.length,\n    active: services.filter(s => s.status === 'active').length,\n    draft: services.filter(s => s.status === 'draft').length,\n    paused: services.filter(s => s.status === 'paused').length,\n    totalRevenue: services.reduce((sum, s) => sum + s.revenue, 0),\n    totalOrders: services.reduce((sum, s) => sum + s.orders, 0),\n    totalViews: services.reduce((sum, s) => sum + s.views, 0)\n  };\n\n  const handleSelectService = (serviceId: string) => {\n    setSelectedServices(prev =>\n      prev.includes(serviceId)\n        ? prev.filter(id => id !== serviceId)\n        : [...prev, serviceId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    if (selectedServices.length === filteredServices.length) {\n      setSelectedServices([]);\n    } else {\n      setSelectedServices(filteredServices.map(s => s.id));\n    }\n  };\n\n  const handleBulkAction = (action: 'activate' | 'pause' | 'delete' | 'duplicate') => {\n    // Handle bulk actions\n    console.log(`Bulk action: ${action}`, selectedServices);\n    setSelectedServices([]);\n  };\n\n  const handleStatusChange = (serviceId: string, newStatus: Service['status']) => {\n    setServices(prev =>\n      prev.map(service =>\n        service.id === serviceId\n          ? { ...service, status: newStatus, updatedAt: new Date() }\n          : service\n      )\n    );\n  };\n\n  const handleDeleteService = (serviceId: string) => {\n    if (window.confirm('确定要删除这个服务吗？此操作不可恢复。')) {\n      setServices(prev => prev.filter(s => s.id !== serviceId));\n    }\n  };\n\n  const handleDuplicateService = (serviceId: string) => {\n    const service = services.find(s => s.id === serviceId);\n    if (service) {\n      const newService: Service = {\n        ...service,\n        id: Date.now().toString(),\n        title: `${service.title} (副本)`,\n        status: 'draft',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        views: 0,\n        orders: 0,\n        rating: 0,\n        reviews: 0,\n        revenue: 0\n      };\n      setServices(prev => [newService, ...prev]);\n    }\n  };\n\n  const getStatusBadge = (status: Service['status']) => {\n    const styles = {\n      active: 'bg-green-100 text-green-800',\n      draft: 'bg-gray-100 text-gray-800',\n      paused: 'bg-yellow-100 text-yellow-800',\n      inactive: 'bg-red-100 text-red-800'\n    };\n\n    const labels = {\n      active: '已发布',\n      draft: '草稿',\n      paused: '已暂停',\n      inactive: '已下架'\n    };\n\n    return (\n      <span className={cn('px-2 py-1 text-xs font-medium rounded-full', styles[status])}>\n        {labels[status]}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">服务管理</h1>\n              <span className=\"text-sm text-gray-500\">\n                共 {stats.total} 个服务\n              </span>\n            </div>\n            <Button onClick={() => navigate('/services/create')}>\n              创建新服务\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Success Message */}\n      {showMessage && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <svg className=\"w-5 h-5 text-green-600 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n              <span className=\"text-green-800\">{location.state?.message}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 bg-blue-100 rounded-lg p-3\">\n                <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">总收入</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(stats.totalRevenue)}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 bg-green-100 rounded-lg p-3\">\n                <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">总订单</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalOrders}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 bg-purple-100 rounded-lg p-3\">\n                <svg className=\"w-6 h-6 text-purple-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">总浏览</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalViews.toLocaleString()}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 bg-yellow-100 rounded-lg p-3\">\n                <svg className=\"w-6 h-6 text-yellow-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">活跃服务</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.active}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4 mb-6\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder=\"搜索服务...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 w-full sm:w-64\"\n                />\n                <svg\n                  className=\"absolute left-3 top-2.5 w-5 h-5 text-gray-400\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </div>\n\n              {/* Status Filter */}\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value as FilterOption)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">所有状态</option>\n                <option value=\"active\">已发布</option>\n                <option value=\"draft\">草稿</option>\n                <option value=\"paused\">已暂停</option>\n                <option value=\"inactive\">已下架</option>\n              </select>\n\n              {/* Sort */}\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as SortOption)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"newest\">最新更新</option>\n                <option value=\"oldest\">最早更新</option>\n                <option value=\"popular\">最受欢迎</option>\n                <option value=\"revenue\">收入最高</option>\n                <option value=\"rating\">评分最高</option>\n              </select>\n            </div>\n\n            {/* Bulk Actions */}\n            {selectedServices.length > 0 && (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-gray-600\">\n                  已选择 {selectedServices.length} 个服务\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction('activate')}\n                >\n                  批量激活\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction('pause')}\n                >\n                  批量暂停\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction('delete')}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  批量删除\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Services Table */}\n        <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n          {filteredServices.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <svg\n                className=\"mx-auto h-12 w-12 text-gray-400 mb-3\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n              </svg>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无服务</h3>\n              <p className=\"text-gray-500 mb-4\">开始创建您的第一个服务吧</p>\n              <Button onClick={() => navigate('/services/create')}>\n                创建新服务\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedServices.length === filteredServices.length}\n                        onChange={handleSelectAll}\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      />\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      服务信息\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      状态\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      价格\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      统计\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      更新时间\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      操作\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredServices.map((service) => (\n                    <tr key={service.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedServices.includes(service.id)}\n                          onChange={() => handleSelectService(service.id)}\n                          className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                        />\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {service.title}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {service.category} › {service.subcategory}\n                          </div>\n                          {service.featured && (\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800 mt-1\">\n                              推荐\n                            </span>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        {getStatusBadge(service.status)}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900\">\n                          {formatCurrency(service.packages[0]?.price || 0)}\n                        </div>\n                        {service.packages.length > 1 && (\n                          <div className=\"text-xs text-gray-500\">\n                            {service.packages.length} 个套餐\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900 space-y-1\">\n                          <div>📊 {service.orders} 订单</div>\n                          <div>👁️ {service.views} 浏览</div>\n                          {service.rating > 0 && (\n                            <div>⭐ {service.rating} ({service.reviews})</div>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900\">\n                          {formatRelativeTime(service.updatedAt)}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 text-right text-sm font-medium\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => navigate(`/services/${service.id}/edit`)}\n                          >\n                            编辑\n                          </Button>\n                          <div className=\"relative\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setShowBulkActions(!showBulkActions)}\n                            >\n                              更多\n                            </Button>\n                            {/* Dropdown Menu */}\n                            {showBulkActions && (\n                              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-10\">\n                                <div className=\"py-1\">\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => handleDuplicateService(service.id)}\n                                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                                  >\n                                    复制服务\n                                  </button>\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => navigate(`/services/${service.id}/analytics`)}\n                                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                                  >\n                                    查看分析\n                                  </button>\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => navigate(`/services/${service.id}`)}\n                                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                                  >\n                                    预览服务\n                                  </button>\n                                  <div className=\"border-t border-gray-100\"></div>\n                                  {service.status === 'active' && (\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => handleStatusChange(service.id, 'paused')}\n                                      className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                                    >\n                                      暂停服务\n                                    </button>\n                                  )}\n                                  {service.status === 'paused' && (\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => handleStatusChange(service.id, 'active')}\n                                      className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                                    >\n                                      激活服务\n                                    </button>\n                                  )}\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => handleDeleteService(service.id)}\n                                    className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\"\n                                  >\n                                    删除服务\n                                  </button>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageServicesPage;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/services/ServiceDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServicePackage' is defined but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Review' is defined but never used.","line":32,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":40,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is assigned a value but never used.","line":40,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'recentlyViewed' is assigned a value but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":78,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":107,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadService'. Either include it or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadService, serviceId]","fix":{"range":[5292,5303],"text":"[loadService, serviceId]"}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { toast } from 'react-hot-toast';\nimport {\n  Heart,\n  Share2,\n  Bookmark,\n  Eye,\n  MessageCircle,\n  ShoppingCart,\n  Star,\n  TrendingUp,\n  Users,\n  Clock\n} from 'lucide-react';\n\n// Components\nimport { BreadcrumbNavigation, useServiceBreadcrumbs } from '@/components/services/BreadcrumbNavigation';\nimport { ServiceGallery } from '@/components/services/ServiceGallery';\nimport { ServicePricing } from '@/components/services/ServicePricing';\nimport { SellerProfileCard } from '@/components/services/SellerProfileCard';\nimport { ServiceDescription } from '@/components/services/ServiceDescription';\nimport { ServiceFAQs } from '@/components/services/ServiceFAQs';\nimport { ServiceReviews } from '@/components/services/ServiceReviews';\nimport { RelatedServices } from '@/components/services/RelatedServices';\nimport { ContactSeller } from '@/components/services/ContactSeller';\nimport { OrderNow } from '@/components/services/OrderNow';\n\n// Services and Types\nimport { serviceService, ServiceDetail } from '@/services/services';\nimport { ServicePackage, Review } from '@/types';\n\n// Hooks\nimport { useI18n } from '@/i18n';\n\nexport const ServiceDetailPage: React.FC = () => {\n  const { serviceId } = useParams<{ serviceId: string }>();\n  const navigate = useNavigate();\n  const { t, formatCurrency, formatDate, formatNumber } = useI18n();\n\n  // State\n  const [service, setService] = useState<ServiceDetail | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedPackage, setSelectedPackage] = useState<number | null>(null);\n  const [isContactModalOpen, setIsContactModalOpen] = useState(false);\n  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false);\n  const [isFavorited, setIsFavorited] = useState(false);\n  const [recentlyViewed, setRecentlyViewed] = useState<number[]>([]);\n\n  // Load service data\n  const loadService = async () => {\n    if (!serviceId) return;\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await serviceService.getServiceDetail(serviceId);\n      if (response.success && response.data) {\n        setService(response.data);\n        setIsFavorited(response.data.isFavorited);\n\n        // Track view\n        serviceService.trackView(serviceId);\n\n        // Add to recently viewed\n        updateRecentlyViewed(response.data.id);\n\n        // Set default package if single package\n        if (response.data.packages.length === 1) {\n          setSelectedPackage(response.data.packages[0].id);\n        }\n      } else {\n        setError(response.error || '服务不存在');\n      }\n    } catch (err) {\n      setError('加载服务信息失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update recently viewed services\n  const updateRecentlyViewed = (serviceId: number) => {\n    const viewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');\n    const updated = [serviceId, ...viewed.filter((id: number) => id !== serviceId)].slice(0, 10);\n    localStorage.setItem('recentlyViewed', JSON.stringify(updated));\n    setRecentlyViewed(updated);\n  };\n\n  // Handle favorite toggle\n  const handleFavoriteToggle = async () => {\n    if (!service || !serviceId) return;\n\n    try {\n      if (isFavorited) {\n        await serviceService.removeFromFavorites(serviceId);\n        setIsFavorited(false);\n        toast.success('已取消收藏');\n      } else {\n        await serviceService.addToFavorites(serviceId);\n        setIsFavorited(true);\n        toast.success('已添加到收藏');\n      }\n    } catch (error) {\n      toast.error('操作失败，请重试');\n    }\n  };\n\n  // Handle share\n  const handleShare = async () => {\n    if (!service) return;\n\n    try {\n      const shareUrl = window.location.href;\n      if (navigator.share) {\n        await navigator.share({\n          title: service.title,\n          text: service.description,\n          url: shareUrl,\n        });\n      } else {\n        await navigator.clipboard.writeText(shareUrl);\n        toast.success('链接已复制到剪贴板');\n      }\n    } catch (error) {\n      console.error('Share failed:', error);\n    }\n  };\n\n  // Handle contact seller\n  const handleContactSeller = () => {\n    setIsContactModalOpen(true);\n  };\n\n  // Handle order now\n  const handleOrderNow = () => {\n    if (!service) return;\n\n    // Check if user is logged in (simplified check)\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      toast.error('请先登录');\n      navigate('/login');\n      return;\n    }\n\n    setIsOrderModalOpen(true);\n  };\n\n  // Handle contact success\n  const handleContactSuccess = (conversationId: number) => {\n    toast.success('消息已发送');\n    navigate(`/messages/${conversationId}`);\n  };\n\n  // Handle order success\n  const handleOrderSuccess = (orderId: number) => {\n    toast.success('订单创建成功');\n    navigate(`/orders/${orderId}`);\n  };\n\n  // Handle package selection\n  const handlePackageSelect = (packageId: number) => {\n    setSelectedPackage(packageId);\n  };\n\n  // Generate breadcrumbs\n  const breadcrumbs = useServiceBreadcrumbs(\n    service?.category.name,\n    service?.subcategory.name,\n    service?.title\n  );\n\n  // Load data on mount\n  useEffect(() => {\n    loadService();\n  }, [serviceId]);\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded w-64 mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"bg-white rounded-lg p-6\">\n                  <div className=\"h-96 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n                </div>\n              </div>\n              <div className=\"space-y-6\">\n                <div className=\"bg-white rounded-lg p-6 h-64\"></div>\n                <div className=\"bg-white rounded-lg p-6 h-96\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error || !service) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-gray-400 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            {error || '服务不存在'}\n          </h2>\n          <button\n            onClick={() => navigate('/services')}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n          >\n            返回服务列表\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* SEO Meta Tags */}\n      <Helmet>\n        <title>{service.title} - 专业服务 | 威客平台</title>\n        <meta name=\"description\" content={service.description.substring(0, 160)} />\n        <meta name=\"keywords\" content={service.tags.join(', ')} />\n        <meta property=\"og:title\" content={service.title} />\n        <meta property=\"og:description\" content={service.description} />\n        <meta property=\"og:image\" content={service.images[0] || '/default-service.jpg'} />\n        <meta property=\"og:url\" content={window.location.href} />\n        <meta property=\"og:type\" content=\"product\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            '@context': 'https://schema.org',\n            '@type': 'Service',\n            name: service.title,\n            description: service.description,\n            provider: {\n              '@type': 'Person',\n              name: service.seller.profile.displayName,\n            },\n            offers: {\n              '@type': 'Offer',\n              price: service.price,\n              priceCurrency: 'CNY',\n            },\n            aggregateRating: {\n              '@type': 'AggregateRating',\n              ratingValue: service.averageRating,\n              reviewCount: service.totalReviews,\n            },\n          })}\n        </script>\n      </Helmet>\n\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Breadcrumb */}\n        <div className=\"container mx-auto px-4 py-4\">\n          <BreadcrumbNavigation items={breadcrumbs} />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"container mx-auto px-4 pb-12\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Left Column - Main Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              {/* Gallery */}\n              <ServiceGallery items={service.gallery} />\n\n              {/* Title and Basic Info */}\n              <div className=\"bg-white rounded-xl p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <h1 className=\"text-2xl lg:text-3xl font-bold text-gray-900 mb-2\">\n                    {service.title}\n                  </h1>\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={handleFavoriteToggle}\n                      className={`p-2 rounded-lg transition-colors duration-200 ${\n                        isFavorited\n                          ? 'bg-red-50 text-red-600'\n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                      }`}\n                      title={isFavorited ? '取消收藏' : '收藏服务'}\n                    >\n                      <Heart className={`w-5 h-5 ${isFavorited ? 'fill-current' : ''}`} />\n                    </button>\n                    <button\n                      onClick={handleShare}\n                      className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors duration-200\"\n                      title=\"分享服务\"\n                    >\n                      <Share2 className=\"w-5 h-5\" />\n                    </button>\n                    <button\n                      className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors duration-200\"\n                      title=\"书签\"\n                    >\n                      <Bookmark className=\"w-5 h-5\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Rating and Stats */}\n                <div className=\"flex items-center space-x-6 mb-4\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                    <span className=\"font-medium text-gray-900\">\n                      {service.averageRating.toFixed(1)}\n                    </span>\n                    <span className=\"text-gray-500\">({formatNumber(service.totalReviews)})</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1 text-gray-600\">\n                    <ShoppingCart className=\"w-4 h-4\" />\n                    <span>{formatNumber(service.orderCount)} 订单</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1 text-gray-600\">\n                    <Eye className=\"w-4 h-4\" />\n                    <span>{formatNumber(service.viewCount)} 浏览</span>\n                  </div>\n                </div>\n\n                {/* Tags */}\n                {service.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {service.tags.map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-3 py-1 bg-blue-50 text-blue-700 text-sm font-medium rounded-full\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Pricing */}\n              <ServicePricing\n                packages={service.packages}\n                selectedPackage={selectedPackage || undefined}\n                onPackageSelect={handlePackageSelect}\n              />\n\n              {/* Description */}\n              <ServiceDescription\n                title=\"服务详情\"\n                description={service.description}\n                features={service.features}\n                requirements={service.requirements.map(req => req.title)}\n                deliveryInfo={`平均交付时间: ${service.deliveryTime}天`}\n                revisions={service.revisions}\n              />\n\n              {/* FAQs */}\n              {service.faqs.length > 0 && (\n                <ServiceFAQs\n                  faqs={service.faqs}\n                  onQuestionClick={(faq) => {\n                    // Could scroll to contact form or open contact modal\n                    console.log('FAQ clicked:', faq);\n                  }}\n                  onHelpfulClick={(faqId) => {\n                    serviceService.markReviewHelpful(faqId.toString());\n                  }}\n                />\n              )}\n\n              {/* Reviews */}\n              <ServiceReviews\n                serviceId={service.id}\n                averageRating={service.averageRating}\n                totalReviews={service.totalReviews}\n              />\n\n              {/* Related Services */}\n              {service.relatedServices.length > 0 && (\n                <RelatedServices\n                  services={service.relatedServices}\n                  title=\"相关服务推荐\"\n                />\n              )}\n            </div>\n\n            {/* Right Column - Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Seller Profile */}\n              <SellerProfileCard\n                seller={service.seller}\n                sellerProfile={service.sellerProfile}\n              />\n\n              {/* Quick Actions */}\n              <div className=\"bg-white rounded-xl p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">快速操作</h3>\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={handleOrderNow}\n                    disabled={!selectedPackage}\n                    className=\"w-full flex items-center justify-center space-x-2 py-3 px-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <ShoppingCart className=\"w-5 h-5\" />\n                    <span>{selectedPackage ? '立即下单' : '请选择套餐'}</span>\n                  </button>\n                  <button\n                    onClick={handleContactSeller}\n                    className=\"w-full flex items-center justify-center space-x-2 py-3 px-4 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n                  >\n                    <MessageCircle className=\"w-5 h-5\" />\n                    <span>联系卖家</span>\n                  </button>\n                </div>\n              </div>\n\n              {/* Service Stats */}\n              <div className=\"bg-white rounded-xl p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">服务统计</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <TrendingUp className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">响应时间</span>\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-900\">\n                      {service.statistics.averageResponseTime}小时\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Users className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">回头客</span>\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-900\">\n                      {service.statistics.repeatCustomers}%\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">准时交付</span>\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-900\">\n                      {service.statistics.onTimeDelivery}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Safety Tips */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6\">\n                <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">安全提示</h3>\n                <ul className=\"text-sm text-blue-800 space-y-2\">\n                  <li>• 请通过平台进行交易和沟通</li>\n                  <li>• 仔细查看卖家评价和服务描述</li>\n                  <li>• 要求卖家提供详细的工作计划</li>\n                  <li>• 不要直接转账到个人账户</li>\n                  <li>• 如有问题，及时联系客服</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Modals */}\n        <ContactSeller\n          serviceId={service.id}\n          serviceTitle={service.title}\n          sellerId={service.seller.id}\n          sellerName={service.seller.profile.displayName}\n          isOpen={isContactModalOpen}\n          onClose={() => setIsContactModalOpen(false)}\n          onSuccess={handleContactSuccess}\n        />\n\n        <OrderNow\n          serviceId={service.id}\n          serviceTitle={service.title}\n          packages={service.packages}\n          requirements={service.requirements}\n          isOpen={isOrderModalOpen}\n          onClose={() => setIsOrderModalOpen(false)}\n          onSuccess={handleOrderSuccess}\n        />\n      </div>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/pages/services/ServicesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":19,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":19,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setViewMode' is assigned a value but never used.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCategories', 'fetchFeaturedServices', 'fetchServices', 'searchParams', 'searchServices', and 'setFilters'. Either include them or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCategories, fetchFeaturedServices, fetchServices, searchParams, searchServices, setFilters]","fix":{"range":[2698,2700],"text":"[fetchCategories, fetchFeaturedServices, fetchServices, searchParams, searchServices, setFilters]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4240,4243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4240,4243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Service, Category } from '@/types';\nimport { useI18n } from '@/i18n';\nimport { useServicesStore } from '@/store/servicesStore';\nimport {\n  SearchBar,\n  ServiceCard,\n  FilterSidebar,\n  SortOptions,\n  QuickViewModal,\n  CategoryCard,\n} from '@/components/services';\nimport { cn } from '@/utils';\n\nexport const ServicesPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { t, formatCurrency } = useI18n();\n\n  const {\n    services,\n    featuredServices,\n    categories,\n    isLoading,\n    isLoadingMore,\n    isRefreshing,\n    error,\n    currentPage,\n    totalPages,\n    totalCount,\n    viewMode,\n    filters,\n    searchQuery,\n    showQuickView,\n    quickViewService,\n    fetchServices,\n    fetchMoreServices,\n    fetchFeaturedServices,\n    fetchCategories,\n    searchServices,\n    setFilters,\n    clearFilters,\n    setSearchQuery,\n    setViewMode,\n    showServiceQuickView,\n    hideQuickView,\n    clearError,\n    resetServices,\n  } = useServicesStore();\n\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  // Initialize data and handle URL parameters\n  useEffect(() => {\n    const initializePage = async () => {\n      try {\n        // Load initial data\n        await Promise.all([\n          fetchCategories(),\n          fetchFeaturedServices(),\n        ]);\n\n        // Parse URL parameters\n        const categoryParam = searchParams.get('category');\n        const searchParam = searchParams.get('search');\n        const minPriceParam = searchParams.get('minPrice');\n        const maxPriceParam = searchParams.get('maxPrice');\n        const ratingParam = searchParams.get('rating');\n\n        // Set filters from URL\n        const urlFilters: any = {};\n        if (categoryParam) urlFilters.category = parseInt(categoryParam);\n        if (minPriceParam) urlFilters.priceMin = parseInt(minPriceParam);\n        if (maxPriceParam) urlFilters.priceMax = parseInt(maxPriceParam);\n        if (ratingParam) urlFilters.rating = parseInt(ratingParam);\n\n        if (Object.keys(urlFilters).length > 0) {\n          setFilters(urlFilters);\n        }\n\n        // Load services\n        if (searchParam) {\n          await searchServices(searchParam, { ...urlFilters });\n        } else {\n          await fetchServices({ ...urlFilters });\n        }\n      } catch (error) {\n        console.error('Failed to initialize services page:', error);\n      } finally {\n        setIsInitialLoad(false);\n      }\n    };\n\n    initializePage();\n  }, []);\n\n  // Load more services on scroll\n  const handleScroll = useCallback(() => {\n    if (isLoadingMore || isRefreshing) return;\n\n    const scrollHeight = document.documentElement.scrollHeight;\n    const scrollTop = document.documentElement.scrollTop;\n    const clientHeight = document.documentElement.clientHeight;\n\n    if (scrollTop + clientHeight >= scrollHeight - 1000) {\n      if (currentPage < totalPages) {\n        fetchMoreServices();\n      }\n    }\n  }, [isLoadingMore, isRefreshing, currentPage, totalPages, fetchMoreServices]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  const handleSearch = async (query: string) => {\n    setSearchQuery(query);\n    resetServices();\n\n    // Update URL\n    const newParams = new URLSearchParams(searchParams);\n    if (query) {\n      newParams.set('search', query);\n    } else {\n      newParams.delete('search');\n    }\n    setSearchParams(newParams);\n\n    if (query) {\n      await searchServices(query);\n    } else {\n      await fetchServices();\n    }\n  };\n\n  const handleCategoryClick = async (category: Category) => {\n    const newFilters = { category: category.id };\n    setFilters(newFilters);\n    resetServices();\n\n    // Update URL\n    const newParams = new URLSearchParams(searchParams);\n    newParams.set('category', category.id.toString());\n    setSearchParams(newParams);\n\n    await fetchServices(newFilters);\n  };\n\n  const handleFilterChange = async (newFilters: any) => {\n    setFilters(newFilters);\n    resetServices();\n\n    // Update URL\n    const newParams = new URLSearchParams(searchParams);\n    Object.entries(newFilters).forEach(([key, value]) => {\n      if (value !== undefined && value !== '') {\n        newParams.set(key, value.toString());\n      } else {\n        newParams.delete(key);\n      }\n    });\n    setSearchParams(newParams);\n\n    if (searchQuery) {\n      await searchServices(searchQuery, newFilters);\n    } else {\n      await fetchServices(newFilters);\n    }\n  };\n\n  const handleClearFilters = async () => {\n    clearFilters();\n    resetServices();\n\n    // Clear URL parameters except search\n    const newParams = new URLSearchParams(searchParams);\n    ['category', 'subcategory', 'minPrice', 'maxPrice', 'rating', 'deliveryTime', 'sellerLevel'].forEach(param => {\n      newParams.delete(param);\n    });\n    setSearchParams(newParams);\n\n    if (searchQuery) {\n      await searchServices(searchQuery);\n    } else {\n      await fetchServices();\n    }\n  };\n\n  const handleRefresh = async () => {\n    resetServices();\n    if (searchQuery) {\n      await searchServices(searchQuery, filters, { refresh: true });\n    } else {\n      await fetchServices({ ...filters, refresh: true });\n    }\n  };\n\n  const handleQuickView = (service: Service) => {\n    showServiceQuickView(service);\n  };\n\n  const handleRetry = () => {\n    clearError();\n    handleRefresh();\n  };\n\n  // Loading skeleton\n  const renderLoadingSkeleton = () => (\n    <div className={cn(\n      'grid gap-6',\n      viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1'\n    )}>\n      {[...Array(8)].map((_, index) => (\n        <div key={index} className={cn(\n          'bg-white rounded-lg shadow-sm overflow-hidden animate-pulse',\n          viewMode === 'list' ? 'flex' : ''\n        )}>\n          {viewMode === 'grid' ? (\n            <>\n              <div className=\"h-48 bg-gray-200\"></div>\n              <div className=\"p-4 space-y-3\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"w-48 h-full min-h-[192px] bg-gray-200\"></div>\n              <div className=\"flex-1 p-4 space-y-3\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  // Empty state\n  const renderEmptyState = () => (\n    <div className=\"text-center py-16\">\n      <div className=\"w-24 h-24 bg-gray-100 rounded-full mx-auto mb-6 flex items-center justify-center\">\n        <svg className=\"w-12 h-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n        未找到相关服务\n      </h3>\n      <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n        {searchQuery || Object.keys(filters).length > 0\n          ? '请尝试调整搜索关键词或筛选条件'\n          : '暂时没有可用的服务，请稍后再试'}\n      </p>\n      <div className=\"space-x-4\">\n        {(searchQuery || Object.keys(filters).length > 0) && (\n          <button\n            onClick={handleClearFilters}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n          >\n            清除筛选条件\n          </button>\n        )}\n        <button\n          onClick={() => navigate('/')}\n          className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n        >\n          返回首页\n        </button>\n      </div>\n    </div>\n  );\n\n  // Error state\n  const renderErrorState = () => (\n    <div className=\"text-center py-16\">\n      <div className=\"w-24 h-24 bg-red-50 rounded-full mx-auto mb-6 flex items-center justify-center\">\n        <svg className=\"w-12 h-12 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n        加载失败\n      </h3>\n      <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n        {error || '获取服务列表时出现错误，请稍后重试'}\n      </p>\n      <button\n        onClick={handleRetry}\n        className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n      >\n        重新加载\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n            {/* Search Bar */}\n            <div className=\"flex-1 max-w-2xl\">\n              <SearchBar\n                placeholder=\"搜索服务...\"\n                onSearch={handleSearch}\n                showSuggestions={true}\n              />\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Filter Toggle (Mobile) */}\n              <button\n                onClick={() => setIsFilterOpen(true)}\n                className=\"lg:hidden px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors duration-200 flex items-center space-x-2\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\" />\n                </svg>\n                <span>筛选</span>\n                {Object.keys(filters).length > 0 && (\n                  <span className=\"bg-blue-600 text-white text-xs px-2 py-1 rounded-full\">\n                    {Object.keys(filters).length}\n                  </span>\n                )}\n              </button>\n\n              {/* Sort Options */}\n              <SortOptions showViewToggle={true} />\n\n              {/* Refresh Button */}\n              <button\n                onClick={handleRefresh}\n                disabled={isRefreshing}\n                className=\"p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200 disabled:opacity-50\"\n                title=\"刷新\"\n              >\n                <svg className={cn('w-5 h-5', isRefreshing && 'animate-spin')} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {Object.keys(filters).length > 0 && (\n            <div className=\"flex flex-wrap items-center gap-2 mt-4 pt-4 border-t border-gray-200\">\n              <span className=\"text-sm text-gray-600\">当前筛选:</span>\n              {Object.entries(filters).map(([key, value]) => {\n                if (!value) return null;\n                const label = {\n                  category: categories.find(c => c.id === value)?.name || `分类 ${value}`,\n                  subcategory: `子分类 ${value}`,\n                  priceMin: `¥${value}起`,\n                  priceMax: `¥${value}以下`,\n                  rating: `${value}星以上`,\n                  deliveryTime: `${value}天内`,\n                  sellerLevel: `${value}`,\n                }[key] || `${key}: ${value}`;\n\n                return (\n                  <span\n                    key={key}\n                    className=\"px-3 py-1 bg-blue-100 text-blue-700 text-sm rounded-full flex items-center space-x-1\"\n                  >\n                    <span>{label}</span>\n                    <button\n                      onClick={() => {\n                        const newFilters = { ...filters };\n                        delete newFilters[key as keyof typeof filters];\n                        handleFilterChange(newFilters);\n                      }}\n                      className=\"hover:text-blue-900\"\n                    >\n                      <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  </span>\n                );\n              })}\n              <button\n                onClick={handleClearFilters}\n                className=\"px-3 py-1 text-sm text-red-600 hover:text-red-700\"\n              >\n                清除全部\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex gap-8\">\n          {/* Sidebar */}\n          <aside className=\"hidden lg:block w-64 flex-shrink-0\">\n            <FilterSidebar\n              categories={categories}\n              isOpen={true}\n              onClose={() => {}}\n            />\n          </aside>\n\n          {/* Main Content */}\n          <main className=\"flex-1\">\n            {/* Results Header */}\n            <div className=\"mb-6\">\n              {searchQuery && (\n                <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  搜索结果: \"{searchQuery}\"\n                </h1>\n              )}\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-gray-600\">\n                  {totalCount > 0 ? (\n                    <>\n                      找到 <span className=\"font-semibold text-gray-900\">{totalCount}</span> 个服务\n                      {currentPage > 1 && (\n                        <span className=\"ml-2\">\n                          (第 {currentPage} 页，共 {totalPages} 页)\n                        </span>\n                      )}\n                    </>\n                  ) : (\n                    '暂无服务'\n                  )}\n                </p>\n              </div>\n            </div>\n\n            {/* Featured Categories */}\n            {!searchQuery && Object.keys(filters).length === 0 && categories.length > 0 && (\n              <div className=\"mb-12\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">热门分类</h2>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                  {categories.slice(0, 8).map((category) => (\n                    <CategoryCard\n                      key={category.id}\n                      category={category}\n                      size=\"small\"\n                      onClick={() => handleCategoryClick(category)}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Featured Services */}\n            {!searchQuery && Object.keys(filters).length === 0 && featuredServices.length > 0 && (\n              <div className=\"mb-12\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">推荐服务</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                  {featuredServices.map((service) => (\n                    <ServiceCard\n                      key={service.id}\n                      service={service}\n                      viewMode=\"grid\"\n                      onQuickView={handleQuickView}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Loading State */}\n            {isInitialLoad && isLoading && renderLoadingSkeleton()}\n\n            {/* Error State */}\n            {error && !isLoading && renderErrorState()}\n\n            {/* Services Grid/List */}\n            {!isInitialLoad && !error && (\n              <>\n                {services.length > 0 ? (\n                  <>\n                    <div className={cn(\n                      'grid gap-6',\n                      viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1'\n                    )}>\n                      {services.map((service) => (\n                        <ServiceCard\n                          key={service.id}\n                          service={service}\n                          viewMode={viewMode}\n                          onQuickView={handleQuickView}\n                        />\n                      ))}\n                    </div>\n\n                    {/* Load More Indicator */}\n                    {isLoadingMore && (\n                      <div className=\"mt-8 text-center\">\n                        <div className=\"inline-flex items-center space-x-2 text-gray-600\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                          <span>加载更多...</span>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* End of Results */}\n                    {currentPage >= totalPages && services.length > 0 && (\n                      <div className=\"mt-12 text-center text-gray-500\">\n                        <p>已显示全部服务</p>\n                      </div>\n                    )}\n                  </>\n                ) : !isLoading && (\n                  renderEmptyState()\n                )}\n              </>\n            )}\n          </main>\n        </div>\n      </div>\n\n      {/* Mobile Filter Sidebar */}\n      {isFilterOpen && (\n        <FilterSidebar\n          categories={categories}\n          isOpen={isFilterOpen}\n          onClose={() => setIsFilterOpen(false)}\n        />\n      )}\n\n      {/* Quick View Modal */}\n      <QuickViewModal\n        service={quickViewService}\n        isOpen={showQuickView}\n        onClose={hideQuickView}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/api/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2324,2327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2324,2327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiRequest } from './index';\nimport { LoginCredentials, RegisterData, AuthResponse, SocialAuthData } from '@/types';\n\nexport const authService = {\n  // Login\n  login: async (credentials: LoginCredentials) => {\n    const response = await apiRequest.post<AuthResponse>('/auth/login/', credentials);\n    return response.data;\n  },\n\n  // Register\n  register: async (userData: RegisterData) => {\n    const response = await apiRequest.post<AuthResponse>('/auth/register/', userData);\n    return response.data;\n  },\n\n  // Logout\n  logout: async () => {\n    const response = await apiRequest.post('/auth/logout/');\n    return response.data;\n  },\n\n  // Refresh token\n  refreshToken: async (refresh: string) => {\n    const response = await apiRequest.post<{ access: string }>('/auth/token/refresh/', { refresh });\n    return response.data;\n  },\n\n  // Verify email\n  verifyEmail: async (token: string) => {\n    const response = await apiRequest.post('/auth/verify-email/', { token });\n    return response.data;\n  },\n\n  // Resend verification email\n  resendVerification: async (email: string) => {\n    const response = await apiRequest.post('/auth/resend-verification/', { email });\n    return response.data;\n  },\n\n  // Password reset request\n  requestPasswordReset: async (email: string) => {\n    const response = await apiRequest.post('/auth/password-reset/', { email });\n    return response.data;\n  },\n\n  // Reset password\n  resetPassword: async (token: string, newPassword: string) => {\n    const response = await apiRequest.post('/auth/password-reset-confirm/', {\n      token,\n      new_password: newPassword,\n    });\n    return response.data;\n  },\n\n  // Change password\n  changePassword: async (oldPassword: string, newPassword: string) => {\n    const response = await apiRequest.post('/auth/change-password/', {\n      old_password: oldPassword,\n      new_password: newPassword,\n    });\n    return response.data;\n  },\n\n  // Social authentication\n  socialAuth: async (data: SocialAuthData) => {\n    const response = await apiRequest.post<AuthResponse>(`/auth/${data.provider}/`, data);\n    return response.data;\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    const response = await apiRequest.get('/auth/me/');\n    return response.data;\n  },\n\n  // Update user profile\n  updateProfile: async (profileData: any) => {\n    const response = await apiRequest.put('/auth/profile/', profileData);\n    return response.data;\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/api/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2131,2134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2131,2134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":115,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":120,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3323,3326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3323,3326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":124,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":129,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3552,3555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3552,3555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":133,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":138,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3782,3785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3782,3785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":142,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":147,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":151,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":156,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":161,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":176,"endColumn":6}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\nimport { ApiResponse } from '@/types';\n\n// Create axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  async (error: AxiosError) => {\n    const originalRequest = error.config as any;\n\n    // Handle 401 Unauthorized - token refresh\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (refreshToken) {\n          const response = await axios.post(\n            `${import.meta.env.VITE_API_BASE_URL}/auth/token/refresh/`,\n            { refresh: refreshToken }\n          );\n\n          const { access } = response.data;\n          localStorage.setItem('access_token', access);\n\n          // Retry original request with new token\n          originalRequest.headers.Authorization = `Bearer ${access}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // Handle network errors\n    if (!error.response) {\n      console.error('Network Error:', error.message);\n      return Promise.reject(new Error('网络连接失败，请检查您的网络设置'));\n    }\n\n    // Handle other HTTP errors\n    const responseData = error.response.data as any;\n    const errorMessage = responseData?.detail ||\n                        responseData?.message ||\n                        getErrorMessage(error.response.status);\n\n    return Promise.reject(new Error(errorMessage));\n  }\n);\n\n// Helper function to get error messages based on status code\nfunction getErrorMessage(status: number): string {\n  switch (status) {\n    case 400:\n      return '请求参数错误';\n    case 401:\n      return '未授权，请重新登录';\n    case 403:\n      return '权限不足';\n    case 404:\n      return '请求的资源不存在';\n    case 405:\n      return '请求方法不被允许';\n    case 408:\n      return '请求超时';\n    case 409:\n      return '请求冲突';\n    case 429:\n      return '请求过于频繁，请稍后再试';\n    case 500:\n      return '服务器内部错误';\n    case 502:\n      return '网关错误';\n    case 503:\n      return '服务暂时不可用';\n    case 504:\n      return '网关超时';\n    default:\n      return '请求失败，请稍后重试';\n  }\n}\n\n// Generic API wrapper functions\nexport const apiRequest = {\n  get: async <T>(url: string, params?: any): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.get<ApiResponse<T>>(url, { params });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  post: async <T>(url: string, data?: any): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.post<ApiResponse<T>>(url, data);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  put: async <T>(url: string, data?: any): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.put<ApiResponse<T>>(url, data);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  patch: async <T>(url: string, data?: any): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.patch<ApiResponse<T>>(url, data);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  delete: async <T>(url: string): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.delete<ApiResponse<T>>(url);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // File upload\n  upload: async <T>(url: string, formData: FormData, onProgress?: (progress: number) => void): Promise<ApiResponse<T>> => {\n    try {\n      const response = await api.post<ApiResponse<T>>(url, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            onProgress(progress);\n          }\n        },\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\n// Export the axios instance for advanced usage\nexport default api;\n\n// Utility functions for auth\nexport const setAuthTokens = (access: string, refresh: string) => {\n  localStorage.setItem('access_token', access);\n  localStorage.setItem('refresh_token', refresh);\n};\n\nexport const clearAuthTokens = () => {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n};\n\nexport const getAccessToken = () => {\n  return localStorage.getItem('access_token');\n};\n\nexport const getRefreshToken = () => {\n  return localStorage.getItem('refresh_token');\n};\n\nexport const isAuthenticated = () => {\n  return !!getAccessToken();\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/api/orders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[722,725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[722,725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[971,974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[971,974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiRequest } from './index';\nimport { Order, Message, PaginatedResponse, PaginationParams } from '@/types';\n\nexport const ordersService = {\n  // Get all orders with pagination\n  getOrders: async (params?: PaginationParams & { status?: string; type?: 'buyer' | 'seller' }) => {\n    const response = await apiRequest.get<PaginatedResponse<Order>>('/orders/', params);\n    return response.data;\n  },\n\n  // Get single order by ID\n  getOrder: async (id: number) => {\n    const response = await apiRequest.get<Order>(`/orders/${id}/`);\n    return response.data;\n  },\n\n  // Create new order\n  createOrder: async (orderData: {\n    service: number;\n    package?: number;\n    requirements: { requirement_id: number; value: any }[];\n  }) => {\n    const response = await apiRequest.post<Order>('/orders/', orderData);\n    return response.data;\n  },\n\n  // Update order requirements\n  updateOrderRequirements: async (id: number, requirements: { requirement_id: number; value: any }[]) => {\n    const response = await apiRequest.put<Order>(`/orders/${id}/requirements/`, { requirements });\n    return response.data;\n  },\n\n  // Update order status\n  updateOrderStatus: async (id: number, status: string, note?: string) => {\n    const response = await apiRequest.put<Order>(`/orders/${id}/status/`, { status, note });\n    return response.data;\n  },\n\n  // Cancel order\n  cancelOrder: async (id: number, reason: string) => {\n    const response = await apiRequest.post<Order>(`/orders/${id}/cancel/`, { reason });\n    return response.data;\n  },\n\n  // Request revision\n  requestRevision: async (id: number, revisionRequest: {\n    message: string;\n    files?: File[];\n  }) => {\n    const formData = new FormData();\n    formData.append('message', revisionRequest.message);\n    revisionRequest.files?.forEach(file => {\n      formData.append('files', file);\n    });\n\n    const response = await apiRequest.upload<Order>(`/orders/${id}/request-revision/`, formData);\n    return response.data;\n  },\n\n  // Submit revision\n  submitRevision: async (id: number, submission: {\n    message: string;\n    files: File[];\n  }) => {\n    const formData = new FormData();\n    formData.append('message', submission.message);\n    submission.files.forEach(file => {\n      formData.append('files', file);\n    });\n\n    const response = await apiRequest.upload<Order>(`/orders/${id}/submit-revision/`, formData);\n    return response.data;\n  },\n\n  // Mark order as complete\n  completeOrder: async (id: number) => {\n    const response = await apiRequest.post<Order>(`/orders/${id}/complete/`);\n    return response.data;\n  },\n\n  // Accept delivery\n  acceptDelivery: async (id: number) => {\n    const response = await apiRequest.post<Order>(`/orders/${id}/accept-delivery/`);\n    return response.data;\n  },\n\n  // Get order messages\n  getOrderMessages: async (id: number, params?: PaginationParams) => {\n    const response = await apiRequest.get<PaginatedResponse<Message>>(`/orders/${id}/messages/`, params);\n    return response.data;\n  },\n\n  // Send order message\n  sendOrderMessage: async (id: number, message: {\n    content: string;\n    attachments?: File[];\n  }) => {\n    const formData = new FormData();\n    formData.append('content', message.content);\n    message.attachments?.forEach(file => {\n      formData.append('attachments', file);\n    });\n\n    const response = await apiRequest.upload<Message>(`/orders/${id}/messages/`, formData);\n    return response.data;\n  },\n\n  // Mark messages as read\n  markMessagesAsRead: async (orderId: number, messageIds?: number[]) => {\n    const response = await apiRequest.post(`/orders/${orderId}/messages/mark-read/`, { message_ids: messageIds });\n    return response.data;\n  },\n\n  // Get order attachments\n  getOrderAttachments: async (id: number) => {\n    const response = await apiRequest.get(`/orders/${id}/attachments/`);\n    return response.data;\n  },\n\n  // Upload order attachment\n  uploadOrderAttachment: async (id: number, file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiRequest.upload(`/orders/${id}/attachments/`, formData);\n    return response.data;\n  },\n\n  // Download order attachment\n  downloadOrderAttachment: async (id: number, attachmentId: number) => {\n    const response = await apiRequest.get(`/orders/${id}/attachments/${attachmentId}/download/`);\n    return response.data;\n  },\n\n  // Get order statistics\n  getOrderStats: async (params?: { period?: 'week' | 'month' | 'year' }) => {\n    const response = await apiRequest.get('/orders/stats/', params);\n    return response.data;\n  },\n\n  // Get order invoice\n  getOrderInvoice: async (id: number) => {\n    const response = await apiRequest.get(`/orders/${id}/invoice/`);\n    return response.data;\n  },\n\n  // Dispute order\n  disputeOrder: async (id: number, disputeData: {\n    reason: string;\n    description: string;\n    evidence?: File[];\n  }) => {\n    const formData = new FormData();\n    formData.append('reason', disputeData.reason);\n    formData.append('description', disputeData.description);\n    disputeData.evidence?.forEach(file => {\n      formData.append('evidence', file);\n    });\n\n    const response = await apiRequest.upload(`/orders/${id}/dispute/`, formData);\n    return response.data;\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/api/services.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":130,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":152,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":335,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":335,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":377,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11817,11820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11817,11820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  LoginCredentials,\n  RegisterData,\n  AuthResponse,\n  SocialAuthData,\n  User,\n  ApiResponse\n} from '@/types';\nimport { API_ENDPOINTS } from '@/constants';\n\n// Create axios instance for authentication\nclass AuthService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = this.getStoredToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n\n        // Add CSRF token for Django\n        const csrfToken = this.getCSRFToken();\n        if (csrfToken) {\n          config.headers['X-CSRFToken'] = csrfToken;\n        }\n\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor to handle token refresh\n    this.api.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized errors\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            await this.refreshToken();\n            const token = this.getStoredToken();\n            if (token) {\n              originalRequest.headers.Authorization = `Bearer ${token}`;\n              return this.api(originalRequest);\n            }\n          } catch (refreshError) {\n            // Refresh failed, clear tokens and redirect to login\n            this.clearTokens();\n            window.location.href = '/login';\n            return Promise.reject(refreshError);\n          }\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Token management utilities\n  private getStoredToken(): string | null {\n    return localStorage.getItem('access_token') || sessionStorage.getItem('access_token');\n  }\n\n  private getStoredRefreshToken(): string | null {\n    return localStorage.getItem('refresh_token') || sessionStorage.getItem('refresh_token');\n  }\n\n  private storeTokens(accessToken: string, refreshToken: string, rememberMe: boolean = false): void {\n    const storage = rememberMe ? localStorage : sessionStorage;\n    storage.setItem('access_token', accessToken);\n    storage.setItem('refresh_token', refreshToken);\n\n    // Also store in the other storage for consistency\n    if (rememberMe) {\n      sessionStorage.setItem('access_token', accessToken);\n      sessionStorage.setItem('refresh_token', refreshToken);\n    } else {\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('refresh_token', refreshToken);\n    }\n  }\n\n  private clearTokens(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    sessionStorage.removeItem('access_token');\n    sessionStorage.removeItem('refresh_token');\n    localStorage.removeItem('auth_remember');\n  }\n\n  private getCSRFToken(): string {\n    const name = 'csrftoken';\n    const cookies = document.cookie.split(';');\n\n    for (const cookie of cookies) {\n      const [cookieName, cookieValue] = cookie.trim().split('=');\n      if (cookieName === name) {\n        return decodeURIComponent(cookieValue);\n      }\n    }\n\n    return '';\n  }\n\n  // Authentication methods\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n      const response: AxiosResponse<AuthResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.LOGIN,\n        credentials\n      );\n\n      const { access, refresh, user } = response.data;\n\n      // Store tokens\n      this.storeTokens(access, refresh, credentials.rememberMe);\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '登录失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async register(data: RegisterData): Promise<AuthResponse> {\n    try {\n      const response: AxiosResponse<AuthResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.REGISTER,\n        data\n      );\n\n      const { access, refresh, user } = response.data;\n\n      // Store tokens\n      this.storeTokens(access, refresh);\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '注册失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.api.post(API_ENDPOINTS.AUTH.LOGOUT);\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear tokens locally\n      this.clearTokens();\n    }\n  }\n\n  async refreshToken(): Promise<{ access: string }> {\n    const refreshToken = this.getStoredRefreshToken();\n\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response: AxiosResponse<{ access: string }> = await this.api.post(\n        API_ENDPOINTS.AUTH.REFRESH,\n        { refresh: refreshToken }\n      );\n\n      const { access } = response.data;\n\n      // Update the stored access token\n      const rememberMe = localStorage.getItem('auth_remember') === 'true';\n      this.storeTokens(access, refreshToken, rememberMe);\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || 'Token刷新失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    try {\n      const response: AxiosResponse<User> = await this.api.get(API_ENDPOINTS.AUTH.ME);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '获取用户信息失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async updateProfile(userData: Partial<User>): Promise<User> {\n    try {\n      const response: AxiosResponse<User> = await this.api.patch(\n        API_ENDPOINTS.AUTH.PROFILE,\n        userData\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '更新个人信息失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  // Email verification\n  async verifyEmail(token: string): Promise<ApiResponse> {\n    try {\n      const response: AxiosResponse<ApiResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.VERIFY_EMAIL,\n        { token }\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '邮箱验证失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async resendVerificationEmail(email: string): Promise<ApiResponse> {\n    try {\n      const response: AxiosResponse<ApiResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.RESEND_VERIFICATION,\n        { email }\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '发送验证邮件失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  // Password reset\n  async requestPasswordReset(email: string): Promise<ApiResponse> {\n    try {\n      const response: AxiosResponse<ApiResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.PASSWORD_RESET,\n        { email }\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '发送重置邮件失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async confirmPasswordReset(token: string, newPassword: string): Promise<ApiResponse> {\n    try {\n      const response: AxiosResponse<ApiResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.PASSWORD_RESET_CONFIRM,\n        {\n          token,\n          new_password: newPassword,\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '密码重置失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  async changePassword(oldPassword: string, newPassword: string): Promise<ApiResponse> {\n    try {\n      const response: AxiosResponse<ApiResponse> = await this.api.post(\n        API_ENDPOINTS.AUTH.CHANGE_PASSWORD,\n        {\n          old_password: oldPassword,\n          new_password: newPassword,\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || '密码修改失败';\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  // Social authentication\n  async socialLogin(provider: 'wechat' | 'qq' | 'alipay', data: SocialAuthData): Promise<AuthResponse> {\n    try {\n      const endpoint = provider === 'wechat'\n        ? API_ENDPOINTS.AUTH.SOCIAL.WECHAT\n        : provider === 'qq'\n        ? API_ENDPOINTS.AUTH.SOCIAL.QQ\n        : '/api/auth/alipay/'; // Fallback for Alipay\n\n      const response: AxiosResponse<AuthResponse> = await this.api.post(endpoint, data);\n\n      const { access, refresh, user } = response.data;\n\n      // Store tokens\n      this.storeTokens(access, refresh);\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const message = error.response?.data?.error || error.response?.data?.message || `${provider}登录失败`;\n        throw new Error(message);\n      }\n      throw error;\n    }\n  }\n\n  // Get social login URL\n  getSocialLoginUrl(provider: 'wechat' | 'qq' | 'alipay'): string {\n    const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';\n    const redirectUrl = encodeURIComponent(`${window.location.origin}/auth/callback/${provider}`);\n\n    switch (provider) {\n      case 'wechat':\n        return `${baseUrl}/api/auth/wechat/?redirect_uri=${redirectUrl}`;\n      case 'qq':\n        return `${baseUrl}/api/auth/qq/?redirect_uri=${redirectUrl}`;\n      case 'alipay':\n        return `${baseUrl}/api/auth/alipay/?redirect_uri=${redirectUrl}`;\n      default:\n        throw new Error(`Unsupported social provider: ${provider}`);\n    }\n  }\n\n  // Check authentication status\n  async checkAuthStatus(): Promise<boolean> {\n    try {\n      const token = this.getStoredToken();\n      if (!token) {\n        return false;\n      }\n\n      await this.getCurrentUser();\n      return true;\n    } catch (error) {\n      this.clearTokens();\n      return false;\n    }\n  }\n\n  // Utility method to get auth headers for other API calls\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getStoredToken();\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const csrfToken = this.getCSRFToken();\n    if (csrfToken) {\n      headers['X-CSRFToken'] = csrfToken;\n    }\n\n    return headers;\n  }\n\n  // Retry logic for failed requests\n  async retryRequest<T>(\n    requestFn: () => Promise<AxiosResponse<T>>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<AxiosResponse<T>> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        return await requestFn();\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on authentication errors\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n          throw error;\n        }\n\n        // Wait before retrying (exponential backoff)\n        if (attempt < maxRetries - 1) {\n          await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, attempt)));\n        }\n      }\n    }\n\n    throw lastError;\n  }\n}\n\n// Create singleton instance\nconst authService = new AuthService();\n\n// Export service and types\nexport default authService;\nexport { AuthService };\n\n// Export convenience functions\nexport const authApi = {\n  login: authService.login.bind(authService),\n  register: authService.register.bind(authService),\n  logout: authService.logout.bind(authService),\n  refreshToken: authService.refreshToken.bind(authService),\n  getCurrentUser: authService.getCurrentUser.bind(authService),\n  updateProfile: authService.updateProfile.bind(authService),\n  verifyEmail: authService.verifyEmail.bind(authService),\n  resendVerificationEmail: authService.resendVerificationEmail.bind(authService),\n  requestPasswordReset: authService.requestPasswordReset.bind(authService),\n  confirmPasswordReset: authService.confirmPasswordReset.bind(authService),\n  changePassword: authService.changePassword.bind(authService),\n  socialLogin: authService.socialLogin.bind(authService),\n  getSocialLoginUrl: authService.getSocialLoginUrl.bind(authService),\n  checkAuthStatus: authService.checkAuthStatus.bind(authService),\n  getAuthHeaders: authService.getAuthHeaders.bind(authService),\n  retryRequest: authService.retryRequest.bind(authService),\n};","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/services.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Category' is defined but never used.","line":2,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Subcategory' is defined but never used.","line":2,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2781,2784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2781,2784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiRequest } from './api';\nimport { Service, ServicePackage, Review, User, Category, Subcategory, PaginatedResponse, ApiResponse } from '@/types';\n\n// Extended types for service details\nexport interface ServiceDetail extends Service {\n  packages: ServicePackage[];\n  requirements: ServiceRequirement[];\n  faqs: ServiceFAQ[];\n  sellerProfile: UserProfile;\n  gallery: ServiceGalleryItem[];\n  statistics: ServiceStatistics;\n  relatedServices: Service[];\n  isFavorited: boolean;\n  recentlyViewed?: boolean;\n}\n\nexport interface ServiceFAQ {\n  id: number;\n  service: number;\n  question: string;\n  answer: string;\n  isHelpful: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ServiceGalleryItem {\n  id: number;\n  service: number;\n  type: 'image' | 'video';\n  url: string;\n  thumbnail?: string;\n  caption?: string;\n  order: number;\n}\n\nexport interface ServiceStatistics {\n  views: number;\n  likes: number;\n  shares: number;\n  bookmarks: number;\n  averageResponseTime: number;\n  completionRate: number;\n  onTimeDelivery: number;\n  repeatCustomers: number;\n}\n\nexport interface ServiceRequirement {\n  id: number;\n  service: number;\n  title: string;\n  description: string;\n  type: 'text' | 'file' | 'boolean' | 'number' | 'date';\n  required: boolean;\n  options?: string[];\n  maxCharacters?: number;\n  allowedFileTypes?: string[];\n  placeholder?: string;\n}\n\nexport interface UserProfile extends Omit<User, 'id' | 'username' | 'email' | 'role' | 'isVerified' | 'createdAt' | 'updatedAt'> {\n  badges: SellerBadge[];\n  languages: Language[];\n  education: Education[];\n  certifications: Certification[];\n  responseStats: ResponseStats;\n}\n\nexport interface SellerBadge {\n  id: number;\n  name: string;\n  description: string;\n  icon: string;\n  level: 'bronze' | 'silver' | 'gold' | 'platinum';\n  earnedAt: string;\n}\n\nexport interface Language {\n  language: string;\n  proficiency: 'basic' | 'conversational' | 'fluent' | 'native';\n}\n\nexport interface Education {\n  degree: string;\n  institution: string;\n  startYear: string;\n  endYear?: string;\n  isCurrent: boolean;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  issueDate: string;\n  expiryDate?: string;\n  credentialUrl?: string;\n}\n\nexport interface ResponseStats {\n  averageResponseTime: number;\n  responseRate: number;\n  lastActive: string;\n}\n\nexport interface ServiceReviewFilter {\n  rating?: number;\n  hasResponse?: boolean;\n  sortBy?: 'rating' | 'date' | 'helpful';\n  sortOrder?: 'asc' | 'desc';\n  page?: number;\n  pageSize?: number;\n}\n\nexport interface ContactSellerData {\n  serviceId: number;\n  message: string;\n  attachments?: File[];\n  budget?: number;\n  timeline?: string;\n}\n\nexport interface CreateOrderData {\n  serviceId: number;\n  packageId?: number;\n  requirements: Record<string, any>;\n  customRequirements?: string;\n  deliveryDate?: string;\n  attachments?: File[];\n}\n\nexport interface ServiceShareData {\n  serviceId: number;\n  platform: 'wechat' | 'weibo' | 'qq' | 'link' | 'email';\n  customMessage?: string;\n}\n\n// API Service Functions\nexport const serviceService = {\n  // Get service details\n  getServiceDetail: async (serviceId: string): Promise<ApiResponse<ServiceDetail>> => {\n    return apiRequest.get(`/services/${serviceId}/`);\n  },\n\n  // Get service reviews\n  getServiceReviews: async (\n    serviceId: string,\n    filters?: ServiceReviewFilter\n  ): Promise<ApiResponse<PaginatedResponse<Review>>> => {\n    const params = new URLSearchParams();\n    if (filters?.rating) params.append('rating', filters.rating.toString());\n    if (filters?.hasResponse !== undefined) params.append('has_response', filters.hasResponse.toString());\n    if (filters?.sortBy) params.append('sort_by', filters.sortBy);\n    if (filters?.sortOrder) params.append('sort_order', filters.sortOrder);\n    if (filters?.page) params.append('page', filters.page.toString());\n    if (filters?.pageSize) params.append('page_size', filters.pageSize.toString());\n\n    return apiRequest.get(`/services/${serviceId}/reviews/?${params.toString()}`);\n  },\n\n  // Get service FAQs\n  getServiceFAQs: async (serviceId: string): Promise<ApiResponse<ServiceFAQ[]>> => {\n    return apiRequest.get(`/services/${serviceId}/faqs/`);\n  },\n\n  // Get related services\n  getRelatedServices: async (serviceId: string, limit?: number): Promise<ApiResponse<Service[]>> => {\n    const params = limit ? `?limit=${limit}` : '';\n    return apiRequest.get(`/services/${serviceId}/related/${params}`);\n  },\n\n  // Submit review\n  submitReview: async (\n    serviceId: string,\n    orderId: string,\n    data: { rating: number; comment: string }\n  ): Promise<ApiResponse<Review>> => {\n    return apiRequest.post(`/services/${serviceId}/reviews/`, { ...data, order: orderId });\n  },\n\n  // Mark review as helpful\n  markReviewHelpful: async (reviewId: string): Promise<ApiResponse<void>> => {\n    return apiRequest.post(`/reviews/${reviewId}/helpful/`);\n  },\n\n  // Contact seller\n  contactSeller: async (data: ContactSellerData): Promise<ApiResponse<{ conversationId: number }>> => {\n    const formData = new FormData();\n    formData.append('service', data.serviceId.toString());\n    formData.append('message', data.message);\n    if (data.budget) formData.append('budget', data.budget.toString());\n    if (data.timeline) formData.append('timeline', data.timeline);\n\n    if (data.attachments?.length) {\n      data.attachments.forEach((file, index) => {\n        formData.append(`attachment_${index}`, file);\n      });\n    }\n\n    return apiRequest.upload('/messages/contact-seller/', formData);\n  },\n\n  // Create order\n  createOrder: async (data: CreateOrderData): Promise<ApiResponse<{ orderId: number; orderNumber: string }>> => {\n    const formData = new FormData();\n    formData.append('service', data.serviceId.toString());\n    if (data.packageId) formData.append('package', data.packageId.toString());\n    if (data.customRequirements) formData.append('custom_requirements', data.customRequirements);\n    if (data.deliveryDate) formData.append('delivery_date', data.deliveryDate);\n\n    // Add requirements\n    Object.entries(data.requirements).forEach(([key, value]) => {\n      if (typeof value === 'object' && value instanceof File) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    });\n\n    // Add attachments\n    if (data.attachments?.length) {\n      data.attachments.forEach((file, index) => {\n        formData.append(`attachment_${index}`, file);\n      });\n    }\n\n    return apiRequest.upload('/orders/', formData);\n  },\n\n  // Add to favorites\n  addToFavorites: async (serviceId: string): Promise<ApiResponse<void>> => {\n    return apiRequest.post(`/services/${serviceId}/favorite/`);\n  },\n\n  // Remove from favorites\n  removeFromFavorites: async (serviceId: string): Promise<ApiResponse<void>> => {\n    return apiRequest.delete(`/services/${serviceId}/favorite/`);\n  },\n\n  // Track service view\n  trackView: async (serviceId: string): Promise<ApiResponse<void>> => {\n    return apiRequest.post(`/services/${serviceId}/track-view/`);\n  },\n\n  // Share service\n  shareService: async (data: ServiceShareData): Promise<ApiResponse<{ shareUrl: string }>> => {\n    return apiRequest.post('/services/share/', data);\n  },\n\n  // Get seller services\n  getSellerServices: async (\n    sellerId: string,\n    limit?: number\n  ): Promise<ApiResponse<Service[]>> => {\n    const params = limit ? `?limit=${limit}` : '';\n    return apiRequest.get(`/users/${sellerId}/services/${params}`);\n  },\n\n  // Report service\n  reportService: async (\n    serviceId: string,\n    reason: string,\n    description?: string\n  ): Promise<ApiResponse<void>> => {\n    return apiRequest.post(`/services/${serviceId}/report/`, {\n      reason,\n      description,\n    });\n  },\n\n  // Get service analytics (for sellers)\n  getServiceAnalytics: async (serviceId: string): Promise<ApiResponse<ServiceStatistics>> => {\n    return apiRequest.get(`/services/${serviceId}/analytics/`);\n  },\n\n  // Update service status (for sellers)\n  updateServiceStatus: async (\n    serviceId: string,\n    status: 'active' | 'inactive' | 'paused'\n  ): Promise<ApiResponse<Service>> => {\n    return apiRequest.patch(`/services/${serviceId}/`, { status });\n  },\n};\n\nexport default serviceService;","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/services/verification.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[534,537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[534,537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1999,2002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1999,2002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":82,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4318,4321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4318,4321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4585,4588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4585,4588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4849,4852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4849,4852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5279,5282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5279,5282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5673,5676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5673,5676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5868,5871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5868,5871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6145,6148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6145,6148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6414,6417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6414,6417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { api } from './api';\nimport {\n  VerificationStatus,\n  VerificationDocument,\n  FreelancerProfile,\n  OnboardingProgress\n} from '../types';\n\nexport class VerificationService {\n  private baseURL = '/api/v1/verification';\n\n  // Get verification status\n  async getVerificationStatus(): Promise<VerificationStatus> {\n    const response = await api.get(`${this.baseURL}/status/`);\n    return response.data;\n  }\n\n  // Upload verification document\n  async uploadDocument(\n    type: string,\n    file: File,\n    metadata?: Record<string, any>\n  ): Promise<VerificationDocument> {\n    const formData = new FormData();\n    formData.append('type', type);\n    formData.append('file', file);\n\n    if (metadata) {\n      Object.entries(metadata).forEach(([key, value]) => {\n        formData.append(key, String(value));\n      });\n    }\n\n    const response = await api.post(`${this.baseURL}/documents/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  // Delete verification document\n  async deleteDocument(documentId: string): Promise<void> {\n    await api.delete(`${this.baseURL}/documents/${documentId}/`);\n  }\n\n  // Submit verification for review\n  async submitVerification(): Promise<VerificationStatus> {\n    const response = await api.post(`${this.baseURL}/submit/`);\n    return response.data;\n  }\n\n  // Get freelancer profile\n  async getFreelancerProfile(): Promise<FreelancerProfile> {\n    const response = await api.get('/api/v1/freelancer/profile/');\n    return response.data;\n  }\n\n  // Create or update freelancer profile\n  async updateFreelancerProfile(profileData: Partial<FreelancerProfile>): Promise<FreelancerProfile> {\n    const response = await api.post('/api/v1/freelancer/profile/', profileData);\n    return response.data;\n  }\n\n  // Upload portfolio item\n  async uploadPortfolioItem(\n    title: string,\n    description: string,\n    images: File[],\n    technologies: string[],\n    projectUrl?: string\n  ): Promise<any> {\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('description', description);\n    formData.append('technologies', JSON.stringify(technologies));\n\n    if (projectUrl) {\n      formData.append('project_url', projectUrl);\n    }\n\n    images.forEach((image, index) => {\n      formData.append(`images`, image);\n    });\n\n    const response = await api.post('/api/v1/freelancer/portfolio/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  // Update portfolio item\n  async updatePortfolioItem(itemId: string, data: Partial<any>): Promise<any> {\n    const response = await api.patch(`/api/v1/freelancer/portfolio/${itemId}/`, data);\n    return response.data;\n  }\n\n  // Delete portfolio item\n  async deletePortfolioItem(itemId: string): Promise<void> {\n    await api.delete(`/api/v1/freelancer/portfolio/${itemId}/`);\n  }\n\n  // Verify phone number\n  async verifyPhone(phone: string, code: string): Promise<boolean> {\n    const response = await api.post(`${this.baseURL}/phone/verify/`, {\n      phone,\n      code,\n    });\n    return response.data.success;\n  }\n\n  // Send phone verification code\n  async sendPhoneVerification(phone: string): Promise<boolean> {\n    const response = await api.post(`${this.baseURL}/phone/send-code/`, {\n      phone,\n    });\n    return response.data.success;\n  }\n\n  // Verify email\n  async verifyEmail(token: string): Promise<boolean> {\n    const response = await api.post(`${this.baseURL}/email/verify/`, {\n      token,\n    });\n    return response.data.success;\n  }\n\n  // Resend email verification\n  async resendEmailVerification(): Promise<boolean> {\n    const response = await api.post(`${this.baseURL}/email/resend/`);\n    return response.data.success;\n  }\n\n  // Record video introduction\n  async uploadVideoIntroduction(file: File): Promise<string> {\n    const formData = new FormData();\n    formData.append('video', file);\n\n    const response = await api.post(`${this.baseURL}/video-intro/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.video_url;\n  }\n\n  // Verify social media profile\n  async verifySocialMedia(\n    platform: string,\n    username: string,\n    profileUrl: string\n  ): Promise<any> {\n    const response = await api.post(`${this.baseURL}/social-media/verify/`, {\n      platform,\n      username,\n      profile_url: profileUrl,\n    });\n    return response.data;\n  }\n\n  // Get available skills and categories\n  async getSkillsCategories(): Promise<any> {\n    const response = await api.get('/api/v1/skills-categories/');\n    return response.data;\n  }\n\n  // Assess skills\n  async assessSkills(skills: Array<{\n    name: string;\n    category: string;\n    level: string;\n    years_experience: number;\n  }>): Promise<any> {\n    const response = await api.post(`${this.baseURL}/skills-assess/`, {\n      skills,\n    });\n    return response.data;\n  }\n\n  // Get onboarding progress\n  async getOnboardingProgress(): Promise<OnboardingProgress> {\n    const response = await api.get('/api/v1/onboarding/progress/');\n    return response.data;\n  }\n\n  // Save onboarding progress\n  async saveOnboardingProgress(\n    stepId: string,\n    data: Record<string, any>\n  ): Promise<OnboardingProgress> {\n    const response = await api.post('/api/v1/onboarding/progress/', {\n      step_id: stepId,\n      data,\n    });\n    return response.data;\n  }\n\n  // Complete onboarding\n  async completeOnboarding(): Promise<void> {\n    await api.post('/api/v1/onboarding/complete/');\n  }\n\n  // Get verification requirements\n  async getVerificationRequirements(): Promise<any> {\n    const response = await api.get(`${this.baseURL}/requirements/`);\n    return response.data;\n  }\n\n  // Get verification tips and help\n  async getVerificationTips(step?: string): Promise<any> {\n    const url = step\n      ? `${this.baseURL}/tips/?step=${step}`\n      : `${this.baseURL}/tips/`;\n    const response = await api.get(url);\n    return response.data;\n  }\n\n  // Check document validation status\n  async checkDocumentValidation(documentId: string): Promise<any> {\n    const response = await api.get(`${this.baseURL}/documents/${documentId}/validation/`);\n    return response.data;\n  }\n\n  // Get pricing suggestions\n  async getPricingSuggestions(\n    skills: string[],\n    experience: string,\n    location: string\n  ): Promise<any> {\n    const response = await api.post(`${this.baseURL}/pricing-suggestions/`, {\n      skills,\n      experience,\n      location,\n    });\n    return response.data;\n  }\n\n  // Download verification report\n  async downloadVerificationReport(): Promise<Blob> {\n    const response = await api.get(`${this.baseURL}/report/`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  }\n}\n\nexport const verificationService = new VerificationService();","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/store/authStore.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":553,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { User, LoginCredentials, RegisterData, AuthResponse, SocialAuthData } from '@/types';\n\n// Auth state interface\ninterface AuthState {\n  // User state\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n\n  // Tokens\n  accessToken: string | null;\n  refreshToken: string | null;\n\n  // Error state\n  error: string | null;\n\n  // Social login state\n  socialLoginLoading: {\n    wechat: boolean;\n    qq: boolean;\n    alipay: boolean;\n  };\n\n  // Form states\n  loginForm: {\n    email: string;\n    password: string;\n    rememberMe: boolean;\n  };\n\n  registerForm: {\n    email: string;\n    password: string;\n    confirmPassword: string;\n    username: string;\n    firstName: string;\n    lastName: string;\n    userType: 'client' | 'freelancer';\n    phone?: string;\n    agreeToTerms: boolean;\n  };\n\n  // Password reset state\n  forgotPasswordEmail: string;\n  resetPasswordToken: string | null;\n}\n\n// Auth actions interface\ninterface AuthActions {\n  // Authentication actions\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => void;\n\n  // Token management\n  setTokens: (accessToken: string, refreshToken: string) => void;\n  refreshAccessToken: () => Promise<void>;\n  clearTokens: () => void;\n\n  // Social login\n  socialLogin: (provider: 'wechat' | 'qq' | 'alipay', data: SocialAuthData) => Promise<void>;\n\n  // User management\n  setUser: (user: User) => void;\n  updateUser: (userData: Partial<User>) => void;\n\n  // Form actions\n  updateLoginForm: (data: Partial<AuthState['loginForm']>) => void;\n  updateRegisterForm: (data: Partial<AuthState['registerForm']>) => void;\n  resetForms: () => void;\n\n  // Password reset\n  requestPasswordReset: (email: string) => Promise<void>;\n  resetPassword: (token: string, newPassword: string) => Promise<void>;\n\n  // Error handling\n  setError: (error: string | null) => void;\n  clearError: () => void;\n\n  // Loading states\n  setLoading: (loading: boolean) => void;\n  setSocialLoginLoading: (provider: keyof AuthState['socialLoginLoading'], loading: boolean) => void;\n\n  // Initialization\n  initializeAuth: () => Promise<void>;\n  checkAuthStatus: () => Promise<boolean>;\n}\n\n// Combine state and actions\ntype AuthStore = AuthState & AuthActions;\n\n// Create the auth store\nexport const useAuthStore = create<AuthStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      accessToken: null,\n      refreshToken: null,\n      error: null,\n      socialLoginLoading: {\n        wechat: false,\n        qq: false,\n        alipay: false,\n      },\n      loginForm: {\n        email: '',\n        password: '',\n        rememberMe: false,\n      },\n      registerForm: {\n        email: '',\n        password: '',\n        confirmPassword: '',\n        username: '',\n        firstName: '',\n        lastName: '',\n        userType: 'client',\n        phone: '',\n        agreeToTerms: false,\n      },\n      forgotPasswordEmail: '',\n      resetPasswordToken: null,\n\n      // Authentication actions\n      login: async (credentials) => {\n        set((state) => {\n          state.isLoading = true;\n          state.error = null;\n        });\n\n        try {\n          const response = await fetch('/api/auth/login/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCSRFToken(),\n            },\n            body: JSON.stringify(credentials),\n          });\n\n          const data: AuthResponse = await response.json();\n\n          if (!response.ok) {\n            throw new Error(data.error || '登录失败');\n          }\n\n          set({\n            user: data.user,\n            isAuthenticated: true,\n            accessToken: data.access,\n            refreshToken: data.refresh,\n            isLoading: false,\n            loginForm: {\n              ...get().loginForm,\n              email: credentials.email,\n              rememberMe: credentials.rememberMe || false,\n            },\n          });\n\n          // Store tokens securely\n          if (credentials.rememberMe) {\n            localStorage.setItem('auth_remember', 'true');\n          }\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : '登录失败',\n            isLoading: false,\n          });\n          throw error;\n        }\n      },\n\n      register: async (data) => {\n        set({\n          isLoading: true,\n          error: null,\n        });\n\n        try {\n          const response = await fetch('/api/auth/register/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCSRFToken(),\n            },\n            body: JSON.stringify(data),\n          });\n\n          const result: AuthResponse = await response.json();\n\n          if (!response.ok) {\n            throw new Error(result.error || '注册失败');\n          }\n\n          set({\n            user: result.user,\n            isAuthenticated: true,\n            accessToken: result.access,\n            refreshToken: result.refresh,\n            isLoading: false,\n          });\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : '注册失败',\n            isLoading: false,\n          });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({\n          user: null,\n          isAuthenticated: false,\n          accessToken: null,\n          refreshToken: null,\n          error: null,\n        });\n\n        // Clear stored data\n        localStorage.removeItem('auth_remember');\n        sessionStorage.removeItem('auth_tokens');\n\n        // Redirect to login page\n        window.location.href = '/login';\n      },\n\n      // Token management\n      setTokens: (accessToken, refreshToken) => {\n        set({\n          accessToken,\n          refreshToken,\n        });\n      },\n\n      refreshAccessToken: async () => {\n        const { refreshToken } = get();\n\n        if (!refreshToken) {\n          get().logout();\n          return;\n        }\n\n        try {\n          const response = await fetch('/api/auth/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ refresh: refreshToken }),\n          });\n\n          const data = await response.json();\n\n          if (!response.ok) {\n            throw new Error('Token refresh failed');\n          }\n\n          set({\n            accessToken: data.access,\n          });\n        } catch (error) {\n          console.error('Token refresh failed:', error);\n          get().logout();\n        }\n      },\n\n      clearTokens: () => {\n        set({\n          accessToken: null,\n          refreshToken: null,\n        });\n      },\n\n      // Social login\n      socialLogin: async (provider, data) => {\n        set({\n          socialLoginLoading: {\n            ...get().socialLoginLoading,\n            [provider]: true,\n          },\n          error: null,\n        });\n\n        try {\n          const response = await fetch(`/api/auth/social/${provider}/`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCSRFToken(),\n            },\n            body: JSON.stringify(data),\n          });\n\n          const result: AuthResponse = await response.json();\n\n          if (!response.ok) {\n            throw new Error(result.error || `${provider}登录失败`);\n          }\n\n          set({\n            user: result.user,\n            isAuthenticated: true,\n            accessToken: result.access,\n            refreshToken: result.refresh,\n            socialLoginLoading: {\n              ...get().socialLoginLoading,\n              [provider]: false,\n            },\n          });\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : `${provider}登录失败`,\n            socialLoginLoading: {\n              ...get().socialLoginLoading,\n              [provider]: false,\n            },\n          });\n          throw error;\n        }\n      },\n\n      // User management\n      setUser: (user) => {\n        set({\n          user,\n          isAuthenticated: true,\n        });\n      },\n\n      updateUser: (userData) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({\n            user: { ...currentUser, ...userData },\n          });\n        }\n      },\n\n      // Form actions\n      updateLoginForm: (data) => {\n        set({\n          loginForm: { ...get().loginForm, ...data },\n        });\n      },\n\n      updateRegisterForm: (data) => {\n        set({\n          registerForm: { ...get().registerForm, ...data },\n        });\n      },\n\n      resetForms: () => {\n        set({\n          loginForm: {\n            email: '',\n            password: '',\n            rememberMe: false,\n          },\n          registerForm: {\n            email: '',\n            password: '',\n            confirmPassword: '',\n            username: '',\n            firstName: '',\n            lastName: '',\n            userType: 'client',\n            phone: '',\n            agreeToTerms: false,\n          },\n        });\n      },\n\n      // Password reset\n      requestPasswordReset: async (email) => {\n        set({\n          isLoading: true,\n          error: null,\n          forgotPasswordEmail: email,\n        });\n\n        try {\n          const response = await fetch('/api/auth/password-reset/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCSRFToken(),\n            },\n            body: JSON.stringify({ email }),\n          });\n\n          const result = await response.json();\n\n          if (!response.ok) {\n            throw new Error(result.error || '发送重置邮件失败');\n          }\n\n          set({ isLoading: false });\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : '发送重置邮件失败',\n            isLoading: false,\n          });\n          throw error;\n        }\n      },\n\n      resetPassword: async (token, newPassword) => {\n        set({\n          isLoading: true,\n          error: null,\n          resetPasswordToken: token,\n        });\n\n        try {\n          const response = await fetch('/api/auth/password-reset-confirm/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCSRFToken(),\n            },\n            body: JSON.stringify({\n              token,\n              new_password: newPassword,\n            }),\n          });\n\n          const result = await response.json();\n\n          if (!response.ok) {\n            throw new Error(result.error || '密码重置失败');\n          }\n\n          set({\n            isLoading: false,\n            resetPasswordToken: null,\n          });\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : '密码重置失败',\n            isLoading: false,\n          });\n          throw error;\n        }\n      },\n\n      // Error handling\n      setError: (error) => {\n        set({ error });\n      },\n\n      clearError: () => {\n        set({ error: null });\n      },\n\n      // Loading states\n      setLoading: (loading) => {\n        set({ isLoading: loading });\n      },\n\n      setSocialLoginLoading: (provider, loading) => {\n        set({\n          socialLoginLoading: {\n            ...get().socialLoginLoading,\n            [provider]: loading,\n          },\n        });\n      },\n\n      // Initialization\n      initializeAuth: async () => {\n        const { accessToken, refreshToken } = get();\n\n        if (accessToken && refreshToken) {\n          try {\n            // Verify the current token\n            const response = await fetch('/api/auth/user/', {\n              headers: {\n                'Authorization': `Bearer ${accessToken}`,\n              },\n            });\n\n            if (response.ok) {\n              const user = await response.json();\n              set((state) => {\n                state.user = user;\n                state.isAuthenticated = true;\n              });\n            } else if (response.status === 401) {\n              // Token expired, try to refresh\n              await get().refreshAccessToken();\n            }\n          } catch (error) {\n            console.error('Auth initialization failed:', error);\n            get().clearTokens();\n          }\n        }\n      },\n\n      checkAuthStatus: async () => {\n        const { accessToken } = get();\n\n        if (!accessToken) {\n          return false;\n        }\n\n        try {\n          const response = await fetch('/api/auth/user/', {\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n            },\n          });\n\n          return response.ok;\n        } catch (error) {\n          return false;\n        }\n      },\n    })),\n    {\n      name: 'auth-store',\n      storage: createJSONStorage(() => ({\n        getItem: (name) => {\n          const rememberMe = localStorage.getItem('auth_remember');\n          const storage = rememberMe ? localStorage : sessionStorage;\n          return storage.getItem(name);\n        },\n        setItem: (name, value) => {\n          const rememberMe = localStorage.getItem('auth_remember');\n          const storage = rememberMe ? localStorage : sessionStorage;\n          storage.setItem(name, value);\n        },\n        removeItem: (name) => {\n          localStorage.removeItem(name);\n          sessionStorage.removeItem(name);\n        },\n      })),\n      partialize: (state) => ({\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n        accessToken: state.accessToken,\n        refreshToken: state.refreshToken,\n        loginForm: state.loginForm,\n        registerForm: state.registerForm,\n      }),\n    }\n  )\n);\n\n// Utility function to get CSRF token\nfunction getCSRFToken(): string {\n  const name = 'csrftoken';\n  const cookies = document.cookie.split(';');\n\n  for (let cookie of cookies) {\n    const [cookieName, cookieValue] = cookie.trim().split('=');\n    if (cookieName === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n\n  return '';\n}\n\n// Export types for external use\nexport type { AuthState, AuthActions, AuthStore };","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/store/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[445,448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[445,448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":119,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":183,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8597,8600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8597,8600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { User, AuthResponse } from '@/types';\nimport { setAuthTokens, clearAuthTokens, getAccessToken } from '@/services/api';\n\n// Auth store interface\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (credentials: { email: string; password: string }) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n  updateUser: (userData: Partial<User>) => void;\n  checkAuth: () => Promise<void>;\n}\n\n// Create auth store\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (credentials) => {\n        set({ isLoading: true });\n        try {\n          const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/auth/login/`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(credentials),\n          });\n\n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || error.message || '登录失败');\n          }\n\n          const data: AuthResponse = await response.json();\n\n          setAuthTokens(data.access, data.refresh);\n          set({\n            user: data.user,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      register: async (userData) => {\n        set({ isLoading: true });\n        try {\n          const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/auth/register/`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData),\n          });\n\n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || error.message || '注册失败');\n          }\n\n          const data: AuthResponse = await response.json();\n\n          setAuthTokens(data.access, data.refresh);\n          set({\n            user: data.user,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        clearAuthTokens();\n        set({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n        });\n      },\n\n      refreshToken: async () => {\n        try {\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (!refreshToken) {\n            get().logout();\n            return;\n          }\n\n          const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/auth/token/refresh/`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ refresh: refreshToken }),\n          });\n\n          if (!response.ok) {\n            get().logout();\n            return;\n          }\n\n          const data = await response.json();\n          localStorage.setItem('access_token', data.access);\n        } catch (error) {\n          get().logout();\n        }\n      },\n\n      updateUser: (userData) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({\n            user: { ...currentUser, ...userData },\n          });\n        }\n      },\n\n      checkAuth: async () => {\n        const token = getAccessToken();\n        if (!token) {\n          set({ isAuthenticated: false, user: null });\n          return;\n        }\n\n        set({ isLoading: true });\n        try {\n          const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/auth/me/`, {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          });\n\n          if (!response.ok) {\n            // Token might be expired, try to refresh\n            await get().refreshToken();\n            const newToken = getAccessToken();\n            if (!newToken) {\n              get().logout();\n              return;\n            }\n\n            // Retry with new token\n            const retryResponse = await fetch(`${import.meta.env.VITE_API_BASE_URL}/auth/me/`, {\n              headers: {\n                'Authorization': `Bearer ${newToken}`,\n              },\n            });\n\n            if (!retryResponse.ok) {\n              get().logout();\n              return;\n            }\n\n            const userData = await retryResponse.json();\n            set({\n              user: userData,\n              isAuthenticated: true,\n              isLoading: false,\n            });\n          } else {\n            const userData = await response.json();\n            set({\n              user: userData,\n              isAuthenticated: true,\n              isLoading: false,\n            });\n          }\n        } catch (error) {\n          set({\n            isAuthenticated: false,\n            user: null,\n            isLoading: false,\n          });\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\n// UI Store interface\ninterface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  language: 'zh' | 'en';\n  notifications: Array<{\n    id: string;\n    type: 'success' | 'error' | 'warning' | 'info';\n    title: string;\n    message: string;\n    duration?: number;\n  }>;\n  toggleSidebar: () => void;\n  setSidebarOpen: (open: boolean) => void;\n  setTheme: (theme: 'light' | 'dark') => void;\n  setLanguage: (language: 'zh' | 'en') => void;\n  addNotification: (notification: Omit<UIState['notifications'][0], 'id'>) => void;\n  removeNotification: (id: string) => void;\n  clearNotifications: () => void;\n}\n\n// Create UI store\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set, get) => ({\n      sidebarOpen: false,\n      theme: 'light',\n      language: 'zh',\n      notifications: [],\n\n      toggleSidebar: () => {\n        set((state) => ({ sidebarOpen: !state.sidebarOpen }));\n      },\n\n      setSidebarOpen: (open) => {\n        set({ sidebarOpen: open });\n      },\n\n      setTheme: (theme) => {\n        set({ theme });\n        document.documentElement.classList.toggle('dark', theme === 'dark');\n      },\n\n      setLanguage: (language) => {\n        set({ language });\n      },\n\n      addNotification: (notification) => {\n        const id = Date.now().toString();\n        const newNotification = { ...notification, id };\n        set((state) => ({\n          notifications: [...state.notifications, newNotification],\n        }));\n\n        // Auto remove notification after duration\n        if (notification.duration !== 0) {\n          setTimeout(() => {\n            get().removeNotification(id);\n          }, notification.duration || 5000);\n        }\n      },\n\n      removeNotification: (id) => {\n        set((state) => ({\n          notifications: state.notifications.filter((n) => n.id !== id),\n        }));\n      },\n\n      clearNotifications: () => {\n        set({ notifications: [] });\n      },\n    }),\n    {\n      name: 'ui-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        theme: state.theme,\n        language: state.language,\n      }),\n    }\n  )\n);\n\n// Service Store interface\ninterface ServiceState {\n  filters: {\n    category?: number;\n    subcategory?: number;\n    priceMin?: number;\n    priceMax?: number;\n    deliveryTime?: number;\n    rating?: number;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  };\n  setFilters: (filters: Partial<ServiceState['filters']>) => void;\n  clearFilters: () => void;\n}\n\n// Create service store\nexport const useServiceStore = create<ServiceState>()(\n  persist(\n    (set) => ({\n      filters: {},\n\n      setFilters: (newFilters) => {\n        set((state) => ({\n          filters: { ...state.filters, ...newFilters },\n        }));\n      },\n\n      clearFilters: () => {\n        set({ filters: {} });\n      },\n    }),\n    {\n      name: 'service-storage',\n      storage: createJSONStorage(() => sessionStorage),\n    }\n  )\n);\n\n// Cart Store interface\ninterface CartState {\n  items: Array<{\n    service: number;\n    package?: number;\n    quantity: number;\n    requirements?: any[];\n  }>;\n  addItem: (item: Omit<CartState['items'][0], 'quantity'>) => void;\n  removeItem: (serviceId: number, packageId?: number) => void;\n  updateQuantity: (serviceId: number, quantity: number, packageId?: number) => void;\n  clearCart: () => void;\n  getTotalItems: () => number;\n  getTotalPrice: () => number;\n}\n\n// Create cart store\nexport const useCartStore = create<CartState>()(\n  persist(\n    (set, get) => ({\n      items: [],\n\n      addItem: (item) => {\n        set((state) => {\n          const existingItemIndex = state.items.findIndex(\n            (i) => i.service === item.service && i.package === item.package\n          );\n\n          if (existingItemIndex > -1) {\n            const updatedItems = [...state.items];\n            updatedItems[existingItemIndex].quantity += 1;\n            return { items: updatedItems };\n          }\n\n          return {\n            items: [...state.items, { ...item, quantity: 1 }],\n          };\n        });\n      },\n\n      removeItem: (serviceId, packageId) => {\n        set((state) => ({\n          items: state.items.filter(\n            (item) => !(item.service === serviceId && item.package === packageId)\n          ),\n        }));\n      },\n\n      updateQuantity: (serviceId, quantity, packageId) => {\n        if (quantity <= 0) {\n          get().removeItem(serviceId, packageId);\n          return;\n        }\n\n        set((state) => ({\n          items: state.items.map((item) =>\n            item.service === serviceId && item.package === packageId\n              ? { ...item, quantity }\n              : item\n          ),\n        }));\n      },\n\n      clearCart: () => {\n        set({ items: [] });\n      },\n\n      getTotalItems: () => {\n        return get().items.reduce((total, item) => total + item.quantity, 0);\n      },\n\n      getTotalPrice: () => {\n        // This would need to be calculated based on service prices\n        // For now, return 0 as a placeholder\n        return 0;\n      },\n    }),\n    {\n      name: 'cart-storage',\n      storage: createJSONStorage(() => sessionStorage),\n    }\n  )\n);","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/store/servicesStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/theme/ThemeProvider.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'colors' object makes the dependencies of useEffect Hook (at line 183) change on every render. To fix this, wrap the initialization of 'colors' in its own useMemo() Hook.","line":105,"column":9,"nodeType":"VariableDeclarator","endLine":115,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'settings' object makes the dependencies of useEffect Hook (at line 183) change on every render. To fix this, wrap the initialization of 'settings' in its own useMemo() Hook.","line":118,"column":9,"nodeType":"VariableDeclarator","endLine":123,"endColumn":4},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":218,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":218,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ConfigProvider, theme as antdTheme } from 'antd';\nimport zhCN from 'antd/locale/zh_CN';\nimport { antdTheme as chineseAntdTheme, antdDarkTheme } from './antd-theme';\n\n// Theme context interface\ninterface ThemeContextType {\n  /**\n   * Current theme mode\n   */\n  mode: 'light' | 'dark';\n\n  /**\n   * Toggle theme mode\n   */\n  toggleTheme: () => void;\n\n  /**\n   * Set theme mode\n   */\n  setTheme: (mode: 'light' | 'dark') => void;\n\n  /**\n   * Current theme colors\n   */\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    warning: string;\n    error: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n  };\n\n  /**\n   * Current theme settings\n   */\n  settings: {\n    fontFamily: string;\n    fontSize: string;\n    borderRadius: string;\n    spacing: string;\n  };\n}\n\n// Create theme context\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Theme provider props\ninterface ThemeProviderProps {\n  /**\n   * Children components\n   */\n  children: React.ReactNode;\n\n  /**\n   * Default theme mode\n   * @default 'light'\n   */\n  defaultMode?: 'light' | 'dark';\n\n  /**\n   * Enable system theme detection\n   * @default true\n   */\n  enableSystem?: boolean;\n\n  /**\n   * Storage key for theme persistence\n   * @default 'chinese-theme'\n   */\n  storageKey?: string;\n}\n\n// Chinese Theme Provider Component\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  defaultMode = 'light',\n  enableSystem = true,\n  storageKey = 'chinese-theme',\n}) => {\n  // Theme state\n  const [mode, setMode] = useState<'light' | 'dark'>(() => {\n    // Get stored theme or use default\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem(storageKey);\n      if (stored === 'light' || stored === 'dark') {\n        return stored;\n      }\n\n      // Use system preference if enabled\n      if (enableSystem) {\n        const systemPreference = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        return systemPreference ? 'dark' : 'light';\n      }\n    }\n\n    return defaultMode;\n  });\n\n  // Theme colors\n  const colors = {\n    primary: mode === 'light' ? '#ef4444' : '#f87171',\n    secondary: mode === 'light' ? '#f59e0b' : '#fbbf24',\n    success: mode === 'light' ? '#22c55e' : '#34d399',\n    warning: mode === 'light' ? '#f59e0b' : '#fbbf24',\n    error: mode === 'light' ? '#ef4444' : '#f87171',\n    background: mode === 'light' ? '#ffffff' : '#1f2937',\n    surface: mode === 'light' ? '#f9fafb' : '#374151',\n    text: mode === 'light' ? '#111827' : '#f9fafb',\n    textSecondary: mode === 'light' ? '#6b7280' : '#d1d5db',\n  };\n\n  // Theme settings\n  const settings = {\n    fontFamily: '\"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", system-ui, -apple-system, sans-serif',\n    fontSize: '14px',\n    borderRadius: '3px',\n    spacing: '16px',\n  };\n\n  // Toggle theme function\n  const toggleTheme = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  };\n\n  // Set theme function\n  const setTheme = (newMode: 'light' | 'dark') => {\n    setMode(newMode);\n  };\n\n  // Save theme to localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(storageKey, mode);\n    }\n  }, [mode, storageKey]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    if (!enableSystem) return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setMode(e.matches ? 'dark' : 'light');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [enableSystem]);\n\n  // Apply theme to document\n  useEffect(() => {\n    if (typeof document !== 'undefined') {\n      const root = document.documentElement;\n\n      // Remove existing theme classes\n      root.classList.remove('light', 'dark');\n\n      // Add current theme class\n      root.classList.add(mode);\n\n      // Set data attribute for Ant Design\n      root.setAttribute('data-theme', mode);\n\n      // Update CSS variables\n      root.style.setProperty('--theme-mode', mode);\n\n      // Update font settings\n      root.style.setProperty('--font-family', settings.fontFamily);\n      root.style.setProperty('--font-size', settings.fontSize);\n      root.style.setProperty('--border-radius', settings.borderRadius);\n      root.style.setProperty('--spacing', settings.spacing);\n\n      // Update color variables\n      Object.entries(colors).forEach(([key, value]) => {\n        root.style.setProperty(`--color-${key}`, value);\n      });\n    }\n  }, [mode, colors, settings]);\n\n  // Theme context value\n  const contextValue: ThemeContextType = {\n    mode,\n    toggleTheme,\n    setTheme,\n    colors,\n    settings,\n  };\n\n  // Ant Design theme configuration\n  const antdConfig = {\n    theme: {\n      algorithm: mode === 'dark' ? antdTheme.darkAlgorithm : antdTheme.defaultAlgorithm,\n      token: mode === 'dark' ? antdDarkTheme.token : chineseAntdTheme.token,\n      components: mode === 'dark' ? antdDarkTheme.components : chineseAntdTheme.components,\n    },\n    locale: zhCN,\n    direction: 'ltr' as const,\n    componentSize: 'middle' as const,\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <ConfigProvider {...antdConfig}>\n        <div className={`theme-${mode} min-h-screen bg-${mode === 'light' ? 'gray-50' : 'gray-900'} transition-colors duration-200`}>\n          {children}\n        </div>\n      </ConfigProvider>\n    </ThemeContext.Provider>\n  );\n};\n\n// Hook to use theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Theme toggle button component\nexport const ThemeToggle: React.FC<{\n  className?: string;\n  showLabel?: boolean;\n}> = ({ className, showLabel = false }) => {\n  const { mode, toggleTheme } = useTheme();\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={cn(\n        'inline-flex items-center justify-center p-2 rounded-lg transition-colors duration-200',\n        'bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700',\n        'text-gray-700 dark:text-gray-300',\n        'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500',\n        className\n      )}\n      aria-label={`切换到${mode === 'light' ? '深色' : '浅色'}模式`}\n    >\n      {mode === 'light' ? (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n        </svg>\n      ) : (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n      )}\n      {showLabel && (\n        <span className=\"ml-2 text-sm font-medium\">\n          {mode === 'light' ? '深色模式' : '浅色模式'}\n        </span>\n      )}\n    </button>\n  );\n};\n\n// Export theme provider and hook\nexport default ThemeProvider;\n\n// Import cn utility\nimport { cn } from '../utils/cn';","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/theme/antd-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5382,5385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5382,5385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6523,6526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6523,6526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":506,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10454,10457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10454,10457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// User related types\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  avatar?: string;\n  bio?: string;\n  userType: 'client' | 'freelancer' | 'admin';\n  isActive: boolean;\n  isVerified: boolean;\n  profile: UserProfile;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserProfile {\n  id: number;\n  user: number;\n  displayName: string;\n  avatar?: string;\n  bio?: string;\n  skills: string[];\n  experience: string;\n  education: string;\n  portfolio: PortfolioItem[];\n  socialLinks: SocialLink[];\n  location?: string;\n  website?: string;\n  responseTime?: number;\n  languages: string[];\n  hourlyRate?: number;\n  availability: boolean;\n  totalEarnings?: number;\n  completedProjects?: number;\n  averageRating?: number;\n  totalReviews?: number;\n}\n\nexport interface PortfolioItem {\n  id: number;\n  title: string;\n  description: string;\n  images: string[];\n  projectUrl?: string;\n  technologies: string[];\n  completedAt: string;\n}\n\nexport interface SocialLink {\n  platform: 'wechat' | 'qq' | 'weibo' | 'github' | 'linkedin' | 'website';\n  url: string;\n  username: string;\n}\n\n// Service related types\nexport interface Service {\n  id: number;\n  title: string;\n  description: string;\n  seller: User;\n  category: Category;\n  subcategory: Subcategory;\n  price: number;\n  priceType: 'fixed' | 'hourly' | 'package';\n  deliveryTime: number;\n  revisions: number;\n  features: string[];\n  images: string[];\n  tags: string[];\n  status: 'active' | 'inactive' | 'pending' | 'rejected';\n  isFeatured: boolean;\n  viewCount: number;\n  orderCount: number;\n  averageRating: number;\n  totalReviews: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ServicePackage {\n  id: number;\n  service: number;\n  name: string;\n  description: string;\n  price: number;\n  deliveryTime: number;\n  revisions: number;\n  features: string[];\n  isPopular: boolean;\n}\n\nexport interface ServiceRequirement {\n  id: number;\n  service: number;\n  title: string;\n  description: string;\n  type: 'text' | 'file' | 'boolean' | 'number' | 'date';\n  required: boolean;\n  options?: string[];\n  maxCharacters?: number;\n  allowedFileTypes?: string[];\n}\n\n// Category related types\nexport interface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description: string;\n  image?: string;\n  isActive: boolean;\n  subcategories: Subcategory[];\n  serviceCount: number;\n}\n\nexport interface Subcategory {\n  id: number;\n  category: number;\n  name: string;\n  slug: string;\n  description: string;\n  image?: string;\n  isActive: boolean;\n  serviceCount: number;\n}\n\n// Order related types\nexport interface Order {\n  id: number;\n  orderNumber: string;\n  buyer: User;\n  seller: User;\n  service: Service;\n  package?: ServicePackage;\n  requirements: OrderRequirement[];\n  status: OrderStatus;\n  totalAmount: number;\n  currency: string;\n  paymentStatus: PaymentStatus;\n  paymentMethod?: string;\n  deliveryDate: string;\n  actualDeliveryDate?: string;\n  revisionsRemaining: number;\n  messages: Message[];\n  attachments: OrderAttachment[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport type OrderStatus =\n  | 'pending'\n  | 'paid'\n  | 'in_progress'\n  | 'revision_requested'\n  | 'revision_in_progress'\n  | 'completed'\n  | 'cancelled'\n  | 'refunded'\n  | 'disputed';\n\nexport type PaymentStatus =\n  | 'pending'\n  | 'paid'\n  | 'failed'\n  | 'refunded'\n  | 'partially_refunded';\n\nexport interface OrderRequirement {\n  id: number;\n  order: number;\n  title: string;\n  description: string;\n  type: 'text' | 'file' | 'boolean' | 'number' | 'date';\n  value: string | number | boolean;\n  file?: string;\n  isProvided: boolean;\n}\n\nexport interface OrderAttachment {\n  id: number;\n  order: number;\n  file: string;\n  filename: string;\n  fileType: string;\n  fileSize: number;\n  uploadedBy: number;\n  uploadedAt: string;\n}\n\n// Message related types\nexport interface Message {\n  id: number;\n  sender: User;\n  receiver: User;\n  order?: Order;\n  content: string;\n  attachments: MessageAttachment[];\n  isRead: boolean;\n  readAt?: string;\n  messageType: 'text' | 'file' | 'image' | 'system';\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface MessageAttachment {\n  id: number;\n  message: number;\n  file: string;\n  filename: string;\n  fileType: string;\n  fileSize: number;\n}\n\nexport interface Conversation {\n  id: number;\n  participant1: User;\n  participant2: User;\n  order?: Order;\n  lastMessage?: Message;\n  unreadCount: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Review and Rating types\nexport interface Review {\n  id: number;\n  order: Order;\n  reviewer: User;\n  reviewee: User;\n  rating: number;\n  comment: string;\n  response?: string;\n  isPublic: boolean;\n  helpfulCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Authentication types\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  userType: 'client' | 'freelancer';\n  agreeToTerms: boolean;\n}\n\nexport interface AuthResponse {\n  access: string;\n  refresh: string;\n  user: User;\n}\n\nexport interface SocialAuthData {\n  provider: 'wechat' | 'qq';\n  code: string;\n  state?: string;\n}\n\n// API Response types\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n  errors?: Record<string, string[]>;\n}\n\nexport interface PaginatedResponse<T> {\n  count: number;\n  next: string | null;\n  previous: string | null;\n  results: T[];\n}\n\n// Form related types\nexport interface FormErrors {\n  [key: string]: string | string[] | undefined;\n}\n\nexport interface FormState<T> {\n  data: T;\n  errors: FormErrors;\n  isSubmitting: boolean;\n  isDirty: boolean;\n  isValid: boolean;\n}\n\n// Utility types\nexport interface SelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface FilterOptions {\n  category?: number;\n  subcategory?: number;\n  priceMin?: number;\n  priceMax?: number;\n  deliveryTime?: number;\n  sellerLevel?: string;\n  rating?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginationParams {\n  page?: number;\n  pageSize?: number;\n}\n\n// Notification types\nexport interface Notification {\n  id: number;\n  user: number;\n  type: 'message' | 'order' | 'review' | 'system' | 'promotion';\n  title: string;\n  message: string;\n  data?: Record<string, any>;\n  isRead: boolean;\n  createdAt: string;\n}\n\n// Wallet and Transaction types\nexport interface Wallet {\n  id: number;\n  user: number;\n  balance: number;\n  availableBalance: number;\n  pendingBalance: number;\n  currency: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Transaction {\n  id: number;\n  wallet: number;\n  type: 'credit' | 'debit';\n  amount: number;\n  description: string;\n  source: string;\n  status: 'pending' | 'completed' | 'failed';\n  relatedOrder?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Verification related types\nexport interface VerificationStep {\n  id: string;\n  title: string;\n  description: string;\n  type: 'required' | 'optional';\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  isRequired: boolean;\n  order: number;\n}\n\nexport interface VerificationDocument {\n  id: string;\n  type: 'id_card' | 'passport' | 'professional_cert' | 'diploma' | 'portfolio' | 'video_intro' | 'social_media';\n  filename: string;\n  fileUrl: string;\n  fileType: string;\n  fileSize: number;\n  status: 'pending' | 'under_review' | 'approved' | 'rejected';\n  submittedAt: string;\n  reviewedAt?: string;\n  reviewNote?: string;\n}\n\nexport interface VerificationStatus {\n  overallStatus: 'not_started' | 'in_progress' | 'submitted' | 'under_review' | 'approved' | 'rejected';\n  completedSteps: number;\n  totalSteps: number;\n  steps: VerificationStep[];\n  documents: VerificationDocument[];\n  submittedAt?: string;\n  reviewedAt?: string;\n  rejectionReason?: string;\n}\n\nexport interface FreelancerProfile {\n  id: string;\n  userId: number;\n  accountType: 'individual' | 'company';\n  companyName?: string;\n  companyRegistrationNumber?: string;\n  professionalTitle: string;\n  experience: string;\n  education: EducationItem[];\n  skills: SkillItem[];\n  portfolio: PortfolioItem[];\n  hourlyRate: number;\n  currency: string;\n  availabilityStatus: 'available' | 'busy' | 'unavailable';\n  responseTime: number;\n  languages: LanguageItem[];\n  location: LocationItem;\n  bio: string;\n  videoIntroduction?: string;\n  professionalCertifications: CertificationItem[];\n  socialMediaLinks: SocialMediaLink[];\n  verificationStatus: VerificationStatus;\n  pricingTiers: PricingTier[];\n  preferredCategories: number[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface EducationItem {\n  id: string;\n  institution: string;\n  degree: string;\n  field: string;\n  startDate: string;\n  endDate?: string;\n  isCurrent: boolean;\n  diplomaDocument?: string;\n}\n\nexport interface SkillItem {\n  id: string;\n  name: string;\n  category: string;\n  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  yearsExperience: number;\n  isVerified: boolean;\n  verificationDocument?: string;\n}\n\nexport interface LanguageItem {\n  language: string;\n  proficiency: 'basic' | 'conversational' | 'professional' | 'native';\n  certificate?: string;\n}\n\nexport interface LocationItem {\n  country: string;\n  province: string;\n  city: string;\n  timezone: string;\n}\n\nexport interface CertificationItem {\n  id: string;\n  name: string;\n  issuingOrganization: string;\n  issueDate: string;\n  expiryDate?: string;\n  credentialId?: string;\n  credentialUrl?: string;\n  document: string;\n  status: 'pending' | 'verified' | 'rejected';\n}\n\nexport interface SocialMediaLink {\n  platform: 'linkedin' | 'github' | 'behance' | 'dribbble' | 'wechat' | 'weibo' | 'qq';\n  url: string;\n  username: string;\n  followers?: number;\n  isVerified: boolean;\n}\n\nexport interface PricingTier {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  deliveryTime: number;\n  revisions: number;\n  features: string[];\n  isPopular: boolean;\n}\n\nexport interface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  component: string;\n  isRequired: boolean;\n  order: number;\n  estimatedTime: number;\n}\n\nexport interface OnboardingProgress {\n  currentStep: string;\n  completedSteps: string[];\n  savedData: Record<string, any>;\n  isCompleted: boolean;\n  startedAt: string;\n  completedAt?: string;\n}","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/types/profile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5693,5696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5693,5696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5710,5713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5710,5713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5729,5732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5729,5732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5848,5851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5848,5851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5899,5902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5899,5902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Extended profile types for editing functionality\n\nexport interface ProfileEditState {\n  basicInfo: BasicInfo;\n  professionalInfo: ProfessionalInfo;\n  contactInfo: ContactInfo;\n  socialMedia: SocialMediaLink[];\n  portfolio: PortfolioItem[];\n  skills: SkillItem[];\n  experience: ExperienceItem[];\n  education: EducationItem[];\n  languages: LanguageItem[];\n  certifications: CertificationItem[];\n  settings: ProfileSettings;\n}\n\nexport interface BasicInfo {\n  displayName: string;\n  avatar?: string;\n  bio?: string;\n  title?: string;\n  location?: LocationItem;\n  website?: string;\n  languages: string[];\n}\n\nexport interface ProfessionalInfo {\n  professionalTitle: string;\n  hourlyRate?: number;\n  currency: string;\n  availabilityStatus: 'available' | 'busy' | 'unavailable';\n  responseTime?: number;\n  totalEarnings?: number;\n  completedProjects?: number;\n  accountType: 'individual' | 'company';\n  companyName?: string;\n  companyRegistrationNumber?: string;\n}\n\nexport interface ContactInfo {\n  email: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  country?: string;\n  timezone: string;\n}\n\nexport interface ExperienceItem {\n  id: string;\n  company: string;\n  position: string;\n  description?: string;\n  startDate: string;\n  endDate?: string;\n  isCurrent: boolean;\n  location?: string;\n  technologies?: string[];\n}\n\nexport interface ProfileSettings {\n  privacy: PrivacySettings;\n  notifications: NotificationSettings;\n  language: string;\n  timezone: string;\n  currency: string;\n  profileVisibility: 'public' | 'private' | 'clients_only';\n  showContactInfo: boolean;\n  allowMessages: boolean;\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  smsNotifications: boolean;\n  marketingEmails: boolean;\n  projectUpdates: boolean;\n  messageAlerts: boolean;\n  reviewNotifications: boolean;\n  promotionalEmails: boolean;\n}\n\nexport interface PrivacySettings {\n  profileVisibility: 'public' | 'private' | 'clients_only';\n  showEmail: boolean;\n  showPhone: boolean;\n  showLocation: boolean;\n  showWebsite: boolean;\n  showSocialMedia: boolean;\n  showPortfolio: boolean;\n  allowSearch: boolean;\n  allowRecommendations: boolean;\n}\n\nexport interface NotificationSettings {\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  smsNotifications: boolean;\n  marketingEmails: boolean;\n  projectUpdates: boolean;\n  messageAlerts: boolean;\n  reviewNotifications: boolean;\n  promotionalEmails: boolean;\n  newOrderAlerts: boolean;\n  orderStatusChanges: boolean;\n  paymentNotifications: boolean;\n  reviewRequests: boolean;\n  newsletterSubscription: boolean;\n}\n\nexport interface ProfileCompletion {\n  percentage: number;\n  completedSections: string[];\n  incompleteSections: string[];\n  suggestions: CompletionSuggestion[];\n}\n\nexport interface CompletionSuggestion {\n  section: string;\n  message: string;\n  priority: 'high' | 'medium' | 'low';\n  action?: string;\n}\n\nexport interface ProfileSection {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  isRequired: boolean;\n  isCompleted: boolean;\n  component: string;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  type: 'error' | 'warning' | 'info';\n}\n\nexport interface ProfileImage {\n  id: string;\n  url: string;\n  type: 'avatar' | 'portfolio' | 'certificate' | 'document';\n  name: string;\n  size: number;\n  uploadedAt: string;\n}\n\nexport interface ImageUploadOptions {\n  maxSize: number; // in bytes\n  allowedTypes: string[];\n  cropRatio?: number;\n  compressQuality?: number;\n  multiple?: boolean;\n}\n\nexport interface SkillCategory {\n  id: string;\n  name: string;\n  skills: string[];\n  icon?: string;\n}\n\nexport interface LanguageLevel {\n  language: string;\n  proficiency: 'basic' | 'conversational' | 'professional' | 'native';\n  certificate?: string;\n}\n\nexport interface AvailabilitySettings {\n  status: 'available' | 'busy' | 'unavailable';\n  maxProjectsPerMonth?: number;\n  workingHours?: {\n    start: string;\n    end: string;\n    days: number[]; // 0-6, Sunday to Saturday\n  };\n  vacationDates?: {\n    start: string;\n    end: string;\n  }[];\n}\n\nexport interface PricingSettings {\n  hourlyRate: number;\n  currency: string;\n  minimumProjectPrice?: number;\n  pricingTiers: PricingTier[];\n  discounts?: {\n    bulk: number; // percentage\n    recurring: number; // percentage\n  };\n}\n\nexport interface SocialMediaProfile {\n  platform: 'linkedin' | 'github' | 'behance' | 'dribbble' | 'wechat' | 'weibo' | 'qq' | 'twitter' | 'instagram' | 'youtube';\n  url: string;\n  username: string;\n  followers?: number;\n  isVerified: boolean;\n  visibility: 'public' | 'private';\n}\n\nexport interface PortfolioMedia {\n  id: string;\n  url: string;\n  type: 'image' | 'video' | 'document' | 'link';\n  name: string;\n  description?: string;\n  size?: number;\n  duration?: number; // for videos\n  thumbnail?: string;\n}\n\nexport interface AccountSecuritySettings {\n  twoFactorEnabled: boolean;\n  twoFactorMethod?: 'sms' | 'email' | 'app';\n  emailVerified: boolean;\n  phoneVerified: boolean;\n  lastPasswordChange?: string;\n  activeSessions: ActiveSession[];\n  loginAlerts: boolean;\n  sessionTimeout: number; // in minutes\n}\n\nexport interface ActiveSession {\n  id: string;\n  device: string;\n  browser: string;\n  location: string;\n  ipAddress: string;\n  lastAccess: string;\n  isCurrent: boolean;\n}\n\nexport interface DeletionRequest {\n  reason: string;\n  feedback: string;\n  confirmIdentity: boolean;\n  exportData: boolean;\n  deleteAfter: number; // days\n}\n\nexport interface ProfileExportData {\n  user: BasicInfo;\n  profile: ProfessionalInfo;\n  skills: SkillItem[];\n  experience: ExperienceItem[];\n  education: EducationItem[];\n  portfolio: PortfolioItem[];\n  reviews: any[];\n  orders: any[];\n  earnings: any[];\n  exportedAt: string;\n}\n\nexport interface ProfileImportData {\n  source: 'linkedin' | 'resume' | 'json';\n  data: any;\n  mapping: Record<string, string>;\n  preview: any;\n}","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/types/services.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2700,2703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2700,2703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Service creation system types\nexport interface ServiceFormData {\n  // Basic Information\n  title: string;\n  category: string;\n  subcategory: string;\n  description: string;\n  tags: string[];\n\n  // Pricing Packages\n  packages: ServicePackage[];\n\n  // Requirements & Deliverables\n  requirements: string[];\n  deliverables: string[];\n  revisionCount: number;\n  deliveryTime: number;\n\n  // Media\n  images: ServiceImage[];\n  videos: ServiceVideo[];\n  documents: ServiceDocument[];\n\n  // SEO\n  seoTitle: string;\n  seoDescription: string;\n  keywords: string[];\n\n  // Settings\n  status: 'draft' | 'active' | 'paused' | 'inactive';\n  featured: boolean;\n  autoPublish: boolean;\n  publishAt?: Date;\n}\n\nexport interface ServicePackage {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  deliveryTime: number;\n  revisions: number;\n  features: string[];\n  isPopular?: boolean;\n}\n\nexport interface ServiceImage {\n  id: string;\n  url: string;\n  alt: string;\n  order: number;\n  size: number;\n  dimensions: {\n    width: number;\n    height: number;\n  };\n}\n\nexport interface ServiceVideo {\n  id: string;\n  url: string;\n  thumbnail: string;\n  duration: number;\n  size: number;\n  title: string;\n  order: number;\n}\n\nexport interface ServiceDocument {\n  id: string;\n  name: string;\n  url: string;\n  size: number;\n  type: string;\n  order: number;\n}\n\nexport interface ServiceCategory {\n  id: string;\n  name: string;\n  icon?: string;\n  subcategories: ServiceSubcategory[];\n}\n\nexport interface ServiceSubcategory {\n  id: string;\n  name: string;\n  parentId: string;\n}\n\nexport interface FormValidationError {\n  field: string;\n  message: string;\n  type: 'error' | 'warning' | 'info';\n}\n\nexport interface ServiceDraft {\n  id: string;\n  title: string;\n  data: Partial<ServiceFormData>;\n  createdAt: Date;\n  updatedAt: Date;\n  step: number;\n}\n\nexport interface ServicePreview {\n  service: ServiceFormData;\n  isValid: boolean;\n  errors: FormValidationError[];\n  warnings: FormValidationError[];\n  suggestions: string[];\n}\n\nexport interface SEOAnalysis {\n  score: number;\n  title: {\n    length: number;\n    isOptimal: boolean;\n    suggestions: string[];\n  };\n  description: {\n    length: number;\n    isOptimal: boolean;\n    suggestions: string[];\n  };\n  keywords: {\n    count: number;\n    density: number;\n    suggestions: string[];\n  };\n  readability: {\n    score: number;\n    suggestions: string[];\n  };\n}\n\nexport interface MediaUploadOptions {\n  maxFileSize: number;\n  allowedTypes: string[];\n  maxCount: number;\n  requiredDimensions?: {\n    width: number;\n    height: number;\n  };\n}\n\nexport interface ServiceCreationStep {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType<any>;\n  validation: (data: Partial<ServiceFormData>) => FormValidationError[];\n  isCompleted: boolean;\n  isOptional: boolean;\n}\n\nexport interface ServiceCreationState {\n  currentStep: number;\n  formData: Partial<ServiceFormData>;\n  drafts: ServiceDraft[];\n  isAutoSaving: boolean;\n  lastSaved: Date | null;\n  errors: FormValidationError[];\n  warnings: FormValidationError[];\n  isValid: boolean;\n}","usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/subway/all_web/frontend/src/utils/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2248,2251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2248,2251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2258,2261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2258,2261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2562,2565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2562,2565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":215,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fallbackError' is defined but never used.","line":229,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6815,6818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6815,6818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n// Utility for combining Tailwind CSS classes\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Format currency\nexport function formatCurrency(amount: number, currency = 'CNY'): string {\n  return new Intl.NumberFormat('zh-CN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n// Format date\nexport function formatDate(\n  date: string | Date,\n  options: Intl.DateTimeFormatOptions = {}\n): string {\n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    ...options,\n  };\n\n  return new Intl.DateTimeFormat('zh-CN', defaultOptions).format(\n    typeof date === 'string' ? new Date(date) : date\n  );\n}\n\n// Format relative time\nexport function formatRelativeTime(date: string | Date): string {\n  const now = new Date();\n  const targetDate = typeof date === 'string' ? new Date(date) : date;\n  const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000);\n\n  const intervals = [\n    { label: '年前', seconds: 31536000 },\n    { label: '个月前', seconds: 2592000 },\n    { label: '周前', seconds: 604800 },\n    { label: '天前', seconds: 86400 },\n    { label: '小时前', seconds: 3600 },\n    { label: '分钟前', seconds: 60 },\n    { label: '刚刚', seconds: 1 },\n  ];\n\n  for (const interval of intervals) {\n    const count = Math.floor(diffInSeconds / interval.seconds);\n    if (count >= 1) {\n      return interval.label === '刚刚' ? '刚刚' : `${count}${interval.label}`;\n    }\n  }\n\n  return '刚刚';\n}\n\n// Format file size\nexport function formatFileSize(bytes: number): string {\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes === 0) return '0 B';\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n}\n\n// Generate random ID\nexport function generateId(length = 8): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n// Debounce function\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Throttle function\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n// Validate email\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// Validate phone number (Chinese)\nexport function isValidPhone(phone: string): boolean {\n  const phoneRegex = /^1[3-9]\\d{9}$/;\n  return phoneRegex.test(phone);\n}\n\n// Validate password\nexport function isValidPassword(password: string): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (password.length < 8) {\n    errors.push('密码长度至少8位');\n  }\n\n  if (!/[A-Z]/.test(password)) {\n    errors.push('密码必须包含至少一个大写字母');\n  }\n\n  if (!/[a-z]/.test(password)) {\n    errors.push('密码必须包含至少一个小写字母');\n  }\n\n  if (!/\\d/.test(password)) {\n    errors.push('密码必须包含至少一个数字');\n  }\n\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    errors.push('密码必须包含至少一个特殊字符');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n// Get file extension\nexport function getFileExtension(filename: string): string {\n  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n}\n\n// Check if file is image\nexport function isImageFile(filename: string): boolean {\n  const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp'];\n  const extension = getFileExtension(filename).toLowerCase();\n  return imageExtensions.includes(extension);\n}\n\n// Check if file is document\nexport function isDocumentFile(filename: string): boolean {\n  const documentExtensions = [\n    'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx',\n    'txt', 'rtf', 'odt', 'ods', 'odp'\n  ];\n  const extension = getFileExtension(filename).toLowerCase();\n  return documentExtensions.includes(extension);\n}\n\n// Truncate text\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n}\n\n// Slugify text\nexport function slugify(text: string): string {\n  return text\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '')\n    .replace(/[\\s_-]+/g, '-')\n    .replace(/^-+|-+$/g, '');\n}\n\n// Capitalize first letter\nexport function capitalize(text: string): string {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n\n// Get initials from name\nexport function getInitials(name: string, maxLength = 2): string {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, maxLength);\n}\n\n// Generate order number\nexport function generateOrderNumber(): string {\n  const timestamp = Date.now().toString();\n  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n  return `ORD${timestamp}${random}`;\n}\n\n// Copy to clipboard\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Fallback for older browsers\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.opacity = '0';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return true;\n    } catch (fallbackError) {\n      document.body.removeChild(textArea);\n      return false;\n    }\n  }\n}\n\n// Download file from URL\nexport function downloadFile(url: string, filename?: string): void {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename || 'download';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n// Parse URL parameters\nexport function parseUrlParams(url: string): Record<string, string> {\n  const params: Record<string, string> = {};\n  const urlObj = new URL(url);\n\n  urlObj.searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  return params;\n}\n\n// Build URL with parameters\nexport function buildUrl(base: string, params: Record<string, any>): string {\n  const url = new URL(base);\n\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      url.searchParams.append(key, value.toString());\n    }\n  });\n\n  return url.toString();\n}\n\n// Get contrast color for background\nexport function getContrastColor(backgroundColor: string): 'black' | 'white' {\n  const color = backgroundColor.replace('#', '');\n  const r = parseInt(color.substr(0, 2), 16);\n  const g = parseInt(color.substr(2, 2), 16);\n  const b = parseInt(color.substr(4, 2), 16);\n  const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n  return brightness > 128 ? 'black' : 'white';\n}\n\n// Calculate reading time\nexport function calculateReadingTime(text: string, wordsPerMinute = 200): number {\n  const words = text.trim().split(/\\s+/).length;\n  return Math.ceil(words / wordsPerMinute);\n}\n\n// Check if element is in viewport\nexport function isInViewport(element: HTMLElement): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n// Smooth scroll to element\nexport function scrollToElement(\n  elementId: string,\n  options: ScrollIntoViewOptions = { behavior: 'smooth', block: 'start' }\n): void {\n  const element = document.getElementById(elementId);\n  if (element) {\n    element.scrollIntoView(options);\n  }\n}\n\n// Get scroll position\nexport function getScrollPosition(): { x: number; y: number } {\n  return {\n    x: window.pageXOffset || document.documentElement.scrollLeft,\n    y: window.pageYOffset || document.documentElement.scrollTop,\n  };\n}\n\n// Local storage helpers\nexport const storage = {\n  get: <T>(key: string, defaultValue?: T): T | null => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue || null;\n    } catch {\n      return defaultValue || null;\n    }\n  },\n\n  set: <T>(key: string, value: T): void => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Failed to save to localStorage:', error);\n    }\n  },\n\n  remove: (key: string): void => {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error('Failed to remove from localStorage:', error);\n    }\n  },\n\n  clear: (): void => {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      console.error('Failed to clear localStorage:', error);\n    }\n  },\n};","usedDeprecatedRules":[]}]
